<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>My Paper</title>
      <link href="/2023/05/15/5-15-mypaper/"/>
      <url>/2023/05/15/5-15-mypaper/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="0df28f59bb5c02e5932697bb9c3f12d35837d0fbbf38b92a774eb513581bdb5d">34a23409a6334b365ea8ba791c6a22f12b4c95e69089090eb13c2abc9c58da111edafef7e7ed8609e4a7c1400807689be259ae7764c205988ae9eaac1c943998f20d3bf4deebc095bbe4ef9ae51a8a2753f10e1c7a07ad03e5a109f54d06430e0710398f2c67fcb05538c7f1658ae226d2f91f02620a75bb6668f45dc379f0328c0678bbe61c6661158aa2a9cdcda938c898fde5e0bc4ebdcf8a53819bdb6d56fb1739cfb96072d7e63e0cd7e38fb5f3c0bc82af78d213892186a29c74fee894503d03e628a419b1eaed22d19eb3e2375eeb47ff3aa9b5d41cdd6151f409191fda1528288700118c32107253e0bf1c900d893f7ae5579297ba1d542aa29ffd82b05606eb44ab186d378ab72267aaa2650bf555e788874aa132bb762dea70a2d2f24cba94298afd0079529755fef9eb446edfd9d572e24d53838c36f8c215f73e5e3d509e3da0e694d2b00c8a1c7a27c86e314dfb22d0be92bd9fd265ac16b061365f176646e5fd75b60ac04e2221c4023ba5ccb9d2f29be26e7f78d3ab54da21f77d221ec237fb68052c920cc01732e8d940ba8dd7bcbc412ff9e5b163f16db689d700da42b79ba888a555ff02eb47f1e6fb66cee9022e5522f240c3d4ee07e3f74b8e109d1e4186a7357bac64c65c0c53859c39127cdc870fe308014990690ccc599807feceae330a69110de9b7e469454ac6c9d684bb4b04c95dcd4b776b733e3de5ea9782d995863b063063d21bf6e0b02c145bc36fc1fe0a1810b5454dc4ade6a943cd6a91a11b3481afd1328c41d9156e3634f625393a7c4c5d3a9b871f0c04b04655a3f559105acf54e8bc2e896943a9b7aa17be8f54f1235786662a72027fca8d2f6c9075fb56d4695230b400c99849616e4bf967c9cf4cb5ea80e31a591f53046d7a95d12d534499c8ab0047cba668565462fd8c9f86fa9294d43c0e142698f99e6e35cc8b36ce96d871ecaf69e19206fe4da7413550f79bdea4692d6d3b959e193435e1ef21c9966f53bca54bc5ef65077e9d77c045ee3491274532544fb5002fb7a64570fac7009d49fb77de4a74e83badee24c379901089602608bbe90d62f0f10ef807aa28b5289146fc96806206352761be3f9f869daf9e46db8e7f2aba8a2db45d1e1f6c5a9e923c7597583c80665ecbb2236892361cb6d0c7e3f7fa31122d41cad6ceee9389578c12e823c3aeedb13c82510ff700d5099be8ab9cac81d24eb8e5adf73143aeb0d0dcc3dbe6c154844963ec08535aea638e6bc7531b7f3532dc28aebe406aabecb68a50d818eca37c8af1e40ab8cd4b011f2ca09dabcc04267c44b3acdbccdff2699fb71a341771500cba78d8e542650348617c071b01c4436554c6a6a94828bb16a27718c34c498e622b24208aca2813b60c2b835e0e9f064c894f49d22b2a08a668fe0517ef8b9d617ae04cb3dea4ee348677ed0ae843048d636f783d617cef3f0b8cfb9cd943cb51e317e089c2459e44ef297ce8b5069a9c4d31a6b6bdbbe282bc2e550b08e6ac437aecb5b066a9690e698e3b8c6421e543ce9a9b7006455a2339b4650429dd6021a5dfbcf0e6dbcbe46d8d9f67e7b771a89b5fb523116407159ca44fbbffef8d319b40b36a50581e41e4e5cc7283e726518adebf77cf4092a53eae372d9ee16450242e48db2088c7c1521f52442e4cc69595f21546204124d6f803db881a8d5bef25e0e87ab0fb550f345d99d0491ef3eeec4c2b7a48c9fdcca5b819b7203e3d080bbccc8a4c31cb2a396c361c47ef688ac5b6a205fd4def410aa2e130666d3e258feae430d48afea635aae1df4ebf1e12b57cf772e7d156fe361675f6bdeb5903a291834e5bd13e75d3f915190e12aec2e40f0f8cfe8c1f78e2a8c268165bd0d6f8d05b4f1f5b5d56ffb679215f81fe9e9959ac0405a9d5b512406cedb8205211a115dee32b7cf143302206b0fef428a9f0716dbe9f6a84092317ef61692cc8ecc8262880b177b8ac101d8299785e5a04af8d1268bab46873e67dca39d09d19f2641c535928efc4f6b58405fc6dd5f0857fdcaaf45619300b24624f74115aa1f2c8ad6b7a74359cc15a0ddd472d2f7b66caa2c610dc5947fd7ff19ffb9f72cd1dde6cb431fe4d38032328ae885db4ee3dba38fe75e2ccc2b29e12e0a322f57036a13de20b8573295295adf1e1c6f47476c8492540d7735f171ad751802e11738d5e3fe96f8408c19a0e99682031d7d45f21f4073d7722d0d6ce03b34fbc180c0d1a9af1ed75d83ec97f5285d28194612e1520b1a75c12c5bdfac005ca2e2de089572dcc109aa64d537905b66d17e37edf02b885883c67e7ddc9099208dd97b117128a898224f3c27888d7cbfb38731efca5575952d4615b1905c351688083decde412bf07d1c5e1eef3b954af0730a3bb6c72fb308d1128bf8bc7cfcd616e1508e00789b6de772819776c07d3342e21b25ce38309e1b29a81386b63d03429bf053692f9e807c92f32ace9534d05ab068537becc287d7c39f508fa8dc7dda52fcb447aefe2c009d3f2a3756d3576268c353d9d7db0abbc9270c0084550748c96f5cdded66a8c2154a06e49dfa93d49ec54f05d96c04ea9c2f5b6b6cd898e3401d5590655f5f6a48a41760af84327c252bbf83e3ea7222f9acd9fa60f520d36d384f9fec4a889608a8a5cea5fff9486e1ff8ee3c2c87ccf63c12bae4e3e28b48f9ff4d32e3f1371324f2cf4b721e4a0e39f973ee2edec6c213acebe1d994220ee56be42ab3f0d8f1e3d11016a936c38c12e2ff23523b22a24983cbebb18304081ad8b87ecb67929296d22043c4b61c5e49e6359ffed3684796c24b4c9a7892dce340c75311f840fd780d980c73f7c79541eace59f61172daa270e1b37bcf1389483139377c569edbdce32c4a25dbe27cdde40e4ad807ec64533beaff326fb65d92eeb4d527e883a11daf69bb580abc26603ead25f43f466c51fc2f0bb6765a8f53f0f072a38ff278765cf333db5f6dc80626bbebe0779a7df2dd65b2f71c00bf14ec3b742e3c8495699d2a93d2bb3e311b5fe03ec15fcb6f4696dee9abb304f8bc3530642819b559c654e5be4b535765b1c4c5e2a3d054ab6038e432b0efbe38e658ec5811e8e85d70824a447db3c5ae8f2aa8503c249753c6bc80b5892eecb4891913e1e06affa0de13f94669bfefa0d58cfa2b1ade2f954950aaff82d283c095d55ce35858e09353c1da5913d74630f0d21bafa24b014fc7d2afb904e1be98b0fc5b86ec50c7dac7aec505a5b62a4c48a1c8fec62decd6298c9a96cad7dab7a75875fece690444a262d3998d2980e00fdfb1d697a56ffda057a039827c56bfa4b268c52cc660d1a6f764a66e7306b1d3b3f68c1f148e17a2295ef03a794eb7df4389188dd40a15fb6beea9ab12ff87a89f84593e9f80736239dc4b47a9e7ae24de5afecdbd3719bb22764c2c0daba808083debb251f68f720315a720746f42a54efe68cf926f7c6e5e0a5b8e54f4b6719d7e059a58acb8116727d82a5edbab5c537ed48353524eb7d9cfce621ad2f839d4d29215388a4072316d121fc2b044d5c5d724aab9e877bd918ee800b8271478904e9d1687a462f48c9968adcbdfa90debfe77da202408fd2c899a539db417d9405060e5ca6c8a86a93334998a02145237e378d12203b806f163a0e1b1efd51beb0de47e63a67dd3b726dd48d805c0fa6e00f77305099d43bc0b8653898ae4f0b4dae3f1efc32d3b413c80c6c6a4a444bfaedb387e2c5f78e074932539cc800b9b53d4dc87e709ca1ece2167049798b6e2631e4fa970d310bffa43a65452ab709bfc3d296efd48320d179fc5451592552bffe37c75d9047db929d407c42559b270e17fe0d5690e68efdc12f02632845b00642ff5662abd92b04cb5c82ca984502e5adcf631f32abbc371eb7c90dedff197be0434c3a7f357fc7f489a7b1de3d38a31f316da3ef45101e229810e917e9ace7f9ee6374e55dd7e13569bb671f6f57ac32d1d849b8b4273f71efe21cc22989cd7d3c978d195d23a2b0c056e865a579385042c0902ca097e74ecc0a0c34c9715fe4e3ec988ec349dcda66865b19e09f2869ec541935e67aa7499d20943110c045bd69e5a8a1853f62b2f5a28beb76f8794dbe21ff1d295907383ded0498b2cf4ec8bc46d3846f9ca4520f07150a255de395a86fb06b8a46c3993c7f755e49f5cb9d0ac066a19c465f56963624f5d09118a23b7be0c6daa8fc6f2f255cc1a1de92664e5410d397839804acaabd023ddc3bfe1007fa82d8c68844c0dd5d7b3a39466ab0652308226e4f5bd3efc5bde8d62e1a3b14c9624a0c3e2eb59c9629e2ae0d19afcaacf33dda546a3094bde4ade75352f75986fea762e1b352335f8a7a3edd7f130ca7ee640a9e168b98f5eba77d12c7ddcd53e022d7bf41b71298362dcb2c17935f24602cc07ed1c87c48ec48d2260e2791107b0bf974345f5968d9c0817932523e874aa5f718faaecc65393525b32b44192adf0b8e32f73dab5e112c6b4b59db423c9c36a9876c8ed9d4319042f62c7dca8425bee7326c421613d93f44f4cd20257d437d91746f20d89615e029e6a67dd5f236af55ed0f9b10286f6703b1776f34e60fc5fd058795cc7dc512dd96842b5f3cbec1d3fa958419e94cc0afbfa94427833344c8935230ee00f07cc126bdb7649f488a246bc0049210c6139fe73920fa5a85c386ad6597ba5f5de51216167c2e5dccd77489aaf134d408bd8431dbd2754be1a29b0b095a45c718f3fb861bdde2b499e16b71c652eba1b9e923836f5bc1b3125ea7d68353b5dabd5761b14f1372eb59e764b742cf72214133210089c9c2e4d39ce7823a4c23dd837952e6417c16a1b8166946ae02a56e21f76c4284dd0a5f6b688265f6182cf669e1e9e22390738d1f186fd3981eead6730cf0c87acfec7a4f0043a61a64530f2f1fda109ad9b9d52f2b2650656135304be50ff36b7bec5ab1f55f65d607566ee3bc292e83b642a955930855059eef34ebb84e74c640ced60496ca2ecf5461c435e5fe4b0fbffddd75ca60771451c17065a97a05c601e6214fad2894c37196a2b5ff22c48b010a1a918899655c10133826067d089b2aad625c14c0689ec56ddf552d98ee1d158359e428e9f7b68f818d1c6d94ec8344c4da0d75c557c723381270f1fde523ff06812db9c3d83efe3bc90849008f0208594c4ef86a9830704e96375c6c68eeebd47cecd50f836a6765857cb7b662cee8e01b077e2371f78417bbc63f6451e34d9e59fa405d5fd18637862e2c3b4030cef1bcaf60d3000ebb03d9d7d2d9f17734a0fbf06fdd93c13114ea88bdf8677415d6a280e1701d91a08f79a5bcddf3cff199a581625c205ee1ae8b261fa9de0ef257c699a624db5c0ad46321f1c0c8a6343b2fab2f24dde74fdb6cad64f52bf19ab39a876cd0189bc44db21719f154a9d762d8b9d97082e6e3f48a2ea48991855d1a5a614d84f400741a786f6e21c8190a8027f7f957b7e328a9629fedb8af41ce09dc0e2ffdd63ca8246de8479f0dd21f96bb7fefba06707ec34bd2541b2ca9d5bdf2c2a02f839b1907f6fd4f248b5f486dc15e4d095f50f2a7e664759043e5e4d720e668596d72fb0d2436c784ac23705535ad58ded620d284c9b8f0d0d47c37dd861469abbeb19e5e6bbd2f711fb5fdd0012fb076d7dbc79f7128d9943f910f6312224bbdd260c7a1437d7544393660c72cd738b237e135d54ba7ce7c6082c9dfef5f563e252920c9f8910060ddfc38cdf606ff5e2c7b6bb3f976eeffdfbeddcb8880d4a09775f8e87ad19f4e07125eaed015e65ae0c890e6e548dff211694143e9b781e05eaea290ee1e9668a1f5fa2fb2519ed2d5fcf612a7847a5eef481afddd79c08e6fa0300b58f8b6eb2eee5838c2d6b9c0475f29e9341427d2ae1be8552d820b179eb84f2ae960e97e55f2580f753dbec41da69373b59c96257c5cbf338491136a37a6acd2b27f3705ab013d5e0017ab7a3616004f94b8e89199bb4e89482290727fd86a5819bdc6a305586f98c4b3aea72c548abc1d69eb238615c38ded0c0dcfe006aaa5fc2cf04672b8c1d0f06cf7e6a5c5274afd75b38cc748ccc59b1f179c2078a0c3db8d63e79d1ea1ae516dd9fc238ddec4938f827a26a3e73a4869df4270e18a510536d9e324e29441411f83ac9e0eb1531366aafaa0e68867cea6b27a50a9870e5d9d98798c563cd4029b384200194755c1fe026f1a96a5f1c22174c053daa79d3f183107cac3a5595bade8e244da27152f81ab1d3a6c6d536430c72ab3e90c472c657c5d7ee42bad1482496b2bc1a04be84c53f90977078246d7e8df63091e96d28e543ddaabb818104e2ec9523c6aecb52f1f9efc0e1f15474ccc954caee4f87e9ac05684c081fb6a3ead3f73d94b85d53b1baed68347a06cbb916a17645ef6b6040d939b3b9a0d2d7648bc0f266dfd8940cd0822eea7ab708835d8008e3b136222e83794e0b0650ae4a487261960893d13113de1de80cf3000dc741f078bbadf5a9dbb14e60617e736b62b446fd57ed3c197f35d4e32e004102692ef566f0d5c5db93409113e6aeed84d964c502994d58208f7c26fa4f50a62611c2a9e2a9cae79f0e86c9e45a6c6c6d664dbd88efd32b3abf6ae51ca56ead159d755086d0f8f8c2ba6106bf93bcccd39b881a2b50c5d0246ff4af27e19404e0fdc328ff35d427cc99b6fe3ddbd2e1224f331adbcb0056f9aa5e55279ae4b6e1669fcb67098d2f4c829e972e8155759cbcee6715c7fd7c7d8f099c44ba8b601b6b6e509bce96902a8d002df501bace9b47f02ed98d1066c7376d9eaeaedf3d11c1fc03fed9effa576376c09035d53b3d836c14174f1e47f0617d27513b2be7bbc9c22f1aa1cac6c00ee81da2f5efc0561f97f3bb015e2e9fe252020fe4c5e35051051b2a62fd5649525689dafae66131fd5bfad2d80623bc131a525ab748236086a2c58c51f323fd6d9667cbe81a4ac605caf6059a1819ddf7d451f591792b5465bf6ea8dba510a21f67fbc7702e39dee76f5b30557235d2f69ee7877af8cb1bc47724a82e6763b2adefbadcb19e2f5bb48825b4f600fea10c745393e6acfce2be6fe02ef0af8e34266241d03340f552b73e85b8b830657118d29243c52728592675fe30784560f4d6cbb3a46b7d3ee49189f6c41a87be4d0829262d37325e1e32265322aa3ba907ce3727b1072213c75aa0e9b902e2a8a40799a74e239c7e6e420391ad91680899f3404260720f70bd649ab85c19e66994055d7a9656841a55383864fc4f411a81f9717f83f08c570336a5329df28631a41a6215f7f1acaa27876ede4cd529ae6632234f9c5cbe505aa32fd079d0b7ae7550f2a81816d44f3ac62f7dbe7589d70d08dedff35ed22d359b72696f5199380601380ac2a876a94857bcf0daba13bbaf29e25628024c27c56946816f35aade45d4c993be2a9e993d522bb129d3990189631e5ea0786b4d7fbec7109860f1b053a8d616537959874bdd65b8b5ac82c55ed41070d61f5e41295718e18cf34b403dd7ccc512302429a314e2dbb89b3c6136e1dffe8bb1aeb392f65a7788368888fdb0df28ffbc193e6db3232eeb3d5b1cd46e9c0cafe4e38aff4a67692e441061533befcd5321a84ddf67ebafa58f7d1d93b6a48152ae81ab8142c558d04030ea0668aa625ce601f420e6992ea4c2cd02d20609845ff1e747ff013fb31f94005f3cf0685b2ddfe453fb1c6953c752d032b8a14ec955421d885c67908b780fac81547783f0b50474ff0fe11d1dc702bd57ed9d8d74f42d2b7720970fd92831b96eab64bdc9e12b9284ec62cc2c9f5d016541898d70bea93e66bcb36e46535e66271f0c5350f4ae4273bb896a2d93a953d8b4468574871410aedfc6e4b48217b50c4d3a64d601a291b55906c2b346c9b23a90f4aa32f2b1d34c114fbb9c32da0c3d654dca67197f3b8effc640bc74269747c077e414a081fe85d00691f0d942bd754a888db148ca23c7f6c19aa6fcb612b16637a24678fa54e573102523700d6d04f3d77742ffad76f3a7126739a1b45c4b41357d7e0c79ca9fd9badc9982245d204d836119f816c0448991aaa1f3030d4e9eb228183c160e74a18cd304a52c3bd940519133c8617829dc0a3a870609222cc4999ce6a3d51c0939481ba2a85a5ee2b1aef0f41c57fa8bd6805d93a51432b969635214a0b58d40da05b5e151f072aaff655bbbe9d067be04ad7d98f9ac75c67b81f18599e6ebb04de3077763b6737e66cf07f7e30a0ae65b0aa709fd21ec722edaf19ed454e28e911ea3c1341fc2a5b98faf635c2e7829ac1e1ba67ab4daed0f0a7ca12b6137f8e15c769cb1f3387c112d150461220b8d5ae042623f65b8178951252702dcb309012866cd5e45fc71dcbb3e8f1b8b4a5e1e206ec5fa64e67067effbb178cc3a48ae3714d89cace743b52ff8261b65fc11fa41245e81d015d122a90b2f49e13edff84a9d8aa8e485407d2f549abdb2f0e89dd572f82fc4cc107c388b7e233387d922684700911b6f8c3f47a97c615301912734b30aa26afbb7359a7693d8566835e7ae8db606644bcd344217b1275f1a49ee44f4163e5128b3de703368330bd8eddb57251a5e2c55d122612f2b5ccc1a54e79afc8ec9a77c2d4f97cd49702b64af7ebb3166fbc8bf16c7697b27e055f9de0e088b38bf3e6c9289d1b6443efe2c7b847ebe498200c1211a590047de56bcd049c0221f01d65cf13f96fa2ff9fc249968eee3c148142d1cbd88eab3110662372a0394dcb38b4f3c619c507503a13e34acab0ba7f5b65c6e50bf529977496971bf8158fe1d295703172c60ed310eeaa4df1bedc21c78a7b313e5f7e02dd4089209b1108c508271963534d3b286f33ae696a9d5cc5bd08f38ee8f8c43b68cd874c93793d47244f929cd1b5d11c7c30617b312a909b3dee5dbc071609f8c1502a6d5fae3fc66350b5f02b5772cb844ee81e9266d00c566c6649617fddbce64e038abd2ce3809f3ffd10123835dc92b23ffc87d72014b4289b6c3f8c6655656799c1e61f790092c3b6f9236535fcf79de1e60f40558542e9fcb494ed7afecad29ae6face217898acd856fd655b3e11a9e62dac57922aae18330bc2148377cec68e9bb080bd27352255cc9c175cf55545303e27a2beabd78d36562425ea931852de0bfa764056e254a5b33342a94947c0ed7a56b3de76da4a039c90e4e3f79ec83332ffefa340bb318518afeee850bb6e9cef241c87046867e364ca62a10d6d494c1214fd9a8f11e4b38d0d4d5d6cb7ffb13d1c0122feeeb34810813f342e39a99ecf10d7ed9a028c0a3dba38ec6541e4431b07c66f0f1227b6b001ff6d20fc5846c4634d2668bf8af221c964ff8095f3f11dc064f2153bedeef676561d3758fd5d11e094acc98b6cdb70fb605898adb235305e5c996037284617b8621ad8298b896ea05358949c73581bd0e04b88182f6223fc9a86f57ce476826163d4ce8b272ed3c696295c8328af9f72c9f87c7d894f414c86b90da90f9abb4061729b836b4506876393d55469485561b6722e9cdcd93bcf94084a7561bba6bec62edf568a724ac6ec58b8cbd2011d2c042c22f8d5ac03d0db2ba49e2e9ca8fe5e51f9b927defa019139bcaaf4f714b73c0b3283e5fcc15fea557ae8b7278fe5f43852329958d6aa57bc2c14abf964cb120b640a754cc4123080b4cc60c1158507d10fa40c0a453b2fa9bdd7648334b57d86c796c40e8f8a197c96033c190d95493b467287acfce1ab5cbbf658c35a4ad7e6ebfc6fd59931349efc964b24d25a66cf1bf281523b6ed82b8f3bacc0ae57422fae9086ec088b603b36c1fd789e4373b8d7bb5943eb8a6464434e8feadc1fef3e722cd06e258e977e2fd3779d2a2d473396b58a4e9c9e40d2af6abfafef64eb2ea7dabb13ee3dd88e66e6fe479e5d63825b0eaa6dfa2ebbed05377a35c6f595802999974216c24f35aaad8af5b0ec6086f30e29d118c714c8a640a177cf57b63a41cde54883db70ca7391cb5068864257ef3f57bf5df0c5b16d938b060c31a9bef19b68f1836e9205f7385ba04dee3f979030818ca0da2caab1356d1f3f9e1c5944f09af30587a41f3d2aedd1f9013c16de46626a2a36a2c82975d87b1b052874898377f8007bc0a13b98ecb25312fe8dd1b4c14a2e0f103699395228adb5f6b21de738b1020ad5588562a8fa5783b300743c0759ab6211602f2176fd7d490c864e4e87ddd4a3308394e9db94f409e5b89727b4d66fa35b91567c75efd61a41e0aa805b92064941c737c0894b887a6b39eefbd0f0d5e59e90dcba94b8431b49c977f592edf3f3b41809705964ee6dd3df858469576e9146139d4710bc21b6768e1465aef3f61c13b1ae737e6d38650cb08e5990af338e5683da1623a43936f173437f6e55a3f24879c73832de6d530c5abdd0711e0a1e43b8cc9c1443fcf792c42aa20e5c2af5ba0210c7c417b5766f72b9943d4fef1ee094d1b9abfdb6361b3b55e6c620e9bbad55a6211fd5ce540cac5da516bf0fe783894b8d183fd2436219a238321547703582333b0aae7bd56b12c5d441f8852402de6ac2f7ccba4f0a867c31721b496ab89211139aae7539b96dfc1a3ab15e64a8133e529441a7c859dbca0fee6c79bcf922df57bf0dac624546641234cce9250314d1ed0939545212432894e8d8607f492d599b9a32b41b4aa26a2b386812749ed2802c2dd356c128d03c50dcdf7539d19975c12f387ea533bf4b1a4ca17e27cbf661e3d56f98f5007e24c265feae45a33510f7663ebdfed78f05bff63381b63c2bf2622a0435226085e08c4bddec8a2f420dc9bacf7dd0b53243a376a6d59d5f515e2e03113b77b154f3b816edac4f60e680e1bc7626f5a36d05a5d6c4afc3a4100ed513bf6cb1b41427725740cb9e2c8e6b7e2f861b3f425fa22040fb30c24619caf4d17bfa9b70837db18e9152244c12d5cacfc8d282f9a629fffea1cb47ace3434792e58756bfa7b32ef5d1f733b5dcc95f979526d8445fbd34eb6df99a743b99ef8ee1f60f88ff43e0b8e53280edec6f62093d02593ebc5ac84f1441ff6d808585f5242eb4322c94456fe3efd821ead8dd96ac7c347d2927f5969d02bfa5ba575446a325e69ad34a0309fcb775c2a8a57f6b70786448f2be034ed12bf19e31497b58b24cd6c55de06268c9497ad73e3ad6b7a2b1f5466070017ccec4b17e56e0b1719dd1020bfdd93e4364bd5d3df1d21cb5ef479df7c0fc4213b0da88680cf6884707d1f112f0ba1aac4ea4d5b9d43580dbdbe8c3bd8cb03bdb4774fa15ae09f405a1ea666328a2b25256ddd8af2a92796222cb9b7a008f70fa645ba08eed7511e73bec76d20302aa2973f459fcc8fe60c92235a41d92ffe8485a01fb178f495fbc095c18ff561db2d32af0764a85f47e2dd2c6d44b6c110febdfc47c344c9310b9071dadb708bcf0fc8ed923b46f6e46c66dedb0e3aa0a352d13570a8d7a6c38c4f0711c3a25ec8b9be222c921c35eea671edcb66d0a4e4a07922456ed4fa2b59a0803b40dbabf833201b4e686e8e0dc55ad72ecb210860efd53c9e10900f8d6cf44259695d57b2da43bf1987664934305abf577baa8ccdb3a009e43955f5de7601f203459f6c6c042ef91b56569ec324fe0d799f8b7a340676fb78371030ee8d55dac3c2f22eabb306c55efa57981b53e750810681ea8390975c3f84f163e0d13d169617775ffafd2b5fae3f812d44cf04b93c53842ec3f33ad5bc8dcee14e6988d7ecbc0bc32e6c3368d35f8ee6f32eab1a0186527c61fe6c4dce0e122f556c8f35e65224c453afc29fb1907b4b75d58f37dbecc054af7ea13d22c1c3de95e13f70a5270d6f538ab6037c79960d66e24b1d59354ff1abadc6eb202b7f17c8c7bf10d005ce9526a85106c05c21f9a34fa81d4e8545ee678461c0c105a736705bad3822069e624eea5d8b9bc78ecc52f11c3178129752f82cb2cf008359abf621e4028afe55cd8fd7af11d692c94867726d7ab3e9348019550a4c1f6bdcb96d083c2b6454a8cc39731f7323b61a05fa3158a9eb2fda17e9b8b0d54a6e14b5ac315430bcfcb8589c5a6c1fb13493534bbacfb29f466863f9d3f41b8099bbed0bb9017d9610c4d3e69e708cf42a0834382a22743d727e912bc4eda3f40602265bbdc445bdbf9b272e85a7d90ad049bc20aa8127e88a005013421ccefbae3d6db2067cafad97df8842ecffdb10451cb44ccb55c61f147a33c527dc1beed1a26eba7c4b0fc51319512cce6e6eef61a8ba60bc47fedc2b85535b902d2933906c6a45e5176b259e332a12f47148d5101593a41539ed0bb0994d648838c225e728c4b958725ede089353d55993031cba2ffaff74306fa2d760b36bfc2bc285f95b90e201b3a40f01e4073ebdba480b7bd987165a53c31f366622d4be1f622193f387874150bd5ed92dbbef4713310fe75155e541342b3ecaf96a0cc98430a644440be83bba5fa8f694ea549fe7569ac58462b80f3fe98de09813592fa9d635c5d707e19cd469325778fb61270387f05fe26080f3ec345c25b8062637d18fc7bcaca781378f0c09c0a759e5c3f4b3ccd29131df578a819caa2547b32a11be96e9b979c28b2b8a0cbfeb8e9a963e1ac8ae6005cb334c0b638d639f6cae4024c72d58782d33bfa9b26208e53d25214e47c064c10376c032ca5f8dc527ddfc605024270bbc2e8dbe94eea3d825c4b59138ff441eafc3cdac574f4c6dad7c3629a358943a424136e28139dc268311ba62df593059a06718cdb8af55df13ae1e85bf2d5456426a3f44bf2ff8c7a99b767952d27d670e349a8257e83695a7cde24e1d81f09d180d313c6d934f98b836761986ac57b9e15f19cb8841451ea5130a2713fdd7d692b4cfbb64e5830ba2e3059dabc6af6468cc9448dc9a01dc3e845a3a57a812ce3df0808c8d5450c2701601c2ce15e35ab321a4045a88cb7756578146c389843ed598566d0f212c39a820c85e41b58e590a6cdb5a052afdf183b83f66431b05440e812e06966551447477da330578cf71799ed071103b0dc506d8322e9b7efdc55ddd156e1dbf5569997cef7845aa92ca74f6505795137517b7e9b9abd623b267ab8f32fb72ccbfcd52eecb5e21d0000996c118fe5237cb537755167d2fe4f8de03b7a7f195476df9f70219bb01deec76d012513ed3aa76100db304b490464780421d6d0d5e93b2c768bf2f2c73a0f51ca91933bcb19fbee2ebdfa28a35d87146579708be70d5dcb1b3bd609dca59f99c4ad78a52d919e877a5aa0cd40c24a3ffa7a626e9c1fa28c0cdc2bd19ac2ddf63436d88cadf275cb3cc5f0940850410fe1a419df05f9cd9a7755c838b663e46848f95c8cb69fa899a4374d2d6095323390b0a10ad3210155d0483a1d2c3eb52f25018bd93f42cd1c0b1e09d374c60236ac41a3b2ff06d6051c1d178ccb095237018fea68bdb582c1dfe64aabe4e34e9054dbe9be5cc66afdce4f8c0f7da2d242d91be927a8805a17eacedce1df4f046c447f338002bff5bc512ee4ff8b70f6e2e6d7728ee7691c7c3dd42dc8ff5918f25479d1d6ac0bcf10442efd9ae6f431e379859e1738c3efcf06df7d299cc3298ca9e314d4197882ce633047e0a392882a82ec4319c1d324ff835ae49ff5e87fd8cd05d1df6458b3a531c140e51e9c26c50f03af45a758230ae00fc0e774cc97c5e48c1ace58cfc76d95ff0bf1c42f50fa68ae533def2aa88b6231d1945adafc15d0a7e8312cfda578ef95c55ab6de820d6c4f9dc21b19c64f29e0c9626c7e868cda0d8f1e43fd8e2277c8eb58a968ca612badf5901e3cd1adf282e91794b62a3181b865da9c0995860faf18e42cf0b8bfcdd0414ab5fea0222625f3ff86018842cc7df8859b512ea33f13c4280dd7a4e3c5e91f015cbac01a0c7094943ea08f92ffde6922a35cb8ea0d8f2bc09fbc583b6ccce1fd02b8aaf1f782487ac94f1c6290e1e2e373232c108b3a70bdedff652a1af36e85c983e1f69617f232026013588a1b3abb94667843c5f411ddce012dc6e2acdcc03aec0d641cd5dd1ffe7ead82a5367f94e3b7f5d7dc1f6ea5ceb424510a9cc963fea99d825079def1d917f0b14dee4aa790d001ec770e29b9588dbf8ab018a0b8e47e5134ee9371729764340b756ded670aa48941fddb13caf75503e9053a44f3238c5d6ad25a7cc03159bf288f0af4a2c4e6b7e19c0e713c338d77e5f68f5af34e14ea471134234ee8070aedf07212ee03cccdcf1ea304781acaed646b56eec54797fd2e3bad3c8cb24c5e3e88c365580ad3b61e45ac91c3eabe6db476962ad4b81d22d6900369112a2b14d0d5afb819ee86e64e94d68464c9be7bf45b4bb3998efdd8b150d23224dcfd9406144cfe1a63a43d38cc56593d24d625d6733a408f8a751cdd99c533339285676f9c74023aaf9b062b529f3cfb9164701839cec11be5cc05aef6d030300d2ea56af2feebc0ebc759089baa6b8d51b92f1daeb899a02a008c16fb1e94bd334041f5924d91ffaf3c98dd974c5398b5c2a61eb29501826c66e1e97dbfbb6bd1272fcbef63e85abd2e74090e578ed6688b26cc2b335ae732370cc54fcaf4f05efd3d1a893f984efa9d35cc527bbbd4e8d5190c1a8989c18d3ad9f37ebd9b78372c7e09a50af350855ec506cc46b19b2d63fdc15e3fb1dcbe96f2e5bd985fffbc0e18687c547d647d949357ae2e41892cbfb552d0155c464edf18ed9c6d120acbef1d65d91e1a1cbaaeaeed8b4fc330d5d766c9b806b5fbe6e50590602c4c63654440f52a984c740a2939877c81fc6f5dc71d998c6e69b62f4c5ac4288f59e3206395c5a73da6e9b82b17c6b1f597adb1d5b42bf4d9b750fe5ade290d4eb1830047991241b135223e3a890a0f26ff406a7a884926537344f967f34bf033b6cfd9ccdd11c16eb815843f6645f45480a32f2af605703922703a049cc7187bb9ff2eb8c233d9cbd8a6275f601e494f336887cd1ecf2b235b8dee599e1855b99cb1eb96c25072fcb6c2b94aa8587d42adc57979c9e0e4c59a208ee53e81e47c7172bbaf96d9b459da6cbb45f309460a5dad4ffb06c250c72c8b5097d5068a9124c0c240a067801fbfc755c6c051587903093c588bfe17bded6ea0400407eb46bfb2fa5fe224a8a35fc68ab220d57bd3bec2b5ce672468250fdecc68592475b1e088e757f8c880435b43229b7c7dce30e9b43d193fc6ab9b749a6996ea224473a711b707bc87dab32cde1c115ba6d52bfffdfaf8600ee9ad8c10b8ce21b5790544ca8ecfac0b48113cacde5f9c17293d8a42103194c66e4b5db60c4f460a381b62b6cda1762abf16078b25f4295a6609eb5c3d282c342cbee1733f67165874ea3169e54b85132feda673f7e8602ce1558c0ee3802281072ed842cc1591972344c4eb68f37ceff0cae6b4c9ae88b3a28ae62e09ec440db3bf56c6196527c43c62c4fb3cac7014483eb443e8c21ecb9d974f705c8315fcb109c26d97f697b2746510150cd5b1e3fd11ec866fba25cda68c68e36a86e8686da50dd49f7b4adf04079700428302b1e28b9371393a038d30ca971b9b586dc2e068b71bbe859eb83c2c11ea1b42610b53c8f17f60161473facb44217382deb8d2b5e80336ddd23ab0cfe1067695dc0560847e7d5924f9fb236568874ee3a1f35c9540051d1c6d83ba343290a0a849ff0625d3d3e800139e967d1ef4bc81a6724d098755275aa7e5455129ef928a79c757f3c106fbb004bcfa31862dc2f9cb09667136670ee1c74c167aa58619c27af54781efbe4868bd14e13951ce53cb273f9e596f3d7a4bb116b5ee695124682bb86d47735a123a5f6e927c8ba237395d9290c17471b60b3d426c922e69329c1b433e11508341585a21ee073a5a9960749e906e4658e54b9ce52512d4ff9dea6f821f53bc26d06f325105ce66be1e2a517385596792418b4799489b70045658b193c8c67687007141c797e574929267fa1e8b0349c3157c9975cc800ccc93d3ce2b0638284647844023c07c7c1a36983d86a5963c4985a4c59b72fabb3deedc0b44b6b38b25512d28ec3466686a0bdabf7bc1f8bc71893689db6ae45218eb7e882975b4486d039ce6222059b19b00f00df45227b11b41ccc3759daaf8fc04b025c423d09e32d6422044216700bf1ee70b3cb04030fb91f5cf3211a32f54c684943a4f52cccedc7db594351bed112bb0c3bc10f676d4214781b69dc90b43b13846eb4aa27a741973bf6bd7092d5327a2250af53f675f95e1a186e5300479b1f5c50376ecdba9ff64830791aff752884edb3f0cde3eaeca6c4fdd63f993d0de5f720c6211346dab8102c66ef6bdc671884a5725865654e7572ac229515c0d878ff3ebb77649f8745b013b8c41cdb1bd9ddd5f7fb4ef3d46c61465f7b6dba9ee9f59ac8367e075ff461382d5cfeea5f01dc49f5c94cd33bd8d5481a3d222c41037909a4045672d2d6a32193285dea9c682d6f6146bab712d4585d09fafe89dd51ae15871e8db91281e7696d3279a3885962fb2ce9057aaf30cba67cefe98e9016f469708b4812ad8ce12dff11f0f0efa87fc766fa3aa74cdb7e3f36cde5cedd8ed52aa9943a506f1592a33383cd01c4269043a5e9fd2fbb25b9cad372e8c270927ece0cd4a993496b52bc15def815056a715761af802418ca1721679035e829891c93caa25e3b89c76633dcaa1c06807293a8799db11703b98f5ed3cd8260891722e9ad374d146b199314e1557f542be71622ca6fc265d6be79ee4014f4292c127150b18e0954eaa1dd280cfe34c7505b09fe459b1273fad211a08c124d9e722e24365b7a9091aa54c2a6962cad1acd715670b2ef632c81617b24be74a321b98e81349e0cfa6ccb90d4faa7aaf1115b893d52765e41ab48b3861a5caa8bc9c8113028c2d9dbd67465193646e4d2318af00fdf41cb1e8c9024a931cd46d7ef972574451b23abd1497bcee760ca222ae561cdcb527adfa7e8857def162893d9d118855587a0a80b824a6ffc38751189fc013427b236824492e5767e29ff3b448872c981c40e3fc65551388dc0f6f205dd31f080486ad0cc3c05dbd9c28465d3590c2b7af7444e3a886aaf410dba9e57813f727741a0d87adc544bf1e48c38445541581ff3ff3bc1e5ddfd89be5c0ce55500d247d245ba55c0020acc238af5298254eb0c90d62dcfd576f9f01202b50fe069d4bd22b8f6bc9f6a43962360d57f2dbc2d15dc316a58519b91a2f5ef5ce5875681010437b77c7513b840c251528e922acfc2dc3362a661b312f3d502b2660e2e8f838c5a278802bb169c8a92ae1c3b55bae9976911d4c11180241418b041b256ab24869a1b19cd6c585c3d7de91a36fe0962057270c2551747a2cc87d2243a2711ce5f99978aca528a43b68669a6ae8d154b08f1b5455856830b824be0d46b0362625e3a36580c41859ae0e310e2853acb5d1596eb6442c900a75cfdb289115c27e2dce1de1c41c5eaa05a38bf9425054066d32896c0f21295915ee18d152348544540b738a6263085980dd44c1d8529ed335a9824782ec124e92991d40055d308ce4c32bfdf4669b2e13a98b9180c6b15748ae215bc723d785b6845bf93aa54f9094aaec27be4fe0040eb3d0848b9528214f1d10f9eafcd08f69e05d209bb2a51820351695ca4d4d9787351ea1de14b3cb9e17344fdd50893e95479777a5ce285b7c0998c8c0216c3c131f453be0695fb3dc11f6bdc04cf6516969a682473d48e7e617ad2f82f289ba9b51168e9dfccca53e49c52e86c6ea1e0605d89df3d053234c2421d37fc51e0479e37bde9e4291908bd787b379a3af24054f5de3796ddf4d5bba1e81bd0d98c242843e0d44ae941718d9871139ea6a9a19495bb8e0193ad789a7e869a53bf11a0be9492fdf68b3e567d2828519ffa88d2e5fea8991ddce62241bc8e378e9ef06ba362618be76160e1d319e6dcdd624065a16a0691a24da9db9625ccbb31bee2ccd4cc66954f187d5c42be6067506b0c31adacb94f1d57b809f5b186afbdbdcd55d295d07f5008120cdbb066e3ff7db780fc580df986308eda5c8b4bf2a7c76d920343d5d4ef68e068122506830892fe8b9e5b896985b5ca3d44f8243050705436206ee8bddb5c4e7e18ffb85422114d22305d2862cef16bac976cf182e8b65347bf0a22512be737c9991fdebeb268bd7553938e3947d048e9579754ed770a616f20fd8aed9968d44644f5f80c7630e14c2cb8ab9e0bf8ad3be2025b7dd41a38c9a75dd7c9a47f6c3db092e0ffdd4ec6fb9782794c80bad133483913ba6b1a2e1901b079b1fef26de2274e76d70b0cb9a40a7578a797b9935c4d0da8d22fe9ea433df621f71cf5cca57b707e849d7bab65b5dd2f5e6f3e62ac102964c847105d38b3a28b62acf4537cec644256f5be1fdaa8bc0b0332192cb3ddd6756400ec5bf8642908a4b7235cad02d9886076efc75b1f2c57198163df8e6233dfa3ae366e23c2e0755784fc37e2380390688ef04fa43c6f2b4aa6af8a2d5721d3679c5c1541324d8b81a7e55c31d8535ae2c987a87e76487a4d2acff5bb13b5ba5e8378cde1ea04b8a190938a269a783cb93f6cb6961974ccea13caf183f735f03d281f9495853de3681d59a3931bca699c7b24d5d33be6d9f7aa3a814f73046158c2d34c569fba8c554a5d5f9b2ddb1016e692ca9de545f6a56b0c2a80f3af0202bb23fab202b168f2b60b955fa673e35ca870be3cf401365edb7e9b997eaef3504db7b0432f398e7f9e4f3539834dc03c9a7a2eedffb6e3a247ebc1815695f6e7e7be6cbf3e1d6b3f71a49caeac1ce79c96d06f577dc25c9bce82d1de5797e9381b1be43a2cd4e187a0d471e41bf1bd46a06f303b922b86f99ee4e2671f0ba13e8ab22f6b8297108cf2b9aad3ddcf2c7312d0e9e9f73f6e9c93d7d65570f900a0c09aa5d39ac4e49dbb96f5e3e6e9034ed56de842286377afec37a03e06caf17e929a6ebd006e03136ed6c39d4d1de60458d755e1eefeadc52d8f5848406b6e1006a6069b018aa1d73a5b711fcad3d1de8e66a456b5ed79a5fb2295eb9050282b1326e12e3e850d00b9c0e0190924fcb21219b9f76f60479be7d37ffd70e862416956778aa17cc15da6d23fc868780c3a2c62fef855513abd26622075881b7638809112765afc70d00c756433a4757236cfbc847d836bd68f21275e477c750a0abbcabd6e299f90c119a8c00b21589ef4608ae5083919340a98ecb0fca6999113c8a9834c9ecc0501f44d4b906228e12e080ba4f815583e6237e533d7bd9cf607bad6e4dea533fc91ca5a9dfc9e1e81e845c6e3a13006f92d5c9cfadda678c14adafd3725f62e02c6ca2436d3cc895c26dad394638727f05b4e200c0be4cc1caec914275e0d7c4aaac9b205476b94175471bde4935359d06ca8ce2cbfe8fd6c192871789f6043525e9e6358b4733c7f5b9edff8b19a92befc35f4ecc9d81cfc6015b0dee77fe6ededde51e07d79f809c80f92592fedbad8812be35d5a81826669bfb70f5a2507185a449d9ab54584cbf023f7d4e5758cd9b0fb7c85a5a72daa6d9f141031d2b345305afe52d1fd48efe759367c6b738027660b0196b6aec74741c71f979fc70702063d1cece8a2acbf17384ec5924a19fe5a56e8bb5bf759fd634348bff52e2175e5d5a763be241724697cbe913ec965bbcdaad6fe4b2a99d46dd9782372f9299ddfb5020f96919180e68954dea30740f523bebe4cb21b362864279d1461de62352b6f8367001a81c6ffbd82ef7de59ccf14c5aa390818380bf0e63053e139b2cb82e118e06bbbb649b3f854d76782a7ab6e0852cdbb90a8693489f240632a5596d27549097a8555d3e7f2b12ee432e8011cf7fb530af854a7701af2f9292d5f327334ac6300b604ff8978a20828efd6f7e46c7c2c6b5c8325a676c43e21bfc5f9d7970d10724736fdddb5c1049a5a44cb62932b2bb944366632a7b8bd455451f2e55c7f51ba2362178d2edf86352d36ab100ccbc1323b2ab53f9f999271427bc81b9abceeb622d95856b22f0b38152aea12fc70d2a61bd9a98a9702e4f1aec7c1f8a7e74f95c3e6d6f1f945c5e9a477c52ec1dcb90fd0d8b1ce3633b5b097efaa93d762263526fcf91951b678f57a03f43d9cb1f67b9b04f2dad6d3e1afe8e826938368e68efa680c4ac10b55832403aefcc96bef3f74808b6f330468d0d11c971ce94246a42f5cb3fd8b8541bf19de5860b1a41d5707e2a16e96406604e10a1d03224227e2caafe598e8433d7eab61abaa5653a51c94f9458cd91c229b26877bdd0ea2c33dfac331977481a288dac4b859de852fecd09901d45e0dc284f0e6565ec7efb545caab9883bdae3fb0aa2cac490f2598a14b37da3a38faf825ef5e664339a244116978ee09c2c242305d8c5b7a26a4c8d3028ae135e0c04b7c1e6d9db6382d4811c366c93815804be69823ec9f3ca3ce93708f3772ff09a1ba379fcd72cdc1fef54608f1565aabf527d52dc77ac26a8efdb30990f0b7e7ae145c2aa9f6b82810aa32d9a9ee754a97e53e4cfa1aca8ce4265cf6eb49e924320d6b3032ce93cf1ad1a59c7bee7e5ca2098951cad04a182f147c7055714ad04a9b30f694a604705736efed2c242134a0562fe85bdc882677838b027e4ef37e4954a00fbe4ab91f036b1031e8ad6d19a47ec7c4d3b3335f62f1decb4dcb12172df95a25fc194ef63c0eb9c5528b5a28b480b0ca30de85940b30a89c201334c94a199ddee544cfb4c98ccd9d809f0d61106d616f3aed25ae1da765e789135c9c12c12991764e6f54407c33453b3a2698eb9b6c7bf752ec67df8f35767a380084ac31c574212a665f99345ccd626c7b000007fe189c947fd38f35cff265c20b90d4e36097bc908c75bd36c3d6709e012c4c253bc6067b766ae63b2e0633940099d79753e96802a3ef892ffe5c2093a6198170aff5b139bc60f49ad4066bb78fb6a84e667c855a42e39ab19b83d498a682f499a8d9a4c72db82ae8c81d9522f07c75d79d0627cfbc9c7826d5a0b9e0bedc138911969f06f1b52823eeef220cd9fcb3511b0eb16b5535158a10d19db3fc7d84f4837a0a68995af682a82bd8a95398850ad9553c3b6b3aba3bcd2546eb32ee6c8408b2dbf1d9489cbe90d314ef60cb3f9ae8d647c0fa72d5c1de933f5a1c00826f2ff421dca05ab8e60c24014af0702300d1005f15256bd78589aacfaa860858ed980db4c82e98a08d4b3a5dbbdd930e5774830b14dfe93430db070b15b1ee23db06bdaa8efc0ae1a0fd972e6cdb7bed5e412d207a8fcbf9172aafb511874c593cc0c12ea3750dd654e749824ad2592d6b056c664ca08625e16f6c51c48646fe1efb04552a7acf25ead9fdfcb3067a9c86d2cf70fb6ddcde6e1fa3dfafeb67daed5485f12151e50454c53f6714d7e747f2fd97329b975176cb9c26536516c7bafb0bf65d61472c4ffe76eb0943db3ff2bc033bc850a0d8978b25bc13e56b3018a3eb0816cf76216bb1ef3721aeb5f5bae3f26faa0db9e9eb351808bea2f392bf34a458b8e51bc37ef4d5b1bb2f64efcab075ac4761e1d6f1d3308626a668d9d0721fb6693d49b58acbf236d86760d328d4662e0d4f3884f99d36a9224e0d4d50e20cc0dedecb90b533832cc8b9486210f23b7b9bf21770cf3e6d379a44473b3bc6f44b3a131d482991c112c3ce209c79cea16daa8d90e89af5b38c01e6edf7266f9d765e8f7552943816e318d826009a8fe235da9249bac73d68cc39e25b04818162db27bf8c884446d98bbbb10164f1860acaa93291bff7e5c52584e7d199fbdca69f0d33788b7d66c5e3dcd9d2716ba01cf8c8755874de817183c40a3a6ad61917df857e82e3164ee3df1b53120b37471d05cb441ce0dc2eb2942443c5c46c0385a5267955b4468fd4ad99f47f25c5d111ca30260d65fbff2bb3179f78e090547bb0b271f9c30e470cb92f8eee46934a53a2ed828a0ad9e23fdd1424b5ed3772b5386860c2fb50700d3b26b461f7d88b377c25aa0b45d3eb34c5d0710ac9f2c64f7fbf5ef9ff365be78174868116bb665784b68d2075ba4e5bdd3980edc83eed76b0a1739b96d8c8ca76ad9e3b53be8f57bf4183f68aa9e0c3536be86568e33a1da54530e3860a1005ba125a1f4520c2e315496be792e364fdccbcd0a1772bc3ca96c6535595056b310acaca0b8d84e64ce9b34095fd1f99872c91305e46d84a199027136341ba8509674e3a09ed7f03fa50e147db3deb8d2ee5ca283faf5ee6e659683baa5c83078dc89ef5538a6aec35261127c2512ceb63585b56da3c73671f00fa157c8e7fbdb5c29158f04e42e22b039f635b34f2a138087709ceb93f8bee7e0d8ed87e52ad0030f44825353ff472e652318ec51901119d0b88f236889dae1f6eafb259884e277144f1d162e3feee320504ca7d779d49e59b747e22791968769fddab11a489016545f3138ea2f2de91a0fb17bd856cb48de4965035874ba08a4625e65240fb4ae593d38955d462c77d824acec46950f765c2adcf94277fb1cabebc486d7a39e3cb35a5278cb2b699111348e52c3517b5a47ecadd072c1fe4db1dd652f80f3f11420e942c447be76fdc983f347f8b42a356c0d4929f4c13b1c3fdce8ea1ccd0dd7b074aead4c84a037b1c03928329f1faeb793c24df782f8ddb42dc87c76b4d98d48c94e9d94199a2fc89ffd8cfdb990178ded85af6f5d26d6b426d8786c078f51eae134df006f05e53356ee2d97369022508c7ada00ac386ca3917e91161bf6195280044624330634bb12781186d60f8fd0434e5a0a128bf6f2a47c89c497c378558e6edf6d641220c39c7adfccf853bc4ec53f7c1c264f84b0c40a4c93e7f96130054424af2ef90e2844a96f398a5dceafeb128ba6c8277e90d0d259a8c1f3aad38f7f88c5a21562d142e2c2031a88a4d5554e8bb36e203db08f49700a9e2add63910fabefaf96f95466b870388ad14fea54610652437a90ec191712e6a9d2634d6870a74d6c4d16c6f0978dd401b83bdd165d680027561162f8808d3ced7d20013943d80916b1eba9e3949e7244984c092bcf30f96fc31954520deff9c4a92550fab91d448e318a793483693c40f45fd6675cde466f1794345289149a36b9f67a41f81cbd0bcb3b43126f786ce6bc404d263be085e73d627c68d08b5571739aacf6a0494637e57d0ed7308574e121ab5bb3bf69fab28fdc3957f276b4644b9891221388822e6aa9a94a89e96a2e7e07c003b86bf976b36b3b18b3714f0427d2d667e1c90d1a6b3c7647b1ac04d4fc089282e9388fb40dfc569151ab26467d5c20f32271dbe3858226e0021e5fa9f2c2238e0b39128cf64dcd2198fb6daba5978d945c49f12f344f1f2207e42821a884ca0525ee2fa3587352895606c6da0d6f20e187fd4b0d771e8edd78a447645218e8b73379afdd7a1a808bd6f774f5192dc041be97cd870f205997de277d55fc9fc6ea2869ffbcd56c918630dbd97b0a2e5199a2aa37ecba3d3ff981147746a67f3d8da0afdf942c44cbe468ebc0774333e1b15429fa43c059a0b82b6974fd80488c48a8ec6e3ddf3906f78d5f4db55dd12f568c4309515d8da0205640d7f478df5aca1fadc8b6f3f15914a27e03906152e3515a58367a4296c1558752728c4c883f15d593c3ff367ff4f6adbe366251f3fee6dd3e0066f5a334f634d2a7951887641c62feb7b73fb96b14eb0518b00ed8e13dad1261dca810e5655cf23a2ddc442aa34adbff451d8269e7aef291b5ac0f1a99a9d927ab2e66a36a543f38c04770b6be56423c20b68c6191e6a94811d33174a7134bc37e532f7b480faf96dd6297174e74e86db574e1782d93be13dc8cd948a2db27aae88054dd9ca0d33c28f3adc8d9b7c2ebba797aa27ebcfa1906ddf6021f1263e04ff40b775fdc2b0d3d9b963d0476bc2a14f007d04e6032f61a7f385e10cdf9f6616c4e1fdaf3248932da316412d9cb606021b04d9d978ef45b3116c2616bd818327350893136373ba5d44c800089d49c4ff211fd9bb397ad11afc884c25cdfde4e5573de5a1daca66b9d118466d07e93d4041c8495c15091dfbcdd8b7a620ad17b7d8aec8aa6b5950a75b20d0d4941e237d0f07b9aa5819ea4f96c00739e7b0d5cbfcfad230cf20dda08765a4ec61d9876dce6390cfc1dc4a5750ee015f141636c5502caab7adb96fd741f427dc754a81f16c23459dbb54a6dd73f99ce1542cff0274079bf47fac350bf1fa0ea7dd96ea8691b498e90e6d3a07d1256541d0411970344552eaaf53968858487670e2bc83b33c109e6c0e09f3a4c40f0bc2906389bbde9eabc993f9a8e887ba2b8e0c0f2aadce5365b8712437d598f3f4cc0221e7dcf44f95bd5131c0a5264f9abc8373c17ef5f8a78a808f9f9ab5bc06fd81ccd7c83af41ed7791eda82a2b887efd600f09e089fcb9837bed32821bb49473e708c4213ebd624105364f7994501938fb2f6721e387de8ec02555c3d3651483a73bd27f405e720de08367c22ff58f290eaed2f79041ea506043696b00879b748b226bc0e430008fc907e62cba6cb606907e2cc071d7a7bc84104e601b5baf4576af97ce34dafbcb4da3fba4c323a2df3fb2d54adccf33083cab781e8d49c145b39c2eaeb5842a8f13a9a97092e4c6e1930f9c7641c81c43c1964c0b7388dfdfc070b5210e9df09b0371a5ce424490e901c3369bc176cc34d5113575bfc594ea807c08e0f12f10d06e403e93d086eeea96dd3ef286df35df0db8ac0bf15800cec5254d64d8c388aa05de92f9bed3ffad0da9214dee8613d5a0394f4579323b97e0831e91bb7b97a2ab2d15ea26aa81061b6b2b1f1b1fd46aa9d37f1a29e534654c073e000bfee20960028e55597947cb44c5b1cc5e06dbff6bdb9a61d46e89edc67e418b3683c9af7a196f63682b0229d32ea47c26c4ad925c8722fca2c3ffaa4f46a5f7308231de1f3d2d3c0b0e58b86d2567acb0f1ff7933ffc51a82ef63d88ee7e94e47a8ac5e669aa1f286e2fa51e628a0a49f769849da4817b66aec14079e5f2f152f342dfff90a57bece1766c18e3aa1f629e893b47cadb4d30c7988430bf9724fb1d2f9fdce4a617d8d8c6389d8ef26cad32ca561b125cb1f80741cce2bff06c4ba6b8011613f47c852b6623987e1db1e3ae5fcb38a983f3fae6508add6dbf3961a15e2f2fddbc1ef2eee3edefbf1c933a6722fb3a00a29b8ef20c509c517a1a5790e6e988a0a295d1240ef89024f8bbfaa4785ef6b4112a6b8c8699bda136a36c7c6f653b544e67ac2fe924452b31f475ca670a66d2c4f4e529b355a61c0681bbd4117225b215e8fa9baa0dbc51e9814eaea591db449f1989af792381c147174f7721897aed69f791593e0efcbfc2e8a27975b2e03fb2cf657d599281db7f4dc677d87dd0d084011f722d74d62ca53955a453a6b849b6a7315f82767b304ca5e6699bfd534b1a3ef7bb2549384fdb6c6f2502f944ce0adc2c5d661a6e1fc477125ccfbfdfbe12d4b299de8d60376b05bedf078fc1569dc5118647cc77d27a689050c30b4b82e13f221d49f4f09640a787f99ff0c8d0d2e6e66c7c19c824acad91f658c1254c393c6ef6fff967fee48cc3f1fd577e6db7c932e4ad20ee289d6c087c80890a5b68c361797e070476133dad07c15f20809b3345b49b9a33634646c44700648a258a7702faa1afa8d4ffe2175d0cf46105ae2e5f36b6bcfdef554af538a706892d4c95fe1b4be10d8ba41f5c6d4db24ed9e25b4112eed19f6604e3b60e69552f17f0e3a9be7c8645cdc484413b36d203f2415fa331cf0aa06a2bf94008bdac84245ba9eb9e074ac0b162640e566e77f1122582774625f657f2178f751b03fe1328fb012929696bbe876cb4c76d5659adfefa01caebd1f56b4c449113859a83e38ecea5f9cbc37d64faba61dbe74ec09248638816e351620d74a21e4d431bad2265523022a484f89b80837f3ae421e0f24aeaab5697392aa0627954d8486ccd3095a7d9ea484cc876a5db5fe8570c5e3e3946bbdef66ca84a7d0029b164b96fc62ff6dbcdfd7d46bf3b8ec7641fdceaae2bc9f9f93e17988b26d11253b3ab476120b397277b4957647d7f936220fed27ee8da39a0070cbe25ef99d6e24f7abbc1a740cc22dd3751084ec3ea28746acaafa4983daaa7c2f5acfae2edfef46408119aa37965a2eacf9fcc374e721420fa0ec64602f34063809381506b14a5ca69375d69c7c32ad1f0647384d953510847902b685e718407591342f1498bbc27b0756532bd9f76efd1a7594e0dc8c53ac201df9da68a9997e3410a700f2d0e243796c55e0fe13c0ee0f1acbf03575693eb107f28814c01d2446496839f02b35c2c9c03d35ed7eb72a1424d002482163bb3b61a57a215a0b0618e16d5203762c568a67bdd3bf9f5f3d0924970e8e5ad6b01c3f0f5dd0338fb45b6ee629dcb9f2f923390d4028e7cc80585f433f965846fbaba5d7289f224afd962892cd6211d41403b300427f4b2478a7ec320c5ff86ddcf2612b91a1cb2129df213832d8b81da09430007a323715da8c61e1e6320ba8cae0a8943349969effc4b5ef44f185ce7bf224101807959b12a4b57de4ab3eae85def758218c2949721c704489244482b455295533f692f7fbea5ee55dba9ba61018a31942f6051cda30300c8f5a43404be77199d992ac65ab2ddcbeb76932ca86b5966e1c57faf5aa6824910e9e4e06bff17745886bef2aea0f3f7eff77c6f86555e369749b91f81ae22e01b385851e8ea5c1b7494d05e8e626b19f2589a057ba4b7f51bf7206ffbc4d4dc8e75124d3ff43d715eabc414e0c54fdee8150084721978b9de5528fa8595317638b2fb4542826de69d9ce7eb1b767fdd4303d88d3ade431a49c8c77035f4338e6dc9c1f183a7111b3261f0c11a7e2e6fb9dd8305c2fc2df7df5145b4db95ce254f3c854fab277ee9a065628e94bc2bf0aac540cda3b06c58708e6801f28a4e99557094483917509cc7e7a3971f529e0463d3d17c07b595bec09684be758add2195b5b474390e4a44c88d8fd94d40bdc4801078e7fb1cc8927da6268242500991008ae36767d39f31a8e0f8c7d3a5f99d393a5d92bd27736fa6170167279f78268eadc5f7f968d5c043d09e6deec85c5b3710b41fd1a78b6cb6dfce3e55aebfd6809d89e8f8c1a100e3382371b0874059ce10284109b6d3371fb4b3f2598621067b335ef153d0f7d6243e05e63b37388aa728d81e724bef583a288904c9e5e4a1f16dc97ed4da3cfec2db1d329e467f411df3d6d2c63065cb5e2b66e05ddfd427ea0bc50db8c400fc4920c95da644e3e1fdc29f1b43ef8e9655bbe5f49f03eea65c74d654b756dc9c71e1fb9ed6fe4955fc5d43d236402bdaa06cf61d5997352cc1882e29bce92eeaf088511d4818a0d91f577bf6d42d4f173a008c303b70b3439c580f5df0e9a055997192af3cf68618ee6974cb3f7a0a09364b2903bddff42abe6f83ce226d76117fc9f24feef03b2dcef0a65426c3ad567074a25220a8068b13f32b758f79d488cfdb59537137867d6a9a5ce6f3f662b10f0e1ff6fffec2036de9f7f7b665be476503df00ac42eb0b876d4e49db64fe7a1c60ffc58d901b168325a0ace1dc90d6d2a250f808b267f8491fd5139ed30886f8df5cc7f1b672423874e66df23e70fc8ff57540718bd7d260e783ec3e187e762a80a9a8693a12fdecaa6ef9ac3d8b9265faf04b7595013c64c499cdfc1b82f8fa110b38759b7fca6264a39a6eb918f399750f7227139934e6d3edfd6c94bec5b16c8170a2ec72c7bd7b878395e711044f86c4ac7793c20a25e724f605eb8db4185bc914a222bd6a8c7f5b7c4c810a4c6ac6e00bdf218012b4c13736e6dd73829a1ae9068eaed25848390b4bee2342e0c9c602d55b90e745ccfb86c7df1d6a9107e5e652aec6e461098b63b095a51a484ccfc91db1e6840f2be7686ff4c158347bf7a01dfbeebc1740ffcffac63819ff4bd91fe7146c98de7bb38b5e6614676f54f939cdfb610b4d27fc889db5cbf64cf58af2d58d48371e83ca53266467f958f2443fc6ac1064cc8adb0f4499b279b7cf0cdfdb96abd57c378aaca4e41a046ddf957479542bf3ac49c9d5aa43092ddacddf9d37adb066415f092300da867d879965e22d1af205b19afd2c9011b403213c44ec0a0e848aa926dc49dce17143ba7d0a5f4cc48e66b037097a6351437a89dcd17e66e8998b79e3aa1aacbbc9421085cb714b5ecce7b6015bbfcda0ab8c9ee0299c3fce01cea7cb5d5486fbedffa97d8940cfaecf627799a8b22587394c29592166b65f2810eb3b378f5b2ab139d886a66b0c70dba8d46c6b1338636d9a45d38b2f45ff0ba5ae8327bb75123e3097443b5c1b860339a2e88775f641840f46ec2640d5ef494811f2eed041514bfceb995930d47d84fd64eef89048e41d55905469621a66c6e77c1bc73d2b9ed7ac5cb779455f5c721a6748951476f96c638e3f158d05713218672ac6e6c5ffcb33e96dc1f66be860c47314ad0ac5693c955c34177e607ac391ecb6e165f0e152a5be5c4370d66d29961ac1c0d8d1a3991f3f80e052366f0173eb0092a08703c44138e83e2d5e418b0fa5ae3aa57d133e3d23af1f967ef88c5ecfb34915e1ecb54f786884e342f40d5cd84f1df257c64456d7163dae931e55e13ec6e31ab66e9b9ef7d5dff9016e6f207ab4d2dcb037cb24ac4f989a18caa26120a24f7ebff5256eebe5ae519767fc54ba80e97a769461a360c1b0915bf9f0b09e55d2c2b6cc68d1b14da56feb8747e792621a25905c4b1ac0f796af27ac937b14ebde143bb3517669c75267e3e475277060f63a2020c98d9aa71170777769d5f6866968f1dc283f9f20ae41bf84ae7838765840f7e534799d1fe5d8b1d2c5f7a60c674bd73d81c75f3d826e65329635faf30f5d88df3b08dd8be4ca861853335e8ff43a7402608be4b4c6aed35453875a5f7fba373612cc0e77225ab1a5b996305d5690b49a936a970bc85229246e9183d0574541469be4ba8a27294f3e6b6239051a9f0cc2050f3f5a0c8eeb04c55396ffe5a7ecaa440dc11cb0c57aa6cebde19f4d0d153db2d57369319cf05f73323aa363a9cd98596c7dad3c897ec871fad1200927e91cb481546588fd85ba60ccc9fab5268abf2186d079ede84fd2c9e446e688f1c0b2d330cb411ee123b20d01112cb8768849cd832ecc96d72f096df958985c9ce8f86f61c113dca412b045bf6aa5fbf90dca5e640077f93207aa991a0e0e0979389d4fc0bb5536e11a38f26817aba50b10c8c273249ca14e79d4a3a33c26eeafde6cace662c3c6417cf201830054b594c1baf767e762ac574c936442398b69e00bf98b8e23287722284f3080846459da1fec5ec23b688cd9c2e290a81acbf4b4c5aa28c236aa5824a134c393570871f258a187b4c933551a63c6aa856f3c860baeb68e22294f3c58c025d267252d62ebfb71e4884b5711cb02c496f58accaccecc5c8f8c0f1a911f38f1b12a44ed1536df7bf28d1d2c86648b1f1661f5e455b8f199b5f548045bdbae24746d01519348eb7698fb7379a9d66009b009f0adb06a476b9fb2200a33d56ca8ba68bd6e0194be2cf6bd272b4c49417236fadfbaa000784d3d9639fef340a713ac7a7688200645b15f5234297c3446b747340676c755ef702597d89187dfaffdde82b1ffa5958ada07930f716c97be3a7576a5af35490c365b23f1403baa4191873da8c4cd7a9287a7ebb0ef9fe004455b1d764f56c6e714a09b311f4e39744029aa8abe25c00d30be9299a813e52193754e24aac019f80ba6f53709c8c1479ac29bb4afc06f259eaa4110a14f4eb67f803666f323b7358b35ed84ad5d35d8a2b8aec71d0004ccb69580f9f4fd9db4723419519d3ad3249b4d9e6ff86b6dbb0b58a6953893348361e66f8f08667f69f14cf5a4bbd86cfa3509752ac38a7b1324e6a502f2f690e1f130f923d53807de24eaf955dcbae6980ed304037287a19f11afcac78f88b453d675344ddc8a1385f95d3b28a1690dadebd9c4e8c3b8968e6bdf25942cf6e88eeb85f17fbb28b430ac305676582a55f43ecfeb9644c288af0592618285090376da7c47566aabc9acd752793aa81496fd148bccb1fa129fa33bc1783a6bd65becab8b6822e9e958be71f626180effe7a20a1faf1a395e7db33065945f026206a345dbbf37a13cbfac4bfb6e5464afd072d580f28fc0bb411c96537efb50db20415f66836811f391213d801abb25516e77decf33eee78aca20210d1ed681a5f450a373e554893c917f7a35cee39a0afd2975b96cf91564c45b486acef6e2972519d4fdf13f282bdcb98c2c0f39a98f1cdc5149795778bce0f1141dc7e4d3a509dc5b76666ceddaa253eb5bb061f11674773bbb081d29d651773a8c5d9633a489d1f8a3efee7f45b86793193567daa4cacfe2e0d2d279ebac31a2c34be72d581476e4fee11c5a1333c4fe335a0d525c36f9f5b974228b8a1d3afe70a053b020d007d893eb98901323ee4e1673665468465cfa61dd55cf8362210a7b110c0b44d9b71b666435194658aed3be849f6ad2daa355841794e427593f1ddef091de383ef8ad3889eea177515a4545b5e48d038f7fbaba309fd16d4eeb694ab0b4acb9c6bb05d606d3828a57b7ba290b9836531c55d0fdea87387dd5b34e0267de3209ba48f7dc9b675b81fd07b0d6be9708911c17e826a572527bd28a8797215cce8f5753942ad38828d22ce423db8c28ec807cfac55674b83d70d75f5dd7b183b225668c663bc2eeb13339fdb0c4e6547bafa8169548d94644f21ba081a1a97cb49c3b860007b8c788307d29064cef5095062cd27056ecafd03ea13587c845ec1cea2bc9b19ff43d1d55ae363523e936c9fe9cff8e36318dc1e5646d08c82f5a1ab0be34713e5c005807b05f470b8a3ef1e5f4cd70559b5638ce1049f752e2103a37bec599db56494d3819c50481ccb9fa1427c5c3bee091e7567709459b373570cacd6070e46ea22cf266b9e68cde10b8c20c1115de6e13b823bd0108a1e08e7962c67075ca25cc147e2c0ca67a4a29381f8fc39530e3a2db11c2c0b3d33e8f15f64158fea62016ee91b610092b9f6e79ab6134b3c91a100c87d521e8df980acf9a5a54f35f0109428ca36d57470d385a4a11dfde7d6a382e587eb2cc3940c44b7610cc140657a90856065b9b000d0375ec1c8eb36bc57665fe3f9da7067a11309697fb1cb3b30a8e0d70ca87a258ce52bd75967cf7d90430508240740b88580a3e57c29ef29b5065b60ac6d79a53462a86efcf0b0dc574d8315c989893ff10690598a3e767fb88d4a798715f4f1e18169390dcc5bddafccf2fa0352136c724e3b45a93603d4347d81bec16c54af3ad84b44e5f07f7f656ad1838d2d49e4ac7ef129e671ef9a6a3594055b2dca1fa4265515da20b6b88b02164fc8e7d15a716d116409da60d2f2c42aa702954948972a0cf7cdcf3e14903d3e808e3a01ee75b5637008c3fbb6d77b430e63a5b22f851c328155451b092625c486fae5017ca4473bc1fbbc6b2b795d8768fbc59f747db750fc900656919e165c8370c593b1c7d014e893b056d24af9feecc166bcd4a056ba7c4d29330d1b1648de7b39bc85200e74128a3027dca0d0767d439718b5e08752dcd1e3566faae399f706d99aa69bd020c7564fcabc8f4735ef12ef47ff085ddd5ffa0a7c055ac10a7c71e112576f3b627aa12b13f40010dfbe2e5fe98e16f3fcecd8bd57cbb5fad87c25c88835cf4b73ed80a3b1b87e37c5764439fcef2b1627cf5308efb07f5ae9bf0aaf1dcd2a750fd3aee8345b5863718027ca9e4984276ed3b9f061b83c4bbeac178daeef2e2083e50b396530a46054afd601a7ade1fad8b8210949513def13aefdf5b36dfb23b0a237f77db5a9bc295fc6a793ce4f723d404ff03e86c2f706b9f8a804a9d6d93f9c111ff37705ed5b3b29a7364d1d4c39fff15fe187b8f15a9905d5634e423b211ea53413d8ed6f6d3d6540e99a154d32256690d40158ce75b7b538b0a4f0ff2e9e150189bc4306d9a6de848c8c62b1d1e676ee7ca782757536c42aeab7b1686d92eee5100777a187ea034dfc11be9a2272007cc82c03ed6cfe45e85308e15e13e9728dbd8cbf735bab45ad3afbebf8e375c16df854127ca61ee8606aceb531e7da1ee03349f4da773698d5336b377fd5d9028749e61b6b3f4eb0d39a7591d85f3ec3c9d3b3227b167327edf08467d672b8ebe599537d9d24cfc19fa8db2a4bb730417df774154dc6000e18e04ae2197985e01449471707085297987ab33a0c830be4a4d26144003fedd4626274c6da54d3efc5302bd39c59d9ce9118730f788e1a3e0ba6dde68285a48e5596056efa19efade751f716d3ba79a4225647d63d16fbeaa973a8c2da317be42a3da0d00a28422c6b3b066baf0938d940775869ac0a98dee81d9283899a70489f7bfe9a4c64f5fb55fdfe6f701cf098ac3b28b5bf6cbbc54e1eb0d05cbb1b39cc8974b0012f3f262e6649642f745e303fdce2f81898fcdf589ed547ef3b1793488db1bf48a8f39b278399347dacaa520ca5915890e68f8f343c4d650327a38866b0b92a28f96bbea956f8a1326dca33565fec627c1746416e5383178a073d6d0462f5a5add570734224a63f5f9a5da09fe973c0b95fdef8e30c9162d071ebc6bdb33f639b50b8e68db658d417403b9e6673a83f8beec59ccb5df7502b8618e40c8594e182749e052cb752c28ff3318ca8be42496aa08f3909055c11a35bf8437a1a48d8ca3142bb76149f786613d044efcad1bfb942d9c300cc891f22624bf1f07a9d67ee98def5a21275a354aaa4923701f691c194a7ad672fb051323b1bb768748d7ee49239fb9fd5446f546641f6e8c15b87319c995921860090f635d9a0a367d8506ed2cab344f2278de54d1105336f3dcf96c52bb77e63f2e14ad7b28f22f3a8a43b3ee5d23a4aa56f02ea5dc69ece02d9f0aa2ec3c47993977b637aeaeef2564c9972164056414129c3478f6ff7450383492afa977ff17df98570e3a7e554d7d1b2e27d60cb2f613330a9553084dbb8bfaa5292893e64a5f34f1c55d731e4aec1ec07dfcafd94b2de8f84309619d13c9cd60fc265df8e77cb730b276582e1a7512bc2ce483cbda409feb83728e218aa992e758c29de45142a1bc45969918c7c60ec5e198d742b1faf7aa568821df0529ec2913b8951db97bcc20fc4508d27a97bf4b6762b03857670dd1f44cd82b3a7e77a45c16855038cf48f6f31871a2944bd0a2372fa8861a06fb502c1f81100aca9246f15635c41e7f47302a2f6bbfe2b1e3c4e9fd0221ff6f14def9a08b2379ddb40c04f918c11e59320ca614bfcaf5ad2a64e35917c6cd275ef1c894ca7e374ac19e6066ddae9628b3d0a2632535a018548c01979c45b2d8c7a7dd743f2777defde6e8e39ca0bab78ad3a6a1a95399ebe3147f5ec675ea9c595dbee813a57804299763b822ac82c1419e858d44ab22dafa221d8eacacc06953bea2de63571612d11226bdbbcee4a7c73ec26d9a3f15a93f4fa1ef55202282229983ca16b2e404c9a715b4f836d01ed8e7e12</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Array 3:Squares of a Sorted Array</title>
      <link href="/2023/05/14/5-14-array-3%20squares-of-a-sorted-array/"/>
      <url>/2023/05/14/5-14-array-3%20squares-of-a-sorted-array/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#head1">977. 有序数组的平方</a><ul><li><a href="#head2"> NOTE</a></li><li><a href="#head3">c++ solution</a></li><li><a href="#head4">java solution</a></li><li><a href="#head5">improved solution</a></li></ul></li></ul><h1 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a><span id="head1"><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/description/">977. 有序数组的平方</a></span></h1><p><img src="/2023/05/14/5-14-array-3%20squares-of-a-sorted-array/img.png" alt="977"></p><h2 id="NOTE"><a href="#NOTE" class="headerlink" title=" NOTE"></a><span id="head2"> NOTE</span></h2><p>原本自己读完题想着要先挨个平方完，然后快排（没错本人就是这么垃圾:sob:）这样的话，是复杂度是O(n+nlogn)，<br>绝对超过了O(n)。之后看到了提示说用双指针，就恍然大悟：①遍历数组找到正负分界点②从这个点向两端依次确定<br>最小值，直到有一侧达到尽头③处理剩下的数组。写完之后，发现卡哥的思路：从数组两端向中间聚拢，以此确定最大值，<br>这样省了找分界点和处理剩下元素的时间，respect！！</p><h2 id="c-solution"><a href="#c-solution" class="headerlink" title="c++ solution"></a><span id="head3">c++ solution</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(nums.size())</span></span>;</span><br><span class="line">        <span class="type">int</span> FLAG=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(nums[r]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">if</span>(r&gt;=nums.<span class="built_in">size</span>())<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l=r<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;<span class="number">0</span>||r&gt;=nums.<span class="built_in">size</span>())FLAG=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(FLAG&amp;&amp;idx&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l]*(<span class="number">-1</span>)&lt;nums[r])&#123;</span><br><span class="line">                ans[idx]=nums[l]*nums[l];</span><br><span class="line">                l--;</span><br><span class="line">                <span class="keyword">if</span>(l&lt;<span class="number">0</span>)FLAG=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[idx]=nums[r]*nums[r];</span><br><span class="line">                r++;</span><br><span class="line">                <span class="keyword">if</span>(r&gt;=nums.<span class="built_in">size</span>())FLAG=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(FLAG==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;<span class="number">0</span>)&#123;<span class="comment">//剩下右边</span></span><br><span class="line">                <span class="keyword">while</span>(idx&lt;nums.<span class="built_in">size</span>()&amp;&amp;r&lt;nums.<span class="built_in">size</span>())&#123;</span><br><span class="line">                    ans[idx]=nums[r]*nums[r];</span><br><span class="line">                    idx++;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">while</span>(idx&lt;nums.<span class="built_in">size</span>()&amp;&amp;l&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    ans[idx]=nums[l]*nums[l];</span><br><span class="line">                    idx++;</span><br><span class="line">                    l--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="java-solution"><a href="#java-solution" class="headerlink" title="java solution"></a><span id="head4">java solution</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sortedSquares(<span class="type">int</span>[] nums) &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len=nums.length;</span><br><span class="line">        <span class="type">int</span>[]ans=<span class="keyword">new</span> <span class="title class_">int</span>[len];</span><br><span class="line">        <span class="type">int</span> FLAG=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> r=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(nums[r]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            r++;</span><br><span class="line">            <span class="keyword">if</span>(r&gt;=len)&#123;</span><br><span class="line">                FLAG=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l=r-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;<span class="number">0</span>) FLAG=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> idx=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(FLAG==<span class="number">1</span>&amp;&amp;idx&lt;len)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(nums[l]*(-<span class="number">1</span>)&lt;nums[r])&#123;</span><br><span class="line">                ans[idx]=nums[l]*nums[l];</span><br><span class="line">                l--;</span><br><span class="line">                <span class="keyword">if</span>(l&lt;<span class="number">0</span>)FLAG=<span class="number">0</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[idx]=nums[r]*nums[r];</span><br><span class="line">                r++;</span><br><span class="line">                <span class="keyword">if</span>(r&gt;=len)FLAG=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            idx++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(FLAG==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(l&lt;<span class="number">0</span>)&#123;<span class="comment">//只剩右边</span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(idx&lt;len&amp;&amp;r&lt;len)&#123;</span><br><span class="line">                    ans[idx]=nums[r]*nums[r];</span><br><span class="line">                    idx++;</span><br><span class="line">                    r++;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(idx&lt;len&amp;&amp;l&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">                    ans[idx]=nums[l]*nums[l];</span><br><span class="line">                    idx++;</span><br><span class="line">                    l--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="improved-solution"><a href="#improved-solution" class="headerlink" title="improved solution"></a><span id="head5">improved solution</span></h2><p>显然代码短了很多</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span>&#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">ans</span>(len);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> r=len<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> idx=len<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(idx&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[l]*nums[l]&gt;nums[r]*nums[r])&#123;</span><br><span class="line">                ans[idx]=nums[l]*nums[l];</span><br><span class="line">                l++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans[idx]=nums[r]*nums[r];</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            idx--;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm training </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>5/13随笔</title>
      <link href="/2023/05/13/5-13%E9%9A%8F%E7%AC%94/"/>
      <url>/2023/05/13/5-13%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="8ed0d088ca926d62d20355582e2a01b147684221279f9fabb1fbddb0ae0dc679">34a23409a6334b365ea8ba791c6a22f1fbe435e06a82d257dfd25a22f105abc727735ef8a35cdcd092e5cca5ed12698723db5600326fcbba6af4251edd8fa2cf7d7c5b3fc383c40ebd251b3755314a6efaff79dc40d9538dd9776b7c737d0eee4c3d9715c0aa439d486a5f172dc09f407b2458b2b1aed7cd66f1387fd794143c1fd7722e044f4033ea8e0bd51cf6c9218d383f7677d08a20e0a1cdfd59c70044</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> diary </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Array 2:Remove Element</title>
      <link href="/2023/05/11/5-11-array-2%20remove-element/"/>
      <url>/2023/05/11/5-11-array-2%20remove-element/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#head1"><strong>27. 移除元素</strong></a><ul><li><a href="#head2">C++ solution</a></li><li><a href="#head3">Java solution</a></li></ul></li><li><a href="#head4"><strong>26. 删除有序数组中的重复项</strong></a><ul><li><a href="#head5">C++ solution</a></li><li><a href="#head6">Java solution</a></li></ul></li></ul><h1 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a><span id="head1"><a href="https://leetcode.cn/problems/remove-element/"><strong>27. 移除元素</strong></a></span></h1><p><img src="/2023/05/11/5-11-array-2%20remove-element/1.png" alt="27"></p><h2 id="C-solution"><a href="#C-solution" class="headerlink" title="C++ solution"></a><span id="head2">C++ solution</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="type">int</span> cur_index =<span class="number">0</span>;</span><br><span class="line">       <span class="type">int</span> length=nums.<span class="built_in">size</span>();</span><br><span class="line">       <span class="type">int</span> last_index=length<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(length==<span class="number">1</span>&amp;&amp;nums[<span class="number">0</span>]==val)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">while</span>(cur_index&lt;length)&#123;</span><br><span class="line">           <span class="keyword">if</span>(nums[cur_index]==val)&#123;</span><br><span class="line">               <span class="keyword">while</span>(nums[last_index]==val)&#123;</span><br><span class="line">                   length--;</span><br><span class="line">                   <span class="keyword">if</span>(length==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    last_index=length<span class="number">-1</span>;</span><br><span class="line">                    </span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(cur_index&lt;last_index)&#123;</span><br><span class="line">                    <span class="type">int</span> t=nums[last_index];</span><br><span class="line">                    nums[last_index]=nums[cur_index];</span><br><span class="line">                    nums[cur_index]=t;</span><br><span class="line">               &#125;</span><br><span class="line">               </span><br><span class="line">           &#125;</span><br><span class="line">           cur_index++;</span><br><span class="line">       &#125;</span><br><span class="line">         </span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Java-solution"><a href="#Java-solution" class="headerlink" title="Java solution"></a><span id="head3">Java solution</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeElement</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">      <span class="type">int</span> length=nums.length;</span><br><span class="line">      <span class="type">int</span> last=length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(length==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">while</span>(cur&lt;length)&#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(nums[cur]==val)&#123;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">while</span>(nums[last]==val)&#123;</span><br><span class="line">                    length--;</span><br><span class="line">                    <span class="keyword">if</span>(length==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                    last=length-<span class="number">1</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span>(cur&lt;last)&#123;</span><br><span class="line">                  <span class="type">int</span> t=nums[cur];</span><br><span class="line">                  nums[cur]=nums[last];</span><br><span class="line">                  nums[last]=t;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          cur++;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项"></a><span id="head4"><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/"><strong>26. 删除有序数组中的重复项</strong></a></span></h1><p><img src="/2023/05/11/5-11-array-2%20remove-element/2.png" alt="26"></p><h2 id="C-solution-1"><a href="#C-solution-1" class="headerlink" title="C++ solution"></a><span id="head5">C++ solution</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeDuplicates</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> next=cur+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur&lt;=nums.<span class="built_in">size</span>()<span class="number">-1</span>)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(next&lt;nums.<span class="built_in">size</span>()&amp;&amp;nums[next]==nums[cur])next++;</span><br><span class="line">            cur++;</span><br><span class="line">            <span class="keyword">if</span>(cur&gt;=nums.<span class="built_in">size</span>()||next&gt;=nums.<span class="built_in">size</span>())<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            nums[cur]=nums[next];</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Java-solution-1"><a href="#Java-solution-1" class="headerlink" title="Java solution"></a><span id="head6">Java solution</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">removeDuplicates</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> next=cur+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(cur&lt;=nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">           </span><br><span class="line">            <span class="keyword">while</span>(next&lt;nums.length&amp;&amp;nums[next]==nums[cur])next++;</span><br><span class="line">            cur++;</span><br><span class="line">            <span class="keyword">if</span>(cur==nums.length||next==nums.length)<span class="keyword">break</span>;</span><br><span class="line">            nums[cur]=nums[next];</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm training </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Array 1:Binary Search</title>
      <link href="/2023/05/10/5-10-array-1%20binary-search/"/>
      <url>/2023/05/10/5-10-array-1%20binary-search/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#head1"><strong>704 二分查找</strong></a><ul><li><a href="#head2"> NOTE</a><ul><li><a href="#head3">1. 每次写二分最容易纠结的part就是下面C++代码里面的A,B,C,D行:</a></li><li><a href="#head4">2. 二分法取中间值防溢出</a></li></ul></li><li><a href="#head5">C++ solution</a></li><li><a href="#head6">Java solution</a></li></ul></li><li><a href="#head7"><strong>35. 搜索插入位置</strong></a><ul><li><a href="#head8">C++ solution</a></li><li><a href="#head9">Java solution</a></li></ul></li><li><a href="#head10"><strong>34. 在排序数组中查找元素的第一个和最后一个位置</strong> </a><ul><li><a href="#head11"> NOTE</a><ul><li><a href="#head12">1. 使用二分法在有序数组中查找某个数的左边界，即某个数第一次出现的位置</a></li><li><a href="#head13">2. 使用二分法在有序数组中查找某个数的右边界，即某个数最后一次出现的位置</a></li></ul></li><li><a href="#head14">C++ solution</a></li><li><a href="#head15">Java solution</a></li></ul></li></ul><h1 id="Ⅰ-704-二分查找"><a href="#Ⅰ-704-二分查找" class="headerlink" title=" Ⅰ 704 二分查找 "></a><span id="head1"> <strong><a href="https://leetcode.cn/problems/binary-search/">Ⅰ 704 二分查找</a></strong> </span></h1><p><img src="/2023/05/10/5-10-array-1%20binary-search/1.png" alt="704"></p><h2 id="NOTE"><a href="#NOTE" class="headerlink" title=" NOTE"></a><span id="head2"> NOTE</span></h2><h3 id="1-每次写二分最容易纠结的part就是下面C-代码里面的A-B-C-D行"><a href="#1-每次写二分最容易纠结的part就是下面C-代码里面的A-B-C-D行" class="headerlink" title="1. 每次写二分最容易纠结的part就是下面C++代码里面的A,B,C,D行"></a><span id="head3">1. 每次写二分最容易纠结的part就是下面C++代码里面的A,B,C,D行</span></h3><ul><li>A 处是用nums.size()-1还是nums.size()?</li><li>B 处是 &lt;&#x3D; 还是 &lt; ?</li><li>C 处是 mid 还是 mid - 1 ?</li><li>D 处是 mid 还是 mid + 1 ?</li></ul><p>null- 实际上这些不同的本质实际上是对于数组区间的划分法不同：</p><table><thead><tr><th></th><th>左闭右闭区间</th><th>左闭右开区间</th></tr></thead><tbody><tr><td>A</td><td><code>high=nums.size()-1</code></td><td><code>high=nums.size()</code></td></tr><tr><td>B</td><td><code> while(low&lt;=high)</code></td><td><code> while(low&lt;high)</code></td></tr><tr><td>C</td><td><code> high=mid-1;</code></td><td><code> high=mid;</code></td></tr><tr><td>D</td><td><code>low=mid+1;</code></td><td><code>low=mid+1;</code></td></tr></tbody></table><h3 id="2-二分法取中间值防溢出"><a href="#2-二分法取中间值防溢出" class="headerlink" title="2. 二分法取中间值防溢出"></a><span id="head4">2. 二分法取中间值防溢出</span></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = (low+high) / <span class="number">2</span></span><br></pre></td></tr></table></figure><p>E 处的写法在两大数相加的时候容易发生溢出，可以改成下面的写法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mid = low + (( high - low ) / <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h2 id="C-solution"><a href="#C-solution" class="headerlink" title="C++ solution"></a><span id="head5">C++ solution</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> </span></span><br><span class="line"><span class="function">    <span class="type">int</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*A*/</span>   <span class="type">int</span> low=<span class="number">0</span>,high=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*B*/</span>   <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*E*/</span>        <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(target==nums[mid])&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line"><span class="comment">/*C*/</span>           high=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">/*D*/</span>           low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Java-solution"><a href="#Java-solution" class="headerlink" title="Java solution"></a><span id="head6">Java solution</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> low=<span class="number">0</span>,high=nums.length-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> mid=(low+high)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&gt;=target)&#123;</span><br><span class="line">                high=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Ⅱ-35-搜索插入位置"><a href="#Ⅱ-35-搜索插入位置" class="headerlink" title="Ⅱ  35. 搜索插入位置"></a><span id="head7"><strong><a href="https://leetcode.cn/problems/search-insert-position/">Ⅱ  35. 搜索插入位置</a></strong></span></h1><p><img src="/2023/05/10/5-10-array-1%20binary-search/2.png" alt="35"></p><h2 id="C-solution-1"><a href="#C-solution-1" class="headerlink" title="C++ solution"></a><span id="head8">C++ solution</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">searchInsert</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> low =<span class="number">0</span>,high=nums.<span class="built_in">size</span>()<span class="number">-1</span>,mid,ans=nums.<span class="built_in">size</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line"></span><br><span class="line">            mid =(low+high)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(target&lt;=nums[mid])&#123;<span class="comment">//在左边 </span></span><br><span class="line">            ans=mid;</span><br><span class="line">                high=mid<span class="number">-1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                low=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Java-solution-1"><a href="#Java-solution-1" class="headerlink" title="Java solution"></a><span id="head9">Java solution</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = nums.length-<span class="number">1</span>, ans = nums.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> ( low + high ) &gt;&gt; <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(target &lt;= nums[mid])&#123;<span class="comment">// 在左边</span></span><br><span class="line"></span><br><span class="line">                ans = mid;</span><br><span class="line"></span><br><span class="line">                high = mid-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span>&#123;</span><br><span class="line"></span><br><span class="line">                low = mid +<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="keyword">return</span> ans;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Ⅲ-34-在排序数组中查找元素的第一个和最后一个位置"><a href="#Ⅲ-34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title=" Ⅲ 34. 在排序数组中查找元素的第一个和最后一个位置"></a><span id="head10"><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/"> <strong>Ⅲ 34. 在排序数组中查找元素的第一个和最后一个位置</strong></a></span></h1><p><img src="/2023/05/10/5-10-array-1%20binary-search/3.png" alt="34"></p><h2 id="NOTE-1"><a href="#NOTE-1" class="headerlink" title=" NOTE"></a><span id="head11"> NOTE</span></h2><h3 id="1-使用二分法在有序数组中查找某个数的左边界，即某个数第一次出现的位置"><a href="#1-使用二分法在有序数组中查找某个数的左边界，即某个数第一次出现的位置" class="headerlink" title="1. 使用二分法在有序数组中查找某个数的左边界，即某个数第一次出现的位置"></a><span id="head12">1. 使用二分法在有序数组中查找某个数的左边界，即某个数第一次出现的位置</span></h3><pre class="mermaid">    graph LR    A[Start] --> B{empty?}    B -- yes --> C[end]    B -- no --> D[ left border = 0 <br> right border = length-1 <br> ]    D --> F{target <= the middle element of array ?} f -- yes> G[the left border must in the left half,<br> so search the left half]    G --> I[right border = middle ]    F -- no --> H[the left border must in the right half,<br> so search the right half]     H --> J[left border = mid + 1]    I --> K{left border >= right vorder?}    J --> K    K --yes--> L{ the element of left border = target?}    K --no--> F    L --yes--> M[found the left border]    L --no--> C</=></pre><h3 id="2-使用二分法在有序数组中查找某个数的右边界，即某个数最后一次出现的位置"><a href="#2-使用二分法在有序数组中查找某个数的右边界，即某个数最后一次出现的位置" class="headerlink" title="2. 使用二分法在有序数组中查找某个数的右边界，即某个数最后一次出现的位置"></a><span id="head13">2. 使用二分法在有序数组中查找某个数的右边界，即某个数最后一次出现的位置</span></h3><p>与查找左边界不同的一个关键点有计算mid的时候需要l+r+1！<br>否则会陷入死循环</p><pre class="mermaid">    graph LR    a[start] --> b{empty?}    b --yes--> c[end]    b --no--> d[left border = 0<br>right border =lenth-1]    d --> e{target >= the middle element of the array <font color="red">+1!</font>?}    e --yes--> f[search the right half]    e -- no--> g[search the left half]    f--> h{ l>=r? }    g-->h    h--yes-->e    h--no-->i{the element of right border == target?}    i--yes-->j[found the right border]    i--no-->c</pre><h2 id="C-solution-2"><a href="#C-solution-2" class="headerlink" title="C++ solution"></a><span id="head14">C++ solution</span></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">searchRange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> left = <span class="built_in">binarySearch</span>(nums,target,<span class="literal">true</span>);</span><br><span class="line">        <span class="type">int</span> right =  <span class="built_in">binarySearch</span>(nums,target,<span class="literal">false</span>)<span class="number">-1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(left &lt;= right &amp;&amp; right &lt; nums.<span class="built_in">size</span>() &amp;&amp; nums[left] == target &amp;&amp; nums[right] == target)&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;left,right&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> vector&lt;<span class="type">int</span>&gt;&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">binarySearch</span><span class="params">(vector&lt;<span class="type">int</span>&gt;nums,<span class="type">int</span> target,<span class="type">bool</span> isLeft)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> low =<span class="number">0</span>,high=nums.<span class="built_in">size</span>()<span class="number">-1</span>,mid,ans=nums.<span class="built_in">size</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">    </span><br><span class="line">    mid=(low+high)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(target&lt;nums[mid]||isLeft&amp;&amp;target&lt;=nums[mid])&#123;</span><br><span class="line">    ans = mid;</span><br><span class="line">    high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Java-solution-2"><a href="#Java-solution-2" class="headerlink" title="Java solution"></a><span id="head15">Java solution</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] searchRange(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;</span><br><span class="line">      <span class="type">int</span> [] arr=&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">true</span>);</span><br><span class="line"><span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> binarySearch(nums, target, <span class="literal">false</span>)-<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(left&lt;=right &amp;&amp; right&lt;nums.length &amp;&amp; nums[left] == target &amp;&amp; nums[right] == target)&#123;</span><br><span class="line">arr[<span class="number">0</span>]=left;</span><br><span class="line">arr[<span class="number">1</span>]=right;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">boolean</span> isLeft)</span>&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>, high = nums.length-<span class="number">1</span>, mid, ans = nums.length;</span><br><span class="line"><span class="keyword">while</span>(low&lt;=high)&#123;</span><br><span class="line">mid=(low+high)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(target &lt; nums[mid]|| isLeft &amp;&amp; target &lt;= nums[mid])&#123;</span><br><span class="line">ans = mid;</span><br><span class="line">high = mid - <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">low = mid + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> algorithm training </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
