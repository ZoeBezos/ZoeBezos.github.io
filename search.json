[{"title":"11. Monotone Stack","url":"/2023/09/26/23-11-19-algorithm-monotonestack/","content":"\n| 编号 | 是否完成 | 题号                              | 标签 |\n| ---- | :------: | :-------------------------------- | ---- |\n| 1    |          | [🟡739. 每日温度](#head1)          |      |\n| 2    |          | [🟢496. 下一个更大元素 I](#head2)  |      |\n| 3    |          | [🟡503. 下一个更大元素 II](#head3) |      |\n| 4    |          | [🟠42. 接雨水](#head4)             |      |\n| 5    |          | [🟠84. 柱状图中最大的矩形](#head5) |      |\n\n# <span id=\"head1\">🟡739. 每日温度</span>\n\n# <span id=\"head2\">🟢496. 下一个更大元素 I</span>\n\n# <span id=\"head3\">🟡503. 下一个更大元素 II</span>\n\n# <span id=\"head4\">🟠42. 接雨水</span>\n\n# <span id=\"head5\">🟠84. 柱状图中最大的矩形</span>\n","categories":["algorithm"]},{"title":"10. DP","url":"/2023/09/25/23-11-19-algorithm-dp/","content":"\n|                          |                          | 编号 | 是否完成 | 题号                                        | 标签 |\n| :----------------------: | ------------------------ | ---- | :------: | :------------------------------------------ | ---- |\n| [ 动态规划基础](#head1)  |                          | 1    |    ✅     | [ 🟢509.斐波那契数](#head2)                  |      |\n|                          |                          | 2    |          | [🟢70. 爬楼梯](#head3)                       |      |\n|                          |                          | 3    |          | [🟢746. 使用最小花费爬楼梯](#head4)          |      |\n|                          |                          | 4    |          | [🟡62. 不同路径](#head5)                     |      |\n|                          |                          | 5    |          | [🟡63. 不同路径 II](#head6)                  |      |\n|                          |                          | 6    |          | [🟡343. 整数拆分](#head7)                    |      |\n|                          |                          | 7    |          | [🟡96. 不同的二叉搜索树](#head8)             |      |\n|   [ 背包系列](#head9)    | [ 01背包问题](#head10)   | 8    |          | [🟡416. 分割等和子集](#head11)               |      |\n|                          |                          | 9    |          | [🟡1049. 最后一块石头的重量 II](#head12)     |      |\n|                          |                          | 10   |          | [🟡494. 目标和](#head13)                     |      |\n|                          |                          | 11   |          | [🟡474. 一和零](#head14)                     |      |\n|                          | [ 完全背包问题](#head15) | 12   |          | [🟡518. 零钱兑换 II](#head16)                |      |\n|                          |                          | 13   |          | [🟡377. 组合总和 Ⅳ](#head17)                 |      |\n|                          |                          | 14   |          | [ 🟢70.爬楼梯](#head18)                      |      |\n|                          |                          | 15   |          | [🟡322. 零钱兑换](#head19)                   |      |\n|                          |                          | 16   |          | [🟡279. 完全平方数](#head20)                 |      |\n|                          |                          | 17   |          | [🟡139. 单词拆分](#head21)                   |      |\n| [ 打家劫舍系列](#head22) |                          | 18   |          | [🟡198. 打家劫舍](#head23)                   |      |\n|                          |                          | 19   |          | [🟡213. 打家劫舍 II](#head24)                |      |\n|                          |                          | 20   |          | [🟡337. 打家劫舍 III](#head25)               |      |\n|   [ 股票系列](#head26)   |                          | 21   |          | [🟢121. 买卖股票的最佳时机](#head27)         |      |\n|                          |                          | 22   |          | [🟡122. 买卖股票的最佳时机 II](#head28)      |      |\n|                          |                          | 23   |          | [🟠123. 买卖股票的最佳时机 III](#head29)     |      |\n|                          |                          | 24   |          | [🟠188. 买卖股票的最佳时机 IV](#head30)      |      |\n|                          |                          | 25   |          | [🟡309. 买卖股票的最佳时机含冷冻期](#head31) |      |\n|                          |                          | 26   |          | [🟡714. 买卖股票的最佳时机含手续费](#head32) |      |\n|  [ 子序列系列](#head33)  | [ 不连续子序列](#head34) | 27   |          | [🟡300. 最长递增子序列](#head35)             |      |\n|                          |                          | 28   |          | [🟡1143. 最长公共子序列](#head36)            |      |\n|                          |                          | 29   |          | [🟡1035. 不相交的线](#head37)                |      |\n|                          | [ 连续子序列](#head38)   | 30   |          | [🟢674. 最长连续递增序列](#head39)           |      |\n|                          |                          | 31   |          | [🟡718. 最长重复子数组](#head40)             |      |\n|                          |                          | 32   |          | [🟡53. 最大子数组和](#head41)                |      |\n|                          | [ 编辑距离](#head42)     | 33   |          | [🟢392. 判断子序列](#head43)                 |      |\n|                          |                          | 34   |          | [🟠115. 不同的子序列](#head44)               |      |\n|                          |                          | 35   |          | [🟡583. 两个字符串的删除操作](#head45)       |      |\n|                          |                          | 36   |          | [🟠72. 编辑距离](#head46)                    |      |\n|                          | [ 回文](#head47)         | 37   |          | [🟡647. 回文子串](#head48)                   |      |\n|                          |                          | 38   |          | [🟡516. 最长回文子序列](#head49)             |      |\n\n# <span id=\"head1\"> 动态规划基础</span>\n\n### <span id=\"head2\"> 🟢509.斐波那契数</span>\n\n> **斐波那契数** （通常用 `F(n)` 表示）形成的序列称为 **斐波那契数列** 。该数列由 `0` 和 `1` 开始，后面的每一项数字都是前面两项数字的和。也就是：\n>\n> ```\n> F(0) = 0，F(1) = 1\n> F(n) = F(n - 1) + F(n - 2)，其中 n > 1\n> ```\n>\n> 给定 `n` ，请计算 `F(n)` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：n = 2\n> 输出：1\n> 解释：F(2) = F(1) + F(0) = 1 + 0 = 1\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：n = 3\n> 输出：2\n> 解释：F(3) = F(2) + F(1) = 1 + 1 = 2\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：n = 4\n> 输出：3\n> 解释：F(4) = F(3) + F(2) = 2 + 1 = 3\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `0 <= n <= 30`\n>\n> Related Topics\n>\n> 递归\n>\n> 记忆化搜索\n>\n> 数学\n>\n> 动态规划\n\n```java\npublic int fib(int n) {\n        if(n==1||n==2){\n            return 1;\n        }\n        int f1=1,f2=1,res=0;\n        int i=3;\n        while(i<=n){\n            res=f1+f2;\n            f1=f2;\n            f2=res;\n            i++;\n        }\n        return res;\n    }\n```\n\n### <span id=\"head3\">🟢70. 爬楼梯</span>\n\n> 假设你正在爬楼梯。需要 `n` 阶你才能到达楼顶。\n>\n> 每次你可以爬 `1` 或 `2` 个台阶。你有多少种不同的方法可以爬到楼顶呢？\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：n = 2\n> 输出：2\n> 解释：有两种方法可以爬到楼顶。\n> 1. 1 阶 + 1 阶\n> 2. 2 阶\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：n = 3\n> 输出：3\n> 解释：有三种方法可以爬到楼顶。\n> 1. 1 阶 + 1 阶 + 1 阶\n> 2. 1 阶 + 2 阶\n> 3. 2 阶 + 1 阶\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= n <= 45`\n>\n> Related Topics\n>\n> 记忆化搜索\n>\n> 数学\n>\n> 动态规划\n\n```java\n\n```\n\n\n\n### <span id=\"head4\">🟢746. 使用最小花费爬楼梯</span>\n\n### <span id=\"head5\">🟡62. 不同路径</span>\n\n### <span id=\"head6\">🟡63. 不同路径 II</span>\n\n### <span id=\"head7\">🟡343. 整数拆分</span>\n\n### <span id=\"head8\">🟡96. 不同的二叉搜索树</span>\n\n# <span id=\"head9\"> 背包系列</span>\n\n## <span id=\"head10\"> 01背包问题</span>\n\n### <span id=\"head11\">🟡416. 分割等和子集</span>\n\n### <span id=\"head12\">🟡1049. 最后一块石头的重量 II</span>\n\n### <span id=\"head13\">🟡494. 目标和</span>\n\n### <span id=\"head14\">🟡474. 一和零</span>\n\n## <span id=\"head15\"> 完全背包问题</span>\n\n### <span id=\"head16\">🟡518. 零钱兑换 II</span>\n\n### <span id=\"head17\">🟡377. 组合总和 Ⅳ</span>\n\n### <span id=\"head18\"> 🟢70.爬楼梯</span>\n\n### <span id=\"head19\">🟡322. 零钱兑换</span>\n\n### <span id=\"head20\">🟡279. 完全平方数</span>\n\n### <span id=\"head21\">🟡139. 单词拆分</span>\n\n# <span id=\"head22\"> 打家劫舍系列</span>\n\n### <span id=\"head23\">🟡198. 打家劫舍</span>\n\n### <span id=\"head24\">🟡213. 打家劫舍 II</span>\n\n### <span id=\"head25\">🟡337. 打家劫舍 III</span>\n\n# <span id=\"head26\"> 股票系列</span>\n\n### <span id=\"head27\">🟢121. 买卖股票的最佳时机</span>\n\n### <span id=\"head28\">🟡122. 买卖股票的最佳时机 II</span>\n\n### <span id=\"head29\">🟠123. 买卖股票的最佳时机 III</span>\n\n### <span id=\"head30\">🟠188. 买卖股票的最佳时机 IV</span>\n\n### <span id=\"head31\">🟡309. 买卖股票的最佳时机含冷冻期</span>\n\n### <span id=\"head32\">🟡714. 买卖股票的最佳时机含手续费</span>\n\n# <span id=\"head33\"> 子序列系列</span>\n\n## <span id=\"head34\"> 不连续子序列</span>\n\n### <span id=\"head35\">🟡300. 最长递增子序列</span>\n\n### <span id=\"head36\">🟡1143. 最长公共子序列</span>\n\n### <span id=\"head37\">🟡1035. 不相交的线</span>\n\n## <span id=\"head38\"> 连续子序列</span>\n\n### <span id=\"head39\">🟢674. 最长连续递增序列</span>\n\n### <span id=\"head40\">🟡718. 最长重复子数组</span>\n\n### <span id=\"head41\">🟡53. 最大子数组和</span>\n\n## <span id=\"head42\"> 编辑距离</span>\n\n### <span id=\"head43\">🟢392. 判断子序列</span>\n\n### <span id=\"head44\">🟠115. 不同的子序列</span>\n\n### <span id=\"head45\">🟡583. 两个字符串的删除操作</span>\n\n### <span id=\"head46\">🟠72. 编辑距离</span>\n\n## <span id=\"head47\"> 回文</span>\n\n### <span id=\"head48\">🟡647. 回文子串</span>\n\n### <span id=\"head49\">🟡516. 最长回文子序列</span>\n\n","categories":["algorithm"]},{"title":"9. Greedy","url":"/2023/09/24/23-11-19-algorithm-greedy/","content":"\n|                   |              分类               | 编号 | 是否完成 | 题号                                        | 标签     |\n| ----------------- | :-----------------------------: | ---- | :------: | :------------------------------------------ | -------- |\n| [ 简单题](#head1) |                                 | 1    |    ✅     | [🟢455. 分发饼干](#head2)                    | 双指针   |\n|                   |                                 | 2    |    ✅     | [🟢1005.K 次取反后最大化的数组和](#head3)    | 贪心     |\n|                   |                                 | 3    |    ✅     | [🟢860. 柠檬水找零](#head4)                  | 贪心     |\n| 中等问题          |       [ 序列问题](#head5)       | 4    |    ✅     | [🟡376. 摆动序列](#head6)                    | 贪心     |\n|                   |                                 | 5    |    ✅     | [🟡738. 单调递增的数字](#head7)              | 简化数组 |\n|                   | [ 贪心算法解决股票问题](#head8) | 6    |    ✅     | [🟡122.买卖股票的最佳时机 II](#head9)        | 贪心     |\n|                   |                                 | 7    |          | [🟡714. 买卖股票的最佳时机含手续费](#head10) |          |\n|                   | [ 两个维度的权衡问题](#head11)  | 8    |          | [ 🟠135.分发糖果](#head12)                   |          |\n|                   |                                 | 9    |    ✅     | [🟡406. 根据身高重建队列](#head13)           | 贪心     |\n| 有点难度          |      [ 区间问题](#head14)       | 10   |    ✅     | [🟡55. 跳跃游戏](#head15)                    | 贪心     |\n|                   |                                 | 11   |    ✅     | [🟡45. 跳跃游戏 II](#head16)                 | 贪心     |\n|                   |                                 | 12   |          | [ 🟡452.用最少数量的箭引爆气球](#head17)     |          |\n|                   |                                 | 13   |          | [🟡435. 无重叠区间](#head18)                 |          |\n|                   |                                 | 14   |          | [🟡763. 划分字母区间](#head19)               |          |\n|                   |                                 | 15   |          | [🟡56. 合并区间](#head20)                    |          |\n|                   |        [ 其他](#head21)         | 16   |          | [🟡53. 最大子数组和](#head22)                |          |\n|                   |                                 | 17   |          | [ 🟡134.加油站](#head23)                     |          |\n|                   |                                 | 18   |          | [🟠968. 监控二叉树](#head24)                 |          |\n\n# <span id=\"head1\"> 简单题</span>\n\n## <span id=\"head2\">🟢455. 分发饼干</span>\n\n> 假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。\n>\n> 对每个孩子 `i`，都有一个胃口值 `g[i]`，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 `j`，都有一个尺寸 `s[j]` 。如果 `s[j] >= g[i]`，我们可以将这个饼干 `j` 分配给孩子 `i` ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。\n>\n> **示例 1:**\n>\n> ```\n> 输入: g = [1,2,3], s = [1,1]\n> 输出: 1\n> 解释: \n> 你有三个孩子和两块小饼干，3个孩子的胃口值分别是：1,2,3。\n> 虽然你有两块小饼干，由于他们的尺寸都是1，你只能让胃口值是1的孩子满足。\n> 所以你应该输出1。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: g = [1,2], s = [1,2,3]\n> 输出: 2\n> 解释: \n> 你有两个孩子和三块小饼干，2个孩子的胃口值分别是1,2。\n> 你拥有的饼干数量和尺寸都足以让所有孩子满足。\n> 所以你应该输出2.\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= g.length <= 3 * 104`\n> - `0 <= s.length <= 3 * 104`\n> - `1 <= g[i], s[j] <= 231 - 1`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 双指针\n>\n> 排序\n\n```java\nclass Solution {\n    public int findContentChildren(int[] g, int[] s) {\n        int cnt=0;\n        Arrays.sort(g);\n        Arrays.sort(s);\n        int i=0,j=0;\n        while(i<g.length&&j<s.length){\n            if(g[i]<=s[j]){\n                cnt++;\n                i++;\n                j++;\n            }else if(i<g.length){\n                j++;\n            }else{\n                i++;\n            }\n        }\n        return cnt;\n    }\n}\n```\n\n\n\n## <span id=\"head3\">🟢1005.K 次取反后最大化的数组和</span>\n\n> 给你一个整数数组 `nums` 和一个整数 `k` ，按以下方法修改该数组：\n>\n> - 选择某个下标 `i` 并将 `nums[i]` 替换为 `-nums[i]` 。\n>\n> 重复这个过程恰好 `k` 次。可以多次选择同一个下标 `i` 。\n>\n> 以这种方式修改数组后，返回数组 **可能的最大和** 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [4,2,3], k = 1\n> 输出：5\n> 解释：选择下标 1 ，nums 变为 [4,-2,3] 。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [3,-1,0,2], k = 3\n> 输出：6\n> 解释：选择下标 (1, 2, 2) ，nums 变为 [3,1,0,2] 。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：nums = [2,-3,-1,5,-4], k = 2\n> 输出：13\n> 解释：选择下标 (1, 4) ，nums 变为 [2,3,-1,5,4] 。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 104`\n> - `-100 <= nums[i] <= 100`\n> - `1 <= k <= 104`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 排序\n\n```java\nclass Solution {\n    public int largestSumAfterKNegations(int[] nums, int k) {\n        Arrays.sort(nums);\n        int res=0;\n        for (int i = 0; i < nums.length; i++) {\n            if(nums[i]<0&&k>0){\n                nums[i]=(-1)*nums[i];\n                k--;\n            } else if (k>0&&k%2==1) {\n                Arrays.sort(nums);\n                nums[0]=(-1)*nums[0];                \n                k=0;\n            }\n        }\n        if(k>0&&k%2==1){\n            Arrays.sort(nums);\n            nums[0]=(-1)*nums[0];\n        }\n        for (int i = 0; i < nums.length; i++) {\n            res+=nums[i];\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head4\">🟢860. 柠檬水找零</span>\n\n> 在柠檬水摊上，每一杯柠檬水的售价为 `5` 美元。顾客排队购买你的产品，（按账单 `bills` 支付的顺序）一次购买一杯。\n>\n> 每位顾客只买一杯柠檬水，然后向你付 `5` 美元、`10` 美元或 `20` 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 `5` 美元。\n>\n> 注意，一开始你手头没有任何零钱。\n>\n> 给你一个整数数组 `bills` ，其中 `bills[i]` 是第 `i` 位顾客付的账。如果你能给每位顾客正确找零，返回 `true` ，否则返回 `false` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：bills = [5,5,5,10,20]\n> 输出：true\n> 解释：\n> 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。\n> 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。\n> 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。\n> 由于所有客户都得到了正确的找零，所以我们输出 true。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：bills = [5,5,10,10,20]\n> 输出：false\n> 解释：\n> 前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。\n> 对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。\n> 对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。\n> 由于不是每位顾客都得到了正确的找零，所以答案是 false。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= bills.length <= 105`\n> - `bills[i]` 不是 `5` 就是 `10` 或是 `20`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n\n```java\nclass Solution {\n    public boolean lemonadeChange(int[] bills) {\n        boolean  res=true;\n        int cnt_5=0,cnt_10=0;\n        for (int i = 0; i < bills.length; i++) {\n            if(bills[i]==5){\n                cnt_5++;\n            }else if(bills[i]==10){\n                if(cnt_5>0){\n                    cnt_5--;\n                    cnt_10++;\n                }else{\n                    res=false;\n                    break;\n                }\n            }else{\n                if(cnt_5>0&&cnt_10>0){\n                    cnt_5--;\n                    cnt_10--;\n                }else if(cnt_5>2){\n                    cnt_5-=3;\n                }else{\n                    res=false;\n                    break;\n                }\n            }\n        }\n        return res;\n    }\n}\n```\n\n# <span id=\"head5\"> 序列问题</span>\n\n## <span id=\"head6\">🟡376. 摆动序列</span>\n\n> 如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 **摆动序列 。**第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。\n>\n> - 例如， `[1, 7, 4, 9, 2, 5]` 是一个 **摆动序列** ，因为差值 `(6, -3, 5, -7, 3)` 是正负交替出现的。\n> - 相反，`[1, 4, 7, 2, 5]` 和 `[1, 7, 4, 5, 5]` 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。\n>\n> **子序列** 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。\n>\n> 给你一个整数数组 `nums` ，返回 `nums` 中作为 **摆动序列** 的 **最长子序列的长度** 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,7,4,9,2,5]\n> 输出：6\n> 解释：整个序列均为摆动序列，各元素之间的差值为 (6, -3, 5, -7, 3) 。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [1,17,5,10,13,15,10,5,16,8]\n> 输出：7\n> 解释：这个序列包含几个长度为 7 摆动序列。\n> 其中一个是 [1, 17, 10, 13, 10, 16, 8] ，各元素之间的差值为 (16, -7, 3, -3, 6, -8) 。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：nums = [1,2,3,4,5,6,7,8,9]\n> 输出：2\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 1000`\n> - `0 <= nums[i] <= 1000`\n>\n> \n>\n> **进阶：**你能否用 `O(n)` 时间复杂度完成此题?\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 动态规划\n\n```java\nclass Solution {\n    public int wiggleMaxLength(int[] nums) {\n        int len= nums.length;\n        if(len==1){\n            return 1;\n        }\n        if(len==2&&nums[0]!=nums[1]){\n            return 2;\n        }else if(len==2){\n            return 1;\n        }\n        int[] arr=new int[len-1];\n        for (int i = 0; i < len-1; i++) {\n            arr[i]=nums[i+1]-nums[i];\n        }\n        int index=0;\n        while(index<len-1&&arr[index]==0){\n            index++;\n        }\n        if(index==len-1){\n            return 1;\n        }\n        int flag=arr[index],cnt=2;\n        for (int i = index+1; i < len-1; i++) {\n            if(flag*arr[i]<0){\n                cnt++;\n                flag=arr[i];\n            }\n        }\n        return cnt;\n    }\n}\n```\n\n用卡哥的方法试一下：\n\n```java\n public int wiggleMaxLength(int[] nums) {\n        int len= nums.length;\n        if(len==1){\n            return 1;\n        }\n        if(len==2&&nums[0]!=nums[1]){\n            return 2;\n        }else if(len==2){\n            return 1;\n        }\n        int res=1;\n        int lastDiff=0,curDiff=0;\n        for (int i = 1; i < nums.length; i++) {\n            curDiff=nums[i]-nums[i-1];\n            if(curDiff>0&&lastDiff<=0||curDiff<0&&lastDiff>=0){\n                res++;\n                lastDiff=curDiff;\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head7\">🟡738. 单调递增的数字</span>\n\n> 当且仅当每个相邻位数上的数字 `x` 和 `y` 满足 `x <= y` 时，我们称这个整数是**单调递增**的。\n>\n> 给定一个整数 `n` ，返回 *小于或等于 `n` 的最大数字，且数字呈 **单调递增*** 。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: n = 10\n> 输出: 9\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: n = 1234\n> 输出: 1234\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: n = 332\n> 输出: 299\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `0 <= n <= 109`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数学\n\n```java\nclass Solution {\n    public int monotoneIncreasingDigits(int n) {\n        StringBuilder sb=new StringBuilder(String.valueOf(n));\n        while(check(sb)!=-1){\n            int i=check(sb);\n            sb.replace(i-1,i,String.valueOf(sb.charAt(i-1)-'1'));\n            for (int j = i; j < sb.length(); j++) {\n                sb.replace(j,j+1,String.valueOf(9));\n            }\n        }\n        return Integer.valueOf(sb.toString());\n    }\n    int check(StringBuilder sb){\n        if(sb.length()==1){\n            return -1;\n        }\n        for (int i = 1; i < sb.length(); i++) {\n            if(sb.charAt(i)< sb.charAt(i-1)){\n                return i;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n# <span id=\"head8\"> 贪心算法解决股票问题</span>\n\n## <span id=\"head9\">🟡122.买卖股票的最佳时机 II</span>\n\n> 给你一个整数数组 `prices` ，其中 `prices[i]` 表示某支股票第 `i` 天的价格。\n>\n> 在每一天，你可以决定是否购买和/或出售股票。你在任何时候 **最多** 只能持有 **一股** 股票。你也可以先购买，然后在 **同一天** 出售。\n>\n> 返回 *你能获得的 **最大** 利润* 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：prices = [7,1,5,3,6,4]\n> 输出：7\n> 解释：在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\n>   随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6 - 3 = 3 。\n>   总利润为 4 + 3 = 7 。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：prices = [1,2,3,4,5]\n> 输出：4\n> 解释：在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5 - 1 = 4 。\n>   总利润为 4 。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：prices = [7,6,4,3,1]\n> 输出：0\n> 解释：在这种情况下, 交易无法获得正利润，所以不参与交易可以获得最大利润，最大利润为 0 。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= prices.length <= 3 * 104`\n> - `0 <= prices[i] <= 104`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 动态规划\n\n```java\nclass Solution {\n    public int maxProfit(int[] prices) {\n        if(prices.length==1){\n            return 0;\n        }\n        if(prices.length==2){\n            if(prices[0]<prices[1]){\n                return prices[1]-prices[0];\n            }else{\n                return 0;\n            }\n        }\n        int res=0;\n        for (int i = 1; i < prices.length-1; i++) {\n            if(prices[i-1]<prices[i]){//↑\n                if(prices[i]<prices[i+1]){//↑↑\n                    continue;\n                }else{//↑↓\n                    res+=prices[i];\n                }\n            }else{//↓\n                if(prices[i]<prices[i+1]){//↓↑\n                    res-=prices[i];\n                }else{//↓↓\n                    continue;\n                }\n            }\n        }\n        if(prices[0]<prices[1]){\n            res-=prices[0];\n        }\n        if(prices[prices.length-2]<prices[prices.length-1]){\n            res+=prices[prices.length-1];\n        }\n        return res;\n    }\n}\n```\n\nman，看完我写的，再看卡哥写的，太可笑了吧\n\n```java\nclass Solution {\n    public int maxProfit(int[] prices) {\n        int result = 0;\n        for (int i = 1; i < prices.length; i++) {\n            result += Math.max(prices[i] - prices[i - 1], 0);\n        }\n        return result;\n    }\n}\n```\n\n## <span id=\"head10\">🟡714. 买卖股票的最佳时机含手续费</span>\n\n> 给定一个整数数组 `prices`，其中 `prices[i]`表示第 `i` 天的股票价格 ；整数 `fee` 代表了交易股票的手续费用。\n>\n> 你可以无限次地完成交易，但是你每笔交易都需要付手续费。如果你已经购买了一个股票，在卖出它之前你就不能再继续购买股票了。\n>\n> 返回获得利润的最大值。\n>\n> **注意：**这里的一笔交易指买入持有并卖出股票的整个过程，每笔交易你只需要为支付一次手续费。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：prices = [1, 3, 2, 8, 4, 9], fee = 2\n> 输出：8\n> 解释：能够达到的最大利润:  \n> 在此处买入 prices[0] = 1\n> 在此处卖出 prices[3] = 8\n> 在此处买入 prices[4] = 4\n> 在此处卖出 prices[5] = 9\n> 总利润: ((8 - 1) - 2) + ((9 - 4) - 2) = 8\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：prices = [1,3,7,5,10,3], fee = 3\n> 输出：6\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= prices.length <= 5 * 104`\n> - `1 <= prices[i] < 5 * 104`\n> - `0 <= fee < 5 * 104`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 动态规划\n\n```java\n\n```\n\n\n\n# <span id=\"head11\"> 两个维度的权衡问题</span>\n\n## <span id=\"head12\"> 🟠135.分发糖果</span>\n\n## <span id=\"head13\">🟡406. 根据身高重建队列</span>\n\n> 假设有打乱顺序的一群人站成一个队列，数组 `people` 表示队列中一些人的属性（不一定按顺序）。每个 `people[i] = [hi, ki]` 表示第 `i` 个人的身高为 `hi` ，前面 **正好** 有 `ki` 个身高大于或等于 `hi` 的人。\n>\n> 请你重新构造并返回输入数组 `people` 所表示的队列。返回的队列应该格式化为数组 `queue` ，其中 `queue[j] = [hj, kj]` 是队列中第 `j` 个人的属性（`queue[0]` 是排在队列前面的人）。\n>\n> \n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n> 输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n> 解释：\n> 编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。\n> 编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。\n> 编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。\n> 编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n> 编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。\n> 编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。\n> 因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n> 输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= people.length <= 2000`\n> - `0 <= hi <= 106`\n> - `0 <= ki < people.length`\n> - 题目数据确保队列可以被重建\n>\n> Related Topics\n>\n> 贪心\n>\n> 树状数组\n>\n> 线段树\n>\n> 数组\n>\n> 排序\n\n```java\nclass Solution {\n    static class People{\n        int height;\n        int no;\n        People(int height,int no){\n            this.height=height;\n            this.no=no;\n        }\n    }\n    public int[][] reconstructQueue(int[][] people) {\n        List<Solution.People> list=new ArrayList<>();\n        for (int i = 0; i < people.length; i++) {\n            list.add(new Solution.People(people[i][0],people[i][1]));\n        }\n\n        Comparator<Solution.People>comp=new Comparator<Solution.People>() {\n            @Override\n            public int compare(Solution.People o1, Solution.People o2) {\n                if(o1.no== o2.no){\n                    return o1.height-o2.height;\n                }else{\n                    return o1.no-o2.no;\n                }\n            }\n        };\n        Collections.sort(list,comp);\n\n        for (int i = 0; i < list.size(); i++) {\n            int cnt=list.get(i).no;\n            int index=0;\n            while(cnt>0&&index<=i){\n                if(list.get(index).height>=list.get(i).height){\n                    cnt--;\n                }\n                index++;\n            }\n            while (list.get(index).height<list.get(i).height){\n                index++;\n            }\n            list.add(index,list.get(i));\n            list.remove(i+1);\n        }\n        for (int i = 0; i < people.length; i++) {\n            people[i][0]=list.get(i).height;\n            people[i][1]=list.get(i).no;\n        }\n        return people;\n    }\n}\n```\n\n我写的巨长，贴个卡哥的：\n\n```java\nclass Solution {\n    public int[][] reconstructQueue(int[][] people) {\n        // 身高从大到小排（身高相同k小的站前面）\n        Arrays.sort(people, (a, b) -> {\n            if (a[0] == b[0]) return a[1] - b[1];   // a - b 是升序排列，故在a[0] == b[0]的狀況下，會根據k值升序排列\n            return b[0] - a[0];   //b - a 是降序排列，在a[0] != b[0]，的狀況會根據h值降序排列\n        });\n\n        LinkedList<int[]> que = new LinkedList<>();\n\n        for (int[] p : people) {\n            que.add(p[1],p);   //Linkedlist.add(index, value)，會將value插入到指定index裡。\n        }\n\n        return que.toArray(new int[people.length][]);\n    }\n}\n\n```\n\ndamn! 有我没用过的方法或思维：\n\n1.Arrays.sort(二维数组名,())\n\n```java\n Arrays.sort(people, (a, b) -> {\n            if (a[0] == b[0]) return a[1] - b[1];   // a - b 是升序排列，故在a[0] == b[0]的狀況下，會根據k值升序排列\n            return b[0] - a[0];   //b - a 是降序排列，在a[0] != b[0]，的狀況會根據h值降序排列\n        });\n\n```\n\n![image-20231113171217261](23-11-19-algorithm-greedy/image-20231113171217261.png)\n\n2.容器顺序插入结果恰好即为所求\n\n# <span id=\"head14\"> 区间问题</span>\n\n## <span id=\"head15\">🟡55. 跳跃游戏</span>\n\n> 给你一个非负整数数组 `nums` ，你最初位于数组的 **第一个下标** 。数组中的每个元素代表你在该位置可以跳跃的最大长度。\n>\n> 判断你是否能够到达最后一个下标，如果可以，返回 `true` ；否则，返回 `false` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [2,3,1,1,4]\n> 输出：true\n> 解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [3,2,1,0,4]\n> 输出：false\n> 解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 104`\n> - `0 <= nums[i] <= 105`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 动态规划\n\n```java\nclass Solution {\n    public boolean canJump(int[] nums) {\n        int max=0;\n        for (int i = 0; i < nums.length-1; i++) {\n            if(max>=i){\n                max=Math.max(max,i+nums[i]);\n            }\n        }\n        if(max>=nums.length-1){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}\n```\n\n## <span id=\"head16\">🟡45. 跳跃游戏 II</span>\n\n> 给定一个长度为 `n` 的 **0 索引**整数数组 `nums`。初始位置为 `nums[0]`。\n>\n> 每个元素 `nums[i]` 表示从索引 `i` 向前跳转的最大长度。换句话说，如果你在 `nums[i]` 处，你可以跳转到任意 `nums[i + j]` 处:\n>\n> - `0 <= j <= nums[i]`\n> - `i + j < n`\n>\n> 返回到达 `nums[n - 1]` 的最小跳跃次数。生成的测试用例可以到达 `nums[n - 1]`。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: nums = [2,3,1,1,4]\n> 输出: 2\n> 解释: 跳到最后一个位置的最小跳跃数是 2。\n>      从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: nums = [2,3,0,1,4]\n> 输出: 2\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= nums.length <= 104`\n> - `0 <= nums[i] <= 1000`\n> - 题目保证可以到达 `nums[n-1]`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 动态规划\n\n```java\nclass Solution {\n    public int jump(int[] nums) {\n        int max=nums[0], cnt=0,index=1;\n        while(index<= nums.length-1){\n            int reach=max;\n            cnt++;\n            for (int i = index; i <= reach&& i< nums.length; i++) {\n                max=Math.max(max,i+nums[i]);\n            }\n            index=reach+1;\n        }\n        return cnt;\n    }\n}\n```\n\n\n\n## <span id=\"head17\"> 🟡452.用最少数量的箭引爆气球</span>\n\n> 有一些球形气球贴在一堵用 XY 平面表示的墙面上。墙面上的气球记录在整数数组 `points` ，其中`points[i] = [xstart, xend]` 表示水平直径在 `xstart` 和 `xend`之间的气球。你不知道气球的确切 y 坐标。\n>\n> 一支弓箭可以沿着 x 轴从不同点 **完全垂直** 地射出。在坐标 `x` 处射出一支箭，若有一个气球的直径的开始和结束坐标为 `x``start`，`x``end`， 且满足 `xstart ≤ x ≤ x``end`，则该气球会被 **引爆** 。可以射出的弓箭的数量 **没有限制** 。 弓箭一旦被射出之后，可以无限地前进。\n>\n> 给你一个数组 `points` ，*返回引爆所有气球所必须射出的 **最小** 弓箭数* 。\n>\n> **示例 1：**\n>\n> ```\n> 输入：points = [[10,16],[2,8],[1,6],[7,12]]\n> 输出：2\n> 解释：气球可以用2支箭来爆破:\n> -在x = 6处射出箭，击破气球[2,8]和[1,6]。\n> -在x = 11处发射箭，击破气球[10,16]和[7,12]。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：points = [[1,2],[3,4],[5,6],[7,8]]\n> 输出：4\n> 解释：每个气球需要射出一支箭，总共需要4支箭。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：points = [[1,2],[2,3],[3,4],[4,5]]\n> 输出：2\n> 解释：气球可以用2支箭来爆破:\n> - 在x = 2处发射箭，击破气球[1,2]和[2,3]。\n> - 在x = 4处射出箭，击破气球[3,4]和[4,5]。\n> ```\n>\n> \n>\n> \n>\n> **提示:**\n>\n> - `1 <= points.length <= 105`\n> - `points[i].length == 2`\n> - `-231 <= xstart < xend <= 231 - 1`\n>\n> Related Topics\n>\n> 贪心\n>\n> 数组\n>\n> 排序\n\n```java\n\n```\n\n\n\n## <span id=\"head18\">🟡435. 无重叠区间</span>\n\n## <span id=\"head19\">🟡763. 划分字母区间</span>\n\n## <span id=\"head20\">🟡56. 合并区间</span>\n\n# <span id=\"head21\"> 其他</span>\n\n## <span id=\"head22\">🟡53. 最大子数组和</span>\n\n## <span id=\"head23\"> 🟡134.加油站</span>\n\n## <span id=\"head24\">🟠968. 监控二叉树</span>\n","categories":["algorithm"]},{"title":"8. Back Traking","url":"/2023/09/23/23-11-19-algorithm-backtraking/","content":"\n|         分类         | 编号 | 是否完成 | 题号                              | 标签     |\n| :------------------: | ---- | :------: | :-------------------------------- | -------- |\n|   [ 组合](#head1)    | 1    |    ✅     | [🟡77. 组合](#head2)               | 回溯     |\n|                      | 2    |    ✅     | [ 🟡17.电话号码的字母组合](#head3) | 回溯     |\n|                      |      |    ✅     | [🟡216. 组合总和 III](#head22)     | 回溯     |\n|                      | 3    |    ✅     | [ 🟡39.组合总和](#head4)           | 回溯     |\n|                      | 4    |    ✅     | [🟡40. 组合总和 II](#head5)        | 回溯     |\n|   [ 分割](#head7)    | 5    |    ✅     | [🟡131. 分割回文串](#head8)        | 回溯     |\n|                      | 6    |    ✅     | [🟡93. 复原 IP 地址](#head9)       | 回溯     |\n|   [ 子集](#head10)   | 7    |    ✅     | [🟡78. 子集](#head11)              | 回溯     |\n|                      | 8    |    ✅     | [🟡90. 子集 II](#head12)           | 回溯     |\n|                      | 9    |    ✅     | [🟡491. 递增子序列](#head13)       | 回溯     |\n|   [ 排列](#head14)   | 10   |    ✅     | [ 🟡46.全排列](#head15)            | 回溯     |\n|                      | 11   |    ✅     | [🟡47. 全排列 II](#head16)         | 回溯     |\n| [ 棋盘问题](#head17) | 12   |    ✅     | [🟠51. N 皇后](#head18)            | 回溯     |\n|                      | 13   |    ✅     | [🟠37. 解数独](#head19)            | 二维回溯 |\n|   [ 其他](#head20)   | 14   |          | [🟠332. 重新安排行程](#head21)     |          |\n\n# <span id=\"head1\"> 组合</span>\n\n## <span id=\"head2\">🟡77. 组合</span>\n\n> 给定两个整数 `n` 和 `k`，返回范围 `[1, n]` 中所有可能的 `k` 个数的组合。\n>\n> 你可以按 **任何顺序** 返回答案。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：n = 4, k = 2\n> 输出：\n> [\n> [2,4],\n> [3,4],\n> [2,3],\n> [1,2],\n> [1,3],\n> [1,4],\n> ]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：n = 1, k = 1\n> 输出：[[1]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= n <= 20`\n> - `1 <= k <= n`\n>\n> Related Topics\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>> res=new ArrayList<>();\n    LinkedList<Integer> path=new LinkedList<>();\n    public List<List<Integer>> combine(int n, int k) {\n        backtracking(n,k,1);\n        return res;\n    }\n\n    void backtracking(int n, int k, int num) {\n        if (path.size()==k) {\n            res.add(new ArrayList(path));\n            return;\n        }\n        for (int i=num;i<=n;i++) {\n            path.add(i);\n            backtracking(n,k,i+1); // 递归\n            path.removeLast();\n        }\n    }\n}\n```\n\n## <span id=\"head3\"> 🟡17.电话号码的字母组合</span>\n\n> 给定一个仅包含数字 `2-9` 的字符串，返回所有它能表示的字母组合。答案可以按 **任意顺序** 返回。\n>\n> 给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。\n>\n> ![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/11/09/200px-telephone-keypad2svg.png)\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：digits = \"23\"\n> 输出：[\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：digits = \"\"\n> 输出：[]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：digits = \"2\"\n> 输出：[\"a\",\"b\",\"c\"]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `0 <= digits.length <= 4`\n> - `digits[i]` 是范围 `['2', '9']` 的一个数字。\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 回溯\n\n```java\nclass Solution {\n    List<String> res=new ArrayList<>();\n    StringBuilder path=new StringBuilder();\n    String[]string={\"abc\",\"def\",\"ghi\",\"jkl\",\"mno\",\"pqrs\",\"tuv\",\"wxyz\"};\n    public List<String> letterCombinations(String digits) {\n        if(digits.length()==0){\n            return res;\n        }\n        backtraking(0,digits);//\n        return res;\n    }\n    void backtraking(int num,String digits){//\n        if(path.length()==digits.length()){\n            res.add(path.toString());\n            return;\n        }\n        for (int i = 0; i < string[digits.charAt(num)-'2'].length(); i++) {//\n            path.append(string[digits.charAt(num)-'2'].charAt(i));//\n            backtraking(num+1,digits);//\n            path.deleteCharAt(path.length()-1);\n        }\n    }\n}\n```\n\n## <span id=\"head22\"> 🟡216. 组合总和 III</span>\n\n> 找出所有相加之和为 `n` 的 `k` 个数的组合，且满足下列条件：\n>\n> - 只使用数字1到9\n> - 每个数字 **最多使用一次**\n>\n> 返回 *所有可能的有效组合的列表* 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: k = 3, n = 7\n> 输出: [[1,2,4]]\n> 解释:\n> 1 + 2 + 4 = 7\n> 没有其他符合的组合了。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: k = 3, n = 9\n> 输出: [[1,2,6], [1,3,5], [2,3,4]]\n> 解释:\n> 1 + 2 + 6 = 9\n> 1 + 3 + 5 = 9\n> 2 + 3 + 4 = 9\n> 没有其他符合的组合了。\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: k = 4, n = 1\n> 输出: []\n> 解释: 不存在有效的组合。\n> 在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 > 1，没有有效的组合。\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `2 <= k <= 9`\n> - `1 <= n <= 60`\n>\n> Related Topics\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>>res=new ArrayList<>();\n    LinkedList<Integer>path=new LinkedList<>();\n    public List<List<Integer>> combinationSum3(int k, int n) {\n        backtracking(k,n,1,0);\n        return res;\n    }\n    void backtracking(int k,int n,int start,int sum){\n        if(path.size()==k&&sum==n){\n            res.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i <= 9; i++) {\n            path.add(i);\n            sum+=i;\n            backtracking(k,n,i+1,sum);\n            path.removeLast();\n            sum-=i;\n        }\n    }\n}\n```\n\n## <span id=\"head4\"> 🟡39.组合总和</span>\n\n> 给你一个 **无重复元素** 的整数数组 `candidates` 和一个目标整数 `target` ，找出 `candidates` 中可以使数字和为目标数 `target` 的 所有 **不同组合** ，并以列表形式返回。你可以按 **任意顺序** 返回这些组合。\n>\n> `candidates` 中的 **同一个** 数字可以 **无限制重复被选取** 。如果至少一个数字的被选数量不同，则两种组合是不同的。\n>\n> 对于给定的输入，保证和为 `target` 的不同组合数少于 `150` 个。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：candidates = [2,3,6,7], target = 7\n> 输出：[[2,2,3],[7]]\n> 解释：\n> 2 和 3 可以形成一组候选，2 + 2 + 3 = 7 。注意 2 可以使用多次。\n> 7 也是一个候选， 7 = 7 。\n> 仅有这两种组合。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入: candidates = [2,3,5], target = 8\n> 输出: [[2,2,2,2],[2,3,3],[3,5]]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入: candidates = [2], target = 1\n> 输出: []\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= candidates.length <= 30`\n> - `2 <= candidates[i] <= 40`\n> - `candidates` 的所有元素 **互不相同**\n> - `1 <= target <= 40`\n>\n> Related Topics\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>> res=new ArrayList<>();\n    LinkedList<Integer> path=new LinkedList<>();\n    public List<List<Integer>> combinationSum(int[] candidates, int target){\n        Arrays.sort(candidates);\n        backtracking(candidates,target,0,0);\n        return res;\n    }\n    void backtracking(int[] candidates,int target,int start,int sum){\n        if(sum==target) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i < candidates.length ; i++) {\n            if(sum+candidates[i]>target){\n                break;\n            }\n            path.add(candidates[i]);\n            backtracking(candidates,target,i,sum+candidates[i]);\n            path.removeLast();\n        }\n    }\n}\n```\n\n## <span id=\"head5\">🟡40. 组合总和 II</span>\n\n> 给定一个候选人编号的集合 `candidates` 和一个目标数 `target` ，找出 `candidates` 中所有可以使数字和为 `target` 的组合。\n>\n> `candidates` 中的每个数字在每个组合中只能使用 **一次** 。\n>\n> **注意：**解集不能包含重复的组合。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: candidates = [10,1,2,7,6,1,5], target = 8,\n> 输出:\n> [\n> [1,1,6],\n> [1,2,5],\n> [1,7],\n> [2,6]\n> ]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: candidates = [2,5,2,1,2], target = 5,\n> 输出:\n> [\n> [1,2,2],\n> [5]\n> ]\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= candidates.length <= 100`\n> - `1 <= candidates[i] <= 50`\n> - `1 <= target <= 30`\n>\n> Related Topics\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer> > res=new ArrayList<>();\n    LinkedList<Integer> path=new LinkedList<>();\n    public List<List<Integer>> combinationSum2(int[] candidates, int target){\n        Arrays.sort(candidates);\n        backtracking(candidates,target,0,0);\n        return res;\n    }\n    void backtracking(int[] candidates,int target,int start,int sum){\n        if(sum==target) {\n            res.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start; i < candidates.length ; i++) {\n            if(sum+candidates[i]>target){\n                break;\n            }\n            if(i>start&&candidates[i]==candidates[i-1]){//key：同一层的树节点去重\n                continue;\n            }\n            path.add(candidates[i]);\n            sum+=candidates[i];\n            backtracking(candidates,target,i+1,sum);\n            path.removeLast();\n            sum-=candidates[i];\n        }\n    }\n}\n```\n\n## <span id=\"head8\">🟡131. 分割回文串</span>\n\n> 给你一个字符串 `s`，请你将 `s` 分割成一些子串，使每个子串都是 **回文串** 。返回 `s` 所有可能的分割方案。\n>\n> **回文串** 是正着读和反着读都一样的字符串。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = \"aab\"\n> 输出：[[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = \"a\"\n> 输出：[[\"a\"]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= s.length <= 16`\n> - `s` 仅由小写英文字母组成\n>\n> Related Topics\n>\n> 字符串\n>\n> 动态规划\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<String>> res=new ArrayList<>();\n    LinkedList<String> path=new LinkedList<>();\n    public List<List<String>> partition(String s) {\n        if(s.length()==1){\n            path.add(s);\n            res.add(path);\n            return res;\n        }\n        backtraking(0,s);//\n        return res;\n    }\n    void backtraking(int start,String s){//\n        if(start==s.length()){\n            res.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = start+1; i <= s.length(); i++) {//\n            if(isHuiWen(s.substring(start,i))){\n                path.add(s.substring(start,i));//\n                backtraking(i,s);//\n                path.removeLast();\n            }\n        }\n    }\n    boolean isHuiWen(String str){\n        int i=0,j=str.length()-1;\n        if(j==0){\n            return true;\n        }\n        if(j<0){\n            return false;\n        }\n        while(i<j){\n            if(str.charAt(i)!=str.charAt(j)){\n                return false;\n            }\n            i++;\n            j--;\n        }\n        return true;\n    }\n}\n```\n\n## <span id=\"head9\">🟡93. 复原 IP 地址</span>\n\n> **有效 IP 地址** 正好由四个整数（每个整数位于 `0` 到 `255` 之间组成，且不能含有前导 `0`），整数之间用 `'.'` 分隔。\n>\n> - 例如：`\"0.1.2.201\"` 和` \"192.168.1.1\"` 是 **有效** IP 地址，但是 `\"0.011.255.245\"`、`\"192.168.1.312\"` 和 `\"192.168@1.1\"` 是 **无效** IP 地址。\n>\n> 给定一个只包含数字的字符串 `s` ，用以表示一个 IP 地址，返回所有可能的**有效 IP 地址**，这些地址可以通过在 `s` 中插入 `'.'` 来形成。你 **不能** 重新排序或删除 `s` 中的任何数字。你可以按 **任何** 顺序返回答案。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = \"25525511135\"\n> 输出：[\"255.255.11.135\",\"255.255.111.35\"]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = \"0000\"\n> 输出：[\"0.0.0.0\"]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：s = \"101023\"\n> 输出：[\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= s.length <= 20`\n> - `s` 仅由数字组成\n>\n> Related Topics\n>\n> 字符串\n>\n> 回溯\n\n```java\nclass Solution {\n    List<String>res=new ArrayList<>();\n    LinkedList<Integer>path=new LinkedList<>();\n    public List<String> restoreIpAddresses(String s) {\n        backtraking(0,s);//\n        return res;\n    }\n    void backtraking(int start,String s){//\n        if(path.size()==4&&start==s.length()){\n            res.add(build((path)));//\n            return;\n        }\n        if(path.size()>4){\n            return;\n        }\n        for (int i = start+1; i <=s.length(); i++) {\n            if(s.substring(start,i).length()>1&&s.substring(start,i).charAt(0)=='0'){\n                break;\n            }\n            int temp=convert(s.substring(start,i));\n            if(temp<=255&&temp>=0){\n                path.add(temp);\n                backtraking(i,s);\n                path.removeLast();\n            }\n        }\n    }\n    String build(LinkedList<Integer> al){\n        StringBuilder sb=new StringBuilder();\n        sb.append(al.get(0));\n        for (int i = 1; i < 4; i++) {\n            sb.append('.');\n            sb.append(al.get(i));\n        }\n        return sb.toString();\n    }\n    int convert(String str){\n        int out=0,k=1,i=str.length()-1;\n        while(i>=0){\n            out+=k*(str.charAt(i)-'0');\n            k*=10;\n            i--;\n        }\n        return out;\n    }\n}\n```\n\n\n\n# <span id=\"head10\"> 子集</span>\n\n## <span id=\"head11\">🟡78. 子集</span>\n\n> 给你一个整数数组 `nums` ，数组中的元素 **互不相同** 。返回该数组所有可能的子集（幂集）。\n>\n> 解集 **不能** 包含重复的子集。你可以按 **任意顺序** 返回解集。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,2,3]\n> 输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [0]\n> 输出：[[],[0]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 10`\n> - `-10 <= nums[i] <= 10`\n> - `nums` 中的所有元素 **互不相同**\n>\n> Related Topics\n>\n> 位运算\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>>res=new ArrayList<>();\n    LinkedList<Integer>path=new LinkedList<>();\n    public List<List<Integer>> subsets(int[] nums) {\n        backtraking(0,nums);\n        return res;\n    }\n    void backtraking(int start,int[]nums){\n        res.add(new ArrayList<>(path));\n        for (int i = start; i < nums.length; i++) {\n            path.add(nums[i]);\n            backtraking(i+1,nums);\n            path.removeLast();\n        }\n    }\n}\n```\n\n\n\n## <span id=\"head12\">🟡90. 子集 II</span>\n\n> 给你一个整数数组 `nums` ，其中可能包含重复元素，请你返回该数组所有可能的子集（幂集）。\n>\n> 解集 **不能** 包含重复的子集。返回的解集中，子集可以按 **任意顺序** 排列。\n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,2,2]\n> 输出：[[],[1],[1,2],[1,2,2],[2],[2,2]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [0]\n> 输出：[[],[0]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 10`\n> - `-10 <= nums[i] <= 10`\n>\n> Related Topics\n>\n> 位运算\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>>res=new ArrayList<>();\n    LinkedList<Integer> path=new LinkedList<>();\n    public List<List<Integer>> subsetsWithDup(int[] nums) {\n        Arrays.sort(nums);\n        backtraking(0,nums);\n        return res;\n    }\n    void backtraking(int start,int[]nums){\n        res.add(new ArrayList<>(path));\n        for (int i = start; i < nums.length; i++) {\n            if(i>start&&nums[i]==nums[i-1]){\n                continue;\n            }\n            path.add(nums[i]);\n            backtraking(i+1,nums);\n            path.removeLast();\n        }\n    }\n}\n```\n\n## <span id=\"head13\">🟡491. 递增子序列</span>\n\n> 给你一个整数数组 `nums` ，找出并返回所有该数组中不同的递增子序列，递增子序列中 **至少有两个元素** 。你可以按 **任意顺序** 返回答案。\n>\n> 数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [4,6,7,7]\n> 输出：[[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [4,4,3,2,1]\n> 输出：[[4,4]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 15`\n> - `-100 <= nums[i] <= 100`\n>\n> Related Topics\n>\n> 位运算\n>\n> 数组\n>\n> 哈希表\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>>res=new ArrayList<>();\n    LinkedList<Integer> path=new LinkedList<>();\n    Set<String>set=new TreeSet<>();\n    public List<List<Integer>> findSubsequences(int[] nums) {\n        backtraking(0,nums);\n        return res;\n    }\n    void backtraking(int start,int[]nums){\n        if(check(path)&&!set.contains(path.toString())){\n            res.add(new ArrayList<>(path));\n            set.add(path.toString());\n        }\n\n        for (int i = start; i < nums.length; i++) {\n            if(i>start&&nums[i]==nums[i-1]){\n                continue;\n            }\n            path.add(nums[i]);\n            backtraking(i+1,nums);\n            path.removeLast();\n        }\n    }\n    boolean check(List<Integer>al){\n        if(al.size()<2){\n            return false;\n        }\n        for (int i = 1; i < al.size(); i++) {\n            if(al.get(i)<al.get(i-1)){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n\n\n# <span id=\"head14\"> 排列</span>\n\n## <span id=\"head15\"> 🟡46.全排列</span>\n\n> 给定一个不含重复数字的数组 `nums` ，返回其 *所有可能的全排列* 。你可以 **按任意顺序** 返回答案。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,2,3]\n> 输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [0,1]\n> 输出：[[0,1],[1,0]]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：nums = [1]\n> 输出：[[1]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 6`\n> - `-10 <= nums[i] <= 10`\n> - `nums` 中的所有整数 **互不相同**\n>\n> Related Topics\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>>res=new ArrayList<>();\n    LinkedList<Integer>path=new LinkedList<>();\n    boolean[] used;\n    public List<List<Integer>> permute(int[] nums) {\n        int len= nums.length;\n        if(len==0){\n            return res;\n        }\n        used=new boolean[len];\n        backtraking(nums);\n        return res;\n    }\n    void backtraking(int[]nums){\n        if(path.size()==nums.length){\n            res.add(new ArrayList<>(path));\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if(used[i]){\n                continue;\n            }\n            path.add(nums[i]);\n            used[i]=true;\n            backtraking(nums);\n            path.removeLast();\n            used[i]=false;\n        }\n    }\n}\n```\n\n\n\n## <span id=\"head16\">🟡47. 全排列 II</span>\n\n> 给定一个可包含重复数字的序列 `nums` ，***按任意顺序*** 返回所有不重复的全排列。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,1,2]\n> 输出：\n> [[1,1,2],\n> [1,2,1],\n> [2,1,1]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [1,2,3]\n> 输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 8`\n> - `-10 <= nums[i] <= 10`\n>\n> Related Topics\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<Integer>>res=new ArrayList<>();\n    LinkedList<Integer>path=new LinkedList<>();\n    Set<String>set=new TreeSet<>();\n    boolean[] used;\n    public List<List<Integer>> permuteUnique(int[] nums) {\n        int len= nums.length;\n        if(len==0){\n            return res;\n        }\n        used=new boolean[len];\n        backtraking(nums);\n        return res;\n    }\n    void backtraking(int[]nums){\n        if(path.size()==nums.length&&!set.contains(path.toString())){\n            res.add(new ArrayList<>(path));\n            set.add(path.toString());\n            return;\n        }\n        for (int i = 0; i < nums.length; i++) {\n            if(used[i]){\n                continue;\n            }\n            path.add(nums[i]);\n            used[i]=true;\n            backtraking(nums);\n            path.removeLast();\n            used[i]=false;\n        }\n    }\n}\n```\n\n# <span id=\"head17\"> 棋盘问题</span>\n\n## <span id=\"head18\">🟠51. N 皇后</span>\n\n> 按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。\n>\n> **n 皇后问题** 研究的是如何将 `n` 个皇后放置在 `n×n` 的棋盘上，并且使皇后彼此之间不能相互攻击。\n>\n> 给你一个整数 `n` ，返回所有不同的 **n 皇后问题** 的解决方案。\n>\n> 每一种解法包含一个不同的 **n 皇后问题** 的棋子放置方案，该方案中 `'Q'` 和 `'.'` 分别代表了皇后和空位。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/11/13/queens.jpg)\n>\n> ```\n> 输入：n = 4\n> 输出：[[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n> 解释：如上图所示，4 皇后问题存在两个不同的解法。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：n = 1\n> 输出：[[\"Q\"]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= n <= 9`\n>\n> Related Topics\n>\n> 数组\n>\n> 回溯\n\n```java\nclass Solution {\n    List<List<String>> res=new ArrayList<>();\n    LinkedList<String> path=new LinkedList<>();\n    public List<List<String>> solveNQueens(int n) {\n        backtraking(0,n);\n        return res;\n    }\n    void backtraking(int start,int n){\n        if(path.size()==n){\n            res.add(new ArrayList<>(path));\n        }\n        for (int i = 0; i < n; i++) {\n            boolean flag=true;//\n            for (int j = 0; j < path.size(); j++) {\n                int index=path.get(j).indexOf('Q');\n                if(index==i){\n                    flag=false;\n                }\n                if(Math.abs(index-i)==Math.abs(j- path.size())){\n                    flag=false;\n                }\n            }\n            if(flag){\n                path.add(build(n,i));\n                backtraking(i+1,n);\n                path.removeLast();\n            }\n        }\n    }\n    String build(int n,int k){\n        StringBuilder sb=new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            if(i==k){\n                sb.append(\"Q\");\n            }else{\n                sb.append(\".\");\n            }\n        }\n        return sb.toString();\n    }\n}\n```\n\n\n\n## <span id=\"head19\">🟠37. 解数独</span>\n\n> 编写一个程序，通过填充空格来解决数独问题。\n>\n> 数独的解法需 **遵循如下规则**：\n>\n> 1. 数字 `1-9` 在每一行只能出现一次。\n> 2. 数字 `1-9` 在每一列只能出现一次。\n> 3. 数字 `1-9` 在每一个以粗实线分隔的 `3x3` 宫内只能出现一次。（请参考示例图）\n>\n> 数独部分空格内已填入了数字，空白格用 `'.'` 表示。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](23-11-19-algorithm-backtraking/250px-sudoku-by-l2g-20050714svg.png)\n>\n> ```\n> 输入：board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n> 输出：[[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n> 解释：输入的数独如上图所示，唯一有效的解决方案如下所示：\n> ```\n>\n> ![img](23-11-19-algorithm-backtraking/250px-sudoku-by-l2g-20050714_solutionsvg.png)\n>\n> \n>\n> **提示：**\n>\n> - `board.length == 9`\n> - `board[i].length == 9`\n> - `board[i][j]` 是一位数字或者 `'.'`\n> - 题目数据 **保证** 输入数独仅有一个解\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 回溯\n>\n> 矩阵\n\n```java\nclass Solution {\n    public void solveSudoku(char[][] board) {\n        backtraking(board);\n        return;\n    }\n    boolean backtraking(char[][] board){\n        for (int i = 0; i < 9; i++) {\n            for (int j = 0; j < 9; j++) {\n                if(board[i][j]!='.'){\n                    continue;\n                }else{\n                    for (char k = '1'; k <= '9'; k++) {\n                        if(check(i,j,k,board)){\n                            board[i][j]=k;\n                            if(backtraking(board)){\n                                return true;\n                            }\n                            board[i][j]='.';\n                        }\n                    }\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    boolean check(int i,int j,char k,char[][] board){\n        for (int l = 0; l < 9; l++) {\n            if(board[i][l]==k){\n                return false;\n            }\n            if(board[l][j]==k){\n                return false;\n            }\n        }\n        int row=(i/3)*3,col=(j/3)*3;\n        for (int l = 0; l < 3; l++) {\n            for (int m = 0; m < 3; m++) {\n                if(board[row+l][col+m]==k){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n\n\n# <span id=\"head20\"> 其他</span>\n\n## <span id=\"head21\">🟠332. 重新安排行程</span>\n\n> 给你一份航线列表 `tickets` ，其中 `tickets[i] = [fromi, toi]` 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。\n>\n> 所有这些机票都属于一个从 `JFK`（肯尼迪国际机场）出发的先生，所以该行程必须从 `JFK` 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。\n>\n> - 例如，行程 `[\"JFK\", \"LGA\"]` 与 `[\"JFK\", \"LGB\"]` 相比就更小，排序更靠前。\n>\n> 假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg)\n>\n> ```\n> 输入：tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n> 输出：[\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg)\n>\n> ```\n> 输入：tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n> 输出：[\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n> 解释：另一种有效的行程是 [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] ，但是它字典排序更大更靠后。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= tickets.length <= 300`\n> - `tickets[i].length == 2`\n> - `fromi.length == 3`\n> - `toi.length == 3`\n> - `fromi` 和 `toi` 由大写英文字母组成\n> - `fromi != toi`\n>\n> Related Topics\n>\n> 深度优先搜索\n>\n> 图\n>\n> 欧拉回路\n\n```java\n\n```\n\n","categories":["algorithm"]},{"title":"7.BiTree","url":"/2023/09/22/23-11-19-algorithm-bitree/","content":"\n|                分类                | 编号 | 是否完成 | 题号                                                | 标签                 |\n| :--------------------------------: | ---- | :------: | :-------------------------------------------------- | -------------------- |\n|    [二叉树遍历方式    ](#head1)    | 1    |    ✅     | [ 🟢144.二叉树的前序遍历](#head2)                    | 递归  用栈迭代       |\n|                                    | 2    |    ✅     | [ 🟢145.二叉树的后序遍历](#head3)                    | 递归  用栈迭代       |\n|                                    | 3    |    ✅     | [ 🟢94.二叉树的中序遍历](#head4)                     | 递归  用栈和指针迭代 |\n|                                    | 4    |    ✅     | [ 🟡102.二叉树的层序遍历](#head5)                    | dfs 队列             |\n|                                    | 5    |    ✅     | [ 🟡107.二叉树的层次遍历II](#head6)                  | 队列(层序遍历)       |\n|                                    | 6    |    ✅     | [ 🟡199.二叉树的右视图](#head7)                      | 队列(层序遍历)       |\n|                                    | 7    |    ✅     | [ 🟢637.二叉树的层平均值](#head8)                    | 队列(层序遍历)       |\n|                                    | 8    |    ✅     | [ 🟡429.N叉树的层序遍历](#head9)                     | 队列(层序遍历)       |\n|                                    | 9    |    ✅     | [ 🟡515.在每个树行中找最大值](#head10)               | 队列(层序遍历)       |\n|                                    | 10   |    ✅     | [ 🟡116.填充每个节点的下一个右侧节点指针](#head11)   | 队列(层序遍历)       |\n|                                    | 11   |    ✅     | [ 🟡117.填充每个节点的下一个右侧节点指针II](#head12) | 队列(层序遍历)       |\n|     [二叉树属性     ](#head13)     | 12   |    ✅     | [🟢101. 对称二叉树](#head14)                         | 队列                 |\n|                                    | 13   |    ✅     | [ 🟢104.二叉树的最大深度](#head15)                   | 队列(层序遍历)       |\n|                                    | 14   |    ✅     | [ 🟢111.二叉树的最小深度](#head16)                   | 队列(层序遍历)       |\n|                                    | 15   |    ✅     | [ 🟡222.完全二叉树的节点个数](#head17)               | 栈                   |\n|                                    | 16   |    ✅     | [ 🟢110.平衡二叉树](#head18)                         | 栈(后序遍历)         |\n|                                    | 17   |    ✅     | [ 🟢257.二叉树的所有路径](#head19)                   | 回溯+递归            |\n|                                    | 18   |    ✅     | [ 🟢404.左叶子之和](#head20)                         | 栈                   |\n|                                    | 19   |    ✅     | [ 🟡513.找树左下角的值](#head21)                     | 队列 层序遍历        |\n|                                    | 20   |    ✅     | [ 🟢112.路径总和](#head22)                           | 回溯+递归            |\n| [二叉树的修改与构建     ](#head23) | 21   |    ✅     | [ 🟢226.翻转二叉树](#head24)                         | 递归                 |\n|                                    | 22   |    ✅     | [ 🟡106.从中序与后序遍历序列构造二叉树](#head25)     | dfs                  |\n|                                    | 23   |    ✅     | [ 🟡105.从前序与中序遍历序列构造二叉树](#head26)     | dfs                  |\n|                                    | 24   |    ✅     | [ 🟡654.最大二叉树](#head27)                         | dfs                  |\n|                                    | 25   |    ✅     | [ 🟢617.合并二叉树](#head28)                         | dfs                  |\n| [求搜索二叉树的属性     ](#head29) | 26   |    ✅     | [ 🟢700.二叉搜索树中的搜索](#head30)                 | 递归                 |\n|                                    | 27   |    ✅     | [ 🟡98.验证二叉搜索树](#head31)                      | 栈(中序遍历)         |\n|                                    | 28   |    ✅     | [ 🟢530.二叉搜索树的最小绝对差](#head32)             | 栈(中序遍历)         |\n|                                    | 29   |    ✅     | [ 🟢501.二叉搜索树中的众数](#head33)                 | 哈希表 栈            |\n|                                    | 30   |    ✅     | [ 🟡538.把二叉搜索树转换为累加树](#head34)           | 栈                   |\n|  [二叉树公共祖先问题   ](#head35)  | 31   |    ✅     | [ 🟡236.二叉树的最近公共祖先](#head36)               | 回溯                 |\n|                                    | 32   |    ✅     | [🟡235.二叉搜索树的最近公共祖先  ](#head37)          | 回溯                 |\n| [二叉搜索树的修改与构造 ](#head38) | 33   |    ✅     | [ 🟡701.二叉搜索树中的插入操作](#head39)             | dfs                  |\n|                                    | 34   |    ✅     | [ 🟡450.删除二叉搜索树中的节点](#head40)             | 搜索二叉树删除节点   |\n|                                    | 35   |    ✅     | [ 🟡669.修剪二叉搜索树](#head41)                     | 搜索二叉树删除节点   |\n|                                    | 36   |    ✅     | [ 🟢108.将有序数组转换为二叉搜索树](#head42)         | dfs                  |\n\n# <span id=\"head1\">二叉树遍历方式    </span>\n\n## <span id=\"head2\"> 🟢144.二叉树的前序遍历</span>\n\n> 给你二叉树的根节点 `root` ，返回它节点值的 **前序** 遍历。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg)\n>\n> ```\n> 输入：root = [1,null,2,3]\n> 输出：[1,2,3]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [1]\n> 输出：[1]\n> ```\n>\n> **示例 4：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg)\n>\n> ```\n> 输入：root = [1,2]\n> 输出：[1,2]\n> ```\n>\n> **示例 5：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg)\n>\n> ```\n> 输入：root = [1,null,2]\n> 输出：[1,2]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目在范围 `[0, 100]` 内\n> - `-100 <= Node.val <= 100`\n>\n> \n>\n> **进阶：**递归算法很简单，你可以通过迭代算法完成吗？\n>\n> Related Topics\n>\n> 栈\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉树\n\n递归遍历\n\n```java\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> result=new ArrayList<>();\n        preorder(root,result);\n        return result;\n    }\n    void preorder(TreeNode root, List<Integer> res){\n       if(root==null) {\n           return;\n       }\n       res.add(root.val);\n       preorder(root.left,res);\n       preorder(root.right,res);\n    }\n}\n```\n\n用栈迭代遍历(中→右→左)\n\n```java\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> res=new ArrayList<>();\n        if(root==null){\n            return res;\n        }\n        Stack<TreeNode> s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.pop();\n            res.add(node.val);\n            if(node.right!=null){\n                s.push(node.right);\n            }\n            if(node.left!=null){\n                s.push(node.left);\n            }\n        }\n        return res;\n    }\n}\n```\n\n统一迭代法遍历(背)\n\n```java\nclass Solution {\n    public List<Integer> preorderTraversal(TreeNode root) {\n        List<Integer> res = new LinkedList<>();\n        Stack<TreeNode> s = new Stack<>();\n        if(root!=null)s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.peek();\n            if(node!=null){\n                s.pop();\n                if(node.right!=null){\n                    s.push(node.right);\n                }\n                if(node.left!=null){\n                    s.push(node.left);\n                }\n                s.push(node);\n                s.push(null);\n            }else{\n                s.pop();//排出null\n                node=s.pop();\n                res.add(node.val);\n            }\n        }\n\n        return res;\n    }\n}\n```\n\n## <span id=\"head3\"> 🟢145.二叉树的后序遍历</span>\n\n> 给你一棵二叉树的根节点 `root` ，返回其节点值的 **后序遍历** 。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/08/28/pre1.jpg)\n>\n> ```\n> 输入：root = [1,null,2,3]\n> 输出：[3,2,1]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [1]\n> 输出：[1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数目在范围 `[0, 100]` 内\n> - `-100 <= Node.val <= 100`\n>\n> \n>\n> **进阶：**递归算法很简单，你可以通过迭代算法完成吗？\n>\n> Related Topics\n>\n> 栈\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉树\n\n递归实现\n\n```java\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> result=new ArrayList<>();\n        postorder(root,result);\n        return result;\n    }\n    void postorder(TreeNode root,List<Integer> res){\n        if(root==null){\n            return;\n        }\n        postorder(root.left,res);\n        postorder(root.right,res);\n        res.add(root.val);\n    }\n}\n```\n\n用栈迭代遍历(中→左→右,整体反转)\n\n```java\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> res=new ArrayList<>();\n        if(root==null){\n            return res;\n        }\n        Stack<TreeNode> s=new Stack<TreeNode>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node = s.pop();\n            res.add(node.val);\n            if(node.left!=null){\n                s.push(node.left);\n            }\n            if(node.right!=null){\n                s.push(node.right);\n            }\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n统一迭代法遍历(背)\n\n```java\nclass Solution {\n    public List<Integer> postorderTraversal(TreeNode root) {\n        List<Integer> res = new LinkedList<>();\n        Stack<TreeNode> s = new Stack<>();\n        if(root!=null){\n            s.push(root);\n        }\n        while(!s.isEmpty()){\n            TreeNode node=s.peek();\n            if(node!=null){\n                s.pop();\n                s.push(node);\n                s.push(null);\n                if(node.right!=null){\n                    s.push(node.right);\n                }\n                if(node.left!=null){\n                    s.push(node.left);\n                }\n            }else{\n                s.pop();\n                node=s.pop();\n                res.add(node.val);\n            }\n        }\n        return res;\n    }\n}\n```\n\n## <span id=\"head4\"> 🟢94.二叉树的中序遍历</span>\n\n> 给定一个二叉树的根节点 `root` ，返回 *它的 **中序** 遍历* 。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg)\n>\n> ```\n> 输入：root = [1,null,2,3]\n> 输出：[1,3,2]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [1]\n> 输出：[1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目在范围 `[0, 100]` 内\n> - `-100 <= Node.val <= 100`\n>\n> \n>\n> **进阶:** 递归算法很简单，你可以通过迭代算法完成吗？\n>\n> Related Topics\n>\n> 栈\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉树\n\n递归遍历\n\n```java\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> result=new ArrayList<>();\n        inorder(root,result);\n        return result;\n    }\n    void inorder(TreeNode r,List<Integer> res){\n        if(r==null){\n            return;\n        };\n        inorder(r.left,res);\n        res.add(r.val);\n        inorder(r.right,res);\n    }\n\n}\n```\n\n用栈和指针迭代遍历(左→右)(背)\n\n```java\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new LinkedList<>();\n        Stack<TreeNode> s = new Stack<>();\n        TreeNode cur=root;\n        while(cur!=null||!s.isEmpty()){\n            if(cur!=null){\n                s.push(cur);\n                cur=cur.left;\n            }else{\n                cur=s.pop();\n                res.add(cur.val);\n                cur=cur.right;\n            }\n        }\n        return res;\n    }\n}\n```\n\n统一迭代法遍历(背)\n\n```java\nclass Solution {\n    public List<Integer> inorderTraversal(TreeNode root) {\n        List<Integer> res = new LinkedList<>();\n        Stack<TreeNode> s = new Stack<>();\n        if(root!=null){\n            s.push(root);\n        }\n        while(!s.empty()){\n            TreeNode node=s.peek();\n            if(node!=null){\n                s.pop();\n                if(node.right!=null){\n                    s.push(node.right);\n                }\n                s.push(node);\n                s.push(null);\n                if(node.left!=null){\n                    s.push(node.left);\n                }\n            }else{\n                s.pop();\n                node=s.pop();\n                res.add(node.val);\n            }\n        }\n        return res;\n    }\n}\n```\n\n## <span id=\"head5\"> 🟡102.二叉树的层序遍历</span>\n\n> 给你二叉树的根节点 `root` ，返回其节点值的 **层序遍历** 。 （即逐层地，从左到右访问所有节点）。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n>\n> ```\n> 输入：root = [3,9,20,null,null,15,7]\n> 输出：[[3],[9,20],[15,7]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [1]\n> 输出：[[1]]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目在范围 `[0, 2000]` 内\n> - `-1000 <= Node.val <= 1000`\n>\n> Related Topics\n>\n> 树\n>\n> 广度优先搜索\n>\n> 二叉树\n\n递归方式层序遍历\n\n```java\nclass Solution {\n    List<List<Integer>> res=new ArrayList<>();\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        levelorder(root,0);\n        return res;\n    }\n    void levelorder(TreeNode node, int deep){\n        if (node == null) {\n            return;\n        }\n        deep++;\n        if (res.size() < deep) {\n            List<Integer> item = new ArrayList<Integer>();\n            res.add(item);\n        }\n        res.get(deep - 1).add(node.val);\n        levelorder(node.left, deep);\n        levelorder(node.right, deep);\n    }\n}\n```\n\n非递归方式运用队列层序遍历\n\n```java\nclass Solution {\n    public List<List<Integer>> levelOrder(TreeNode root) {\n        List<List<Integer>> res=new ArrayList<>();\n        Queue<TreeNode> q=new LinkedList<>();\n        if(root==null){\n            return res;\n        }\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            List<Integer> l=new ArrayList<>();\n            while(len-->0){\n                TreeNode node=q.poll();\n                l.add(node.val);\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n            res.add(l);\n        }\n        return res;\n    }\n}\n```\n\n## <span id=\"head6\"> 🟡107.二叉树的层次遍历II</span>\n\n> 给你二叉树的根节点 `root` ，返回其节点值 **自底向上的层序遍历** 。 （即按从叶子节点所在层到根节点所在的层，逐层从左向右遍历）\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n>\n> ```\n> 输入：root = [3,9,20,null,null,15,7]\n> 输出：[[15,7],[9,20],[3]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [1]\n> 输出：[[1]]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目在范围 `[0, 2000]` 内\n> - `-1000 <= Node.val <= 1000`\n>\n> Related Topics\n>\n> 树\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public List<List<Integer>> levelOrderBottom(TreeNode root) {\n        List<List<Integer>> res=new ArrayList<>();\n        Queue<TreeNode> q=new LinkedList<>();\n        if(root==null){\n            return res;\n        }\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            List<Integer> l=new ArrayList<>();\n            while(len-->0){\n                TreeNode node=q.poll();\n                l.add(node.val);\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n            res.add(l);\n        }\n        Collections.reverse(res);\n        return res;\n    }\n}\n```\n\n## <span id=\"head7\"> 🟡199.二叉树的右视图</span>\n\n> 给定一个二叉树的 **根节点** `root`，想象自己站在它的右侧，按照从顶部到底部的顺序，返回从右侧所能看到的节点值。\n>\n> \n>\n> **示例 1:**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/14/tree.jpg)\n>\n> ```\n> 输入: [1,2,3,null,5,null,4]\n> 输出: [1,3,4]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: [1,null,3]\n> 输出: [1,3]\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: []\n> 输出: []\n> ```\n>\n> \n>\n> **提示:**\n>\n> - 二叉树的节点个数的范围是 `[0,100]`\n> - `-100 <= Node.val <= 100`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public List<Integer> rightSideView(TreeNode root) {\n        List<Integer>res=new ArrayList<>();\n        if(root==null){\n            return res;\n        }\n        Queue<TreeNode>q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            while(len-->1){\n                TreeNode node=q.poll();\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n            TreeNode node=q.poll();\n            res.add(node.val);\n            if(node.left!=null){\n                q.offer(node.left);\n            }\n            if(node.right!=null){\n                q.offer(node.right);\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head8\"> 🟢637.二叉树的层平均值</span>\n\n> 给定一个非空二叉树的根节点 `root` , 以数组的形式返回每一层节点的平均值。与实际答案相差 `10-5` 以内的答案可以被接受。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg)\n>\n> ```\n> 输入：root = [3,9,20,null,null,15,7]\n> 输出：[3.00000,14.50000,11.00000]\n> 解释：第 0 层的平均值为 3,第 1 层的平均值为 14.5,第 2 层的平均值为 11 。\n> 因此返回 [3, 14.5, 11] 。\n> ```\n>\n> **示例 2:**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg)\n>\n> ```\n> 输入：root = [3,9,20,15,7]\n> 输出：[3.00000,14.50000,11.00000]\n> ```\n>\n> \n>\n> **提示：**\n>\n> \n>\n> - 树中节点数量在 `[1, 104]` 范围内\n> - `-231 <= Node.val <= 231 - 1`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public List<Double> averageOfLevels(TreeNode root) {\n        List<Double> res=new ArrayList<>();\n        if(root==null){\n            return res;\n        }\n        Queue<TreeNode>q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            double sum=0,cnt=len;\n            while(len-->0){\n                TreeNode node=q.poll();\n                sum+=node.val;\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n            res.add(sum/cnt);\n        }\n        return res;\n    }\n}\n```\n\n## <span id=\"head9\"> 🟡429.N叉树的层序遍历</span>\n\n> 给定一个 N 叉树，返回其节点值的*层序遍历*。（即从左到右，逐层遍历）。\n>\n> 树的序列化输入是用层序遍历，每组子节点都由 null 值分隔（参见示例）。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png)\n>\n> ```\n> 输入：root = [1,null,3,2,4,null,5,6]\n> 输出：[[1],[3,2,4],[5,6]]\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png)\n>\n> ```\n> 输入：root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n> 输出：[[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树的高度不会超过 `1000`\n> - 树的节点总数在 `[0, 10^4]` 之间\n>\n> Related Topics\n>\n> 树\n>\n> 广度优先搜索\n\n```java\nclass Solution {\n    public List<List<Integer>> levelOrder(Node root) {\n        List<List<Integer>> res=new LinkedList<>();\n        if(root==null){\n            return res;\n        }\n        Queue<Node>q=new LinkedList<>() ;\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            List<Integer>l=new LinkedList<>();\n            while(len-->0){\n                Node node=q.poll();\n                l.add(node.val);\n                List<Node> n=node.children;\n                for (int i = 0; i < n.size(); i++) {\n                    q.offer(n.get(i));\n                }\n            }\n            res.add(l);\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head10\"> 🟡515.在每个树行中找最大值</span>\n\n> 给定一棵二叉树的根节点 `root` ，请找出该二叉树中每一层的最大值。\n>\n> \n>\n> **示例1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg)\n>\n> ```\n> 输入: root = [1,3,2,5,3,null,9]\n> 输出: [1,3,9]\n> ```\n>\n> **示例2：**\n>\n> ```\n> 输入: root = [1,2,3]\n> 输出: [1,3]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 二叉树的节点个数的范围是 `[0,104]`\n> - `-231 <= Node.val <= 231 - 1`\n>\n> \n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public List<Integer> largestValues(TreeNode root) {\n        List<Integer> res=new LinkedList<>();\n        if(root==null){\n            return res;\n        }\n        Queue<TreeNode>q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            int max=Integer.MIN_VALUE;\n            while(len-->0){\n                TreeNode node=q.poll();\n                if(node.val>max){\n                    max=node.val;\n                }\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n            res.add(max);\n        }\n        return res;\n    }\n}\n```\n\n## <span id=\"head11\"> 🟡116.填充每个节点的下一个右侧节点指针</span>\n\n> 给定一个 **完美二叉树** ，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下：\n>\n> ```\n> struct Node {\n> int val;\n> Node *left;\n> Node *right;\n> Node *next;\n> }\n> ```\n>\n> 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 `NULL`。\n>\n> 初始状态下，所有 next 指针都被设置为 `NULL`。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2019/02/14/116_sample.png)\n>\n> ```\n> 输入：root = [1,2,3,4,5,6,7]\n> 输出：[1,#,2,3,#,4,5,6,7,#]\n> 解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化的输出按层序遍历排列，同一层节点由 next 指针连接，'#' 标志着每一层的结束。\n> ```\n>\n> \n>\n> **示例 2:**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数量在 `[0, 212 - 1]` 范围内\n> - `-1000 <= node.val <= 1000`\n>\n> \n>\n> **进阶：**\n>\n> - 你只能使用常量级额外空间。\n> - 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 链表\n>\n> 二叉树\n\n```java\nclass Solution {\n    public Node connect(Node root) {\n        if(root==null){\n            return root;\n        }\n        root.next=null;\n        Queue<Node>q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            while(len-->1){\n                Node node=q.poll();\n                node.next=q.peek();\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }                \n            }\n            Node node=q.poll();\n            node.next=null;\n            if(node.left!=null){\n                q.offer(node.left);\n            }\n            if(node.right!=null){\n                q.offer(node.right);\n            }\n        }\n        return root;\n    }\n}\n```\n\n\n\n## <span id=\"head12\"> 🟡117.填充每个节点的下一个右侧节点指针II</span>\n\n> 给定一个二叉树：\n>\n> ```\n> struct Node {\n> int val;\n> Node *left;\n> Node *right;\n> Node *next;\n> }\n> ```\n>\n> 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 `NULL` 。\n>\n> 初始状态下，所有 next 指针都被设置为 `NULL` 。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2019/02/15/117_sample.png)\n>\n> ```\n> 输入：root = [1,2,3,4,5,null,7]\n> 输出：[1,#,2,3,#,4,5,7,#]\n> 解释：给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。序列化输出按层序遍历顺序（由 next 指针连接），'#' 表示每层的末尾。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中的节点数在范围 `[0, 6000]` 内\n> - `-100 <= Node.val <= 100`\n>\n> **进阶：**\n>\n> - 你只能使用常量级额外空间。\n> - 使用递归解题也符合要求，本题中递归程序的隐式栈空间不计入额外空间复杂度。\n>\n> \n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 链表\n>\n> 二叉树\n\n同上一题的代码,一字没动.\n\n```java\nclass Solution {\n    public Node connect(Node root) {\n        if(root==null){\n            return root;\n        }\n        root.next=null;\n        Queue<Node>q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            while(len-->1){\n                Node node=q.poll();\n                node.next=q.peek();\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }                \n            }\n            Node node=q.poll();\n            node.next=null;\n            if(node.left!=null){\n                q.offer(node.left);\n            }\n            if(node.right!=null){\n                q.offer(node.right);\n            }\n        }\n        return root;\n    }\n}\n```\n\n# <span id=\"head13\">二叉树属性     </span>\n\n## <span id=\"head14\">🟢101. 对称二叉树</span>\n\n> 给你一个二叉树的根节点 `root` ， 检查它是否轴对称。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg)\n>\n> ```\n> 输入：root = [1,2,2,3,4,4,3]\n> 输出：true\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg)\n>\n> ```\n> 输入：root = [1,2,2,null,3,null,3]\n> 输出：false\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目在范围 `[1, 1000]` 内\n> - `-100 <= Node.val <= 100`\n>\n> \n>\n> **进阶：**你可以运用递归和迭代两种方法解决这个问题吗？\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public boolean isSymmetric(TreeNode root) {\n        Queue<TreeNode> q=new LinkedList<>();\n        q.offer(root.left);\n        q.offer(root.right);\n        while(!q.isEmpty()){\n            TreeNode leftnode=q.poll();\n            TreeNode rightnode=q.poll();\n            if(leftnode==null&&rightnode==null){\n                continue;\n            }\n            if(leftnode==null||rightnode==null||leftnode.val!=rightnode.val){\n                return false;\n            }\n            q.offer(leftnode.left);\n            q.offer(rightnode.right);\n            q.offer(leftnode.right);\n            q.offer(rightnode.left);\n        }\n        return true;\n    }\n}\n```\n\n\n\n## <span id=\"head15\"> 🟢104.二叉树的最大深度</span>\n\n> 给定一个二叉树 `root` ，返回其最大深度。\n>\n> 二叉树的 **最大深度** 是指从根节点到最远叶子节点的最长路径上的节点数。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg)\n>\n> \n>\n> ```\n> 输入：root = [3,9,20,null,null,15,7]\n> 输出：3\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [1,null,2]\n> 输出：2\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数量在 `[0, 104]` 区间内。\n> - `-100 <= Node.val <= 100`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public int maxDepth(TreeNode root) {\n        int res=0;\n        if(root==null){\n            return res;\n        }\n        Queue<TreeNode>q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            while(len-->0){\n                TreeNode node=q.poll();\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n            res++;\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head16\"> 🟢111.二叉树的最小深度</span>\n\n> 给定一个二叉树，找出其最小深度。\n>\n> 最小深度是从根节点到最近叶子节点的最短路径上的节点数量。\n>\n> **说明：**叶子节点是指没有子节点的节点。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg)\n>\n> ```\n> 输入：root = [3,9,20,null,null,15,7]\n> 输出：2\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [2,null,3,null,4,null,5,null,6]\n> 输出：5\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数的范围在 `[0, 105]` 内\n> - `-1000 <= Node.val <= 1000`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public int minDepth(TreeNode root) {\n        int res=0;\n        if(root==null){\n            return res;\n        }\n        Queue<TreeNode>q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            while(len-->0){\n                TreeNode node=q.poll();\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n                if(node.left==null&&node.right==null){\n                    return res+1;\n                }\n            }\n            res++;\n        }\n        return res;\n    }\n}\n```\n\n## <span id=\"head17\"> 🟡222.完全二叉树的节点个数</span>\n\n> 给你一棵 **完全二叉树** 的根节点 `root` ，求出该树的节点个数。\n>\n> [完全二叉树](https://baike.baidu.com/item/完全二叉树/7773232?fr=aladdin) 的定义如下：在完全二叉树中，除了最底层节点可能没填满外，其余每层节点数都达到最大值，并且最下面一层的节点都集中在该层最左边的若干位置。若最底层为第 `h` 层，则该层包含 `1~ 2h` 个节点。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/01/14/complete.jpg)\n>\n> ```\n> 输入：root = [1,2,3,4,5,6]\n> 输出：6\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = []\n> 输出：0\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [1]\n> 输出：1\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数目范围是`[0, 5 * 104]`\n> - `0 <= Node.val <= 5 * 104`\n> - 题目数据保证输入的树是 **完全二叉树**\n>\n> \n>\n> **进阶：**遍历树来统计节点是一种时间复杂度为 `O(n)` 的简单解决方案。你可以设计一个更快的算法吗？\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二分查找\n>\n> 二叉树\n\n```java\nclass Solution {\n    public int countNodes(TreeNode root) {\n        int res=0;\n        if(root==null){\n            return res;\n        }\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.peek();\n            if(node!=null){\n                s.pop();\n                if(node.right!=null){\n                    s.push(node.right);\n                }\n                if(node.left!=null){\n                    s.push(node.left);\n                }                \n                s.push(node);\n                s.push(null);\n\n            }else{\n                s.pop();\n                node=s.pop();\n                res++;\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head18\"> 🟢110.平衡二叉树</span>\n\n> 给定一个二叉树，判断它是否是高度平衡的二叉树。\n>\n> 本题中，一棵高度平衡二叉树定义为：\n>\n> > 一个二叉树*每个节点* 的左右两个子树的高度差的绝对值不超过 1 。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg)\n>\n> ```\n> 输入：root = [3,9,20,null,null,15,7]\n> 输出：true\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg)\n>\n> ```\n> 输入：root = [1,2,2,3,3,null,null,4,4]\n> 输出：false\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = []\n> 输出：true\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中的节点数在范围 `[0, 5000]` 内\n> - `-104 <= Node.val <= 104`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n\n    public boolean isBalanced(TreeNode root) {\n        if(root==null){\n            return true;\n        }\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.peek();\n            if(node!=null){\n                s.pop();\n                s.push(node);\n                s.push(null);\n                if(node.right!=null){\n                    s.push(node.right);\n                }\n                if(node.left!=null){\n                    s.push(node.left);\n                }\n\n            }else{\n                s.pop();\n                node=s.pop();\n                change(node);\n                if(node.left==null&&node.right==null){\n                    continue;\n                }else if(node.left==null){\n                    if(node.right.val>1){\n                        return false;\n                    }\n                }else if(node.right==null){\n                    if(node.left.val>1){\n                        return false;\n                    }\n                }else{\n                    if(Math.abs(node.left.val-node.right.val)>1){\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    void change(TreeNode root){\n        if(root.left==null&&root.right==null){\n            root.val=1;\n        }else if(root.left==null){\n            root.val=1+root.right.val;\n        }else if(root.right==null){\n            root.val=1+root.left.val;\n        }else{\n            root.val=1+Math.max(root.left.val,root.right.val);\n        }\n    }\n}\n```\n\n\n\n## <span id=\"head19\"> 🟢257.二叉树的所有路径</span>\n\n> 给你一个二叉树的根节点 `root` ，按 **任意顺序** ，返回所有从根节点到叶子节点的路径。\n>\n> **叶子节点** 是指没有子节点的节点。\n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg)\n>\n> ```\n> 输入：root = [1,2,3,null,5]\n> 输出：[\"1->2->5\",\"1->3\"]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [1]\n> 输出：[\"1\"]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数目在范围 `[1, 100]` 内\n> - `-100 <= Node.val <= 100`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 字符串\n>\n> 回溯\n>\n> 二叉树\n\n```java\nclass Solution {\n    List<String>res=new ArrayList<>();\n    LinkedList<Integer>list=new LinkedList<>();\n\n    List<String> binaryTreePaths(TreeNode root) {\n        list.add(root.val);\n        backtraking(root);\n        return res;\n    }\n    \n   void backtraking(TreeNode root){\n        if(root.left==null&&root.right==null){\n            res.add(convert(list));\n            return;\n        }\n        if(root.left!=null){\n            list.add(root.left.val);\n            backtraking(root.left);\n            list.removeLast();\n        }\n        if(root.right!=null){\n            list.add(root.right.val);\n            backtraking(root.right);\n            list.removeLast();\n        }\n    }\n    \n    String convert(List<Integer> list){\n        StringBuilder sb=new StringBuilder();\n        int i=0;\n        for (; i < list.size()-1; i++) {\n            sb.append(list.get(i)+\"->\");\n        }\n        sb.append(list.get(i));\n        return sb.toString();\n    }\n}\n```\n\n\n\n## <span id=\"head20\"> 🟢404.左叶子之和</span>\n\n> 给定二叉树的根节点 `root` ，返回所有左叶子之和。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg)\n>\n> ```\n> 输入: root = [3,9,20,null,null,15,7] \n> 输出: 24 \n> 解释: 在这个二叉树中，有两个左叶子，分别是 9 和 15，所以返回 24\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: root = [1]\n> 输出: 0\n> ```\n>\n> \n>\n> **提示:**\n>\n> - 节点数在 `[1, 1000]` 范围内\n> - `-1000 <= Node.val <= 1000`\n>\n> \n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public int sumOfLeftLeaves(TreeNode root) {\n        int res=0;\n        Stack<TreeNode>s=new Stack<>();\n        if(root==null){\n            return res;\n        }\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.pop();\n            if(node.left!=null){\n                s.push(node.left);\n                if(node.left.left==null&&node.left.right==null){\n                    res+=node.left.val;\n                }\n            }\n            if(node.right!=null){\n                s.push(node.right);\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head21\"> 🟡513.找树左下角的值</span>\n\n> 给定一个二叉树的 **根节点** `root`，请找出该二叉树的 **最底层 最左边** 节点的值。\n>\n> 假设二叉树中至少有一个节点。\n>\n> \n>\n> **示例 1:**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg)\n>\n> ```\n> 输入: root = [2,1,3]\n> 输出: 1\n> ```\n>\n> **示例 2:**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg)\n>\n> ```\n> 输入: [1,2,3,4,null,5,6,null,null,7]\n> 输出: 7\n> ```\n>\n> \n>\n> **提示:**\n>\n> - 二叉树的节点个数的范围是 `[1,104]`\n> - `-231 <= Node.val <= 231 - 1`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public int findBottomLeftValue(TreeNode root) {\n        Queue<TreeNode> q=new LinkedList<>();\n        q.offer(root);\n        int res=0;\n        while(!q.isEmpty()){\n            int len=q.size();\n            List<Integer>list=new ArrayList<>();\n            while(len-->0){\n                TreeNode node=q.poll();\n                list.add(node.val);\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n            res= list.get(0);\n        }\n        return res;\n    }\n}\n```\n\n## <span id=\"head22\"> 🟢112.路径总和</span>\n\n> 给你二叉树的根节点 `root` 和一个表示目标和的整数 `targetSum` 。判断该树中是否存在 **根节点到叶子节点** 的路径，这条路径上所有节点值相加等于目标和 `targetSum` 。如果存在，返回 `true` ；否则，返回 `false` 。\n>\n> **叶子节点** 是指没有子节点的节点。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg)\n>\n> ```\n> 输入：root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n> 输出：true\n> 解释：等于目标和的根节点到叶节点路径如上图所示。\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg)\n>\n> ```\n> 输入：root = [1,2,3], targetSum = 5\n> 输出：false\n> 解释：树中存在两条根节点到叶子节点的路径：\n> (1 --> 2): 和为 3\n> (1 --> 3): 和为 4\n> 不存在 sum = 5 的根节点到叶子节点的路径。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [], targetSum = 0\n> 输出：false\n> 解释：由于树是空的，所以不存在根节点到叶子节点的路径。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数目在范围 `[0, 5000]` 内\n> - `-1000 <= Node.val <= 1000`\n> - `-1000 <= targetSum <= 1000`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n\n    boolean res=false;\n\n    public boolean hasPathSum(TreeNode root, int targetSum) {\n        if(root==null){\n            return res;\n        }\n        backtracking(root,root.val,targetSum);\n        return res;\n    }\n\n    void backtracking(TreeNode root,int sum,int target){\n        if(res==true){\n            return;\n        }\n        if(sum==target&&root.left==null&&root.right==null){\n            res=true;\n            return;\n        }\n        if(root==null){\n            return;\n        }\n        if(root.left!=null){\n            sum+=root.left.val;\n            backtracking(root.left,sum,target);\n            sum-=root.left.val;\n        }\n        if(root.right!=null){\n            sum+=root.right.val;\n            backtracking(root.right,sum,target);\n            sum-=root.right.val;\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head23\">二叉树的修改与构建     </span>\n\n## <span id=\"head24\"> 🟢226.翻转二叉树</span>\n\n> 给你一棵二叉树的根节点 `root` ，翻转这棵二叉树，并返回其根节点。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg)\n>\n> ```\n> 输入：root = [4,2,7,1,3,6,9]\n> 输出：[4,7,2,9,6,3,1]\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg)\n>\n> ```\n> 输入：root = [2,1,3]\n> 输出：[2,3,1]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = []\n> 输出：[]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目范围在 `[0, 100]` 内\n> - `-100 <= Node.val <= 100`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode invertTree(TreeNode root) {\n        if(root==null){\n            return root;\n        }\n        swap(root);\n        invertTree(root.left);\n        invertTree(root.right);\n        return root;\n    }\n    void swap(TreeNode r){\n        TreeNode t=r.left;\n        r.left=r.right;\n        r.right=t;\n    }\n}\n```\n\n## <span id=\"head25\"> 🟡106.从中序与后序遍历序列构造二叉树</span>\n\n> 给定两个整数数组 `inorder` 和 `postorder` ，其中 `inorder` 是二叉树的中序遍历， `postorder` 是同一棵树的后序遍历，请你构造并返回这颗 *二叉树* 。\n>\n> \n>\n> **示例 1:**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/19/tree.jpg)\n>\n> ```\n> 输入：inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n> 输出：[3,9,20,null,null,15,7]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入：inorder = [-1], postorder = [-1]\n> 输出：[-1]\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= inorder.length <= 3000`\n> - `postorder.length == inorder.length`\n> - `-3000 <= inorder[i], postorder[i] <= 3000`\n> - `inorder` 和 `postorder` 都由 **不同** 的值组成\n> - `postorder` 中每一个值都在 `inorder` 中\n> - `inorder` **保证**是树的中序遍历\n> - `postorder` **保证**是树的后序遍历\n>\n> Related Topics\n>\n> 树\n>\n> 数组\n>\n> 哈希表\n>\n> 分治\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode buildTree(int[] inorder, int[] postorder) {\n        TreeNode res=new TreeNode(postorder[postorder.length-1]);\n        dfs(res,postorder,inorder,0,postorder.length-1,postorder.length-1);\n        return res;\n    }\n    //i,j:node在中序数组的范围          k:node在后序数组中的坐标\n    void dfs(TreeNode node,int[] postorder, int[] inorder,int i,int j,int k){\n        if(node==null){\n            return;\n        }\n        int index=0;\n        for (; index < inorder.length; index++) {\n            if(inorder[index]==node.val){\n                break;\n            }\n        }\n        int left_num=index-i;\n        int right_num=j-index;\n        if(left_num>0){\n            node.left=new TreeNode(postorder[k-1-right_num]);\n        }\n        if(right_num>0){\n            node.right=new TreeNode(postorder[k-1]);\n        }\n        dfs(node.left,postorder,inorder,i,index-1,k-1-right_num);\n        dfs(node.right,postorder,inorder,index+1,j,k-1);\n    }\n}\n```\n\n\n\n## <span id=\"head26\"> 🟡105.从前序与中序遍历序列构造二叉树</span>\n\n> 给定两个整数数组 `preorder` 和 `inorder` ，其中 `preorder` 是二叉树的**先序遍历**， `inorder` 是同一棵树的**中序遍历**，请构造二叉树并返回其根节点。\n>\n> \n>\n> **示例 1:**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/19/tree.jpg)\n>\n> ```\n> 输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n> 输出: [3,9,20,null,null,15,7]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: preorder = [-1], inorder = [-1]\n> 输出: [-1]\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= preorder.length <= 3000`\n> - `inorder.length == preorder.length`\n> - `-3000 <= preorder[i], inorder[i] <= 3000`\n> - `preorder` 和 `inorder` 均 **无重复** 元素\n> - `inorder` 均出现在 `preorder`\n> - `preorder` **保证** 为二叉树的前序遍历序列\n> - `inorder` **保证** 为二叉树的中序遍历序列\n>\n> Related Topics\n>\n> 树\n>\n> 数组\n>\n> 哈希表\n>\n> 分治\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode buildTree(int[] preorder, int[] inorder) {\n        TreeNode res=new TreeNode(preorder[0]);\n        dfs(res,preorder,inorder,0,preorder.length-1,0);\n        return res;\n    }\n    //i,j:node在中序数组的范围          k:node在前序数组中的坐标\n    void dfs(TreeNode node,int[] preorder, int[] inorder,int i,int j,int k){\n        if(node==null){\n            return;\n        }\n        int index=0;\n        for (; index < inorder.length; index++) {\n            if(inorder[index]==node.val){\n                break;\n            }\n        }\n        int left_num=index-i;\n        int right_num=j-index;\n        if(left_num>0){\n            node.left=new TreeNode(preorder[k+1]);\n        }\n        if(right_num>0){\n            node.right=new TreeNode(preorder[k+left_num+1]);\n        }\n        dfs(node.left,preorder,inorder,i,index-1,k+1);\n        dfs(node.right,preorder,inorder,index+1,j,k+left_num+1);\n    }\n}\n```\n\n## <span id=\"head27\"> 🟡654.最大二叉树</span>\n\n> 给定一个不重复的整数数组 `nums` 。 **最大二叉树** 可以用下面的算法从 `nums` 递归地构建:\n>\n> 1. 创建一个根节点，其值为 `nums` 中的最大值。\n> 2. 递归地在最大值 **左边** 的 **子数组前缀上** 构建左子树。\n> 3. 递归地在最大值 **右边** 的 **子数组后缀上** 构建右子树。\n>\n> 返回 *`nums` 构建的* ***最大二叉树\\*** 。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg)\n>\n> ```\n> 输入：nums = [3,2,1,6,0,5]\n> 输出：[6,3,5,null,2,0,null,null,1]\n> 解释：递归调用如下所示：\n> - [3,2,1,6,0,5] 中的最大值是 6 ，左边部分是 [3,2,1] ，右边部分是 [0,5] 。\n>     - [3,2,1] 中的最大值是 3 ，左边部分是 [] ，右边部分是 [2,1] 。\n>         - 空数组，无子节点。\n>         - [2,1] 中的最大值是 2 ，左边部分是 [] ，右边部分是 [1] 。\n>             - 空数组，无子节点。\n>             - 只有一个元素，所以子节点是一个值为 1 的节点。\n>     - [0,5] 中的最大值是 5 ，左边部分是 [0] ，右边部分是 [] 。\n>         - 只有一个元素，所以子节点是一个值为 0 的节点。\n>         - 空数组，无子节点。\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg)\n>\n> ```\n> 输入：nums = [3,2,1]\n> 输出：[3,null,2,null,1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 1000`\n> - `0 <= nums[i] <= 1000`\n> - `nums` 中的所有整数 **互不相同**\n>\n> Related Topics\n>\n> 栈\n>\n> 树\n>\n> 数组\n>\n> 分治\n>\n> 二叉树\n>\n> 单调栈\n\n```java\nclass Solution {\n    TreeNode res;\n    public TreeNode constructMaximumBinaryTree(int[] nums) {\n        res=new TreeNode(nums[getMaxIndex(nums,0, nums.length-1)]);\n        dfs(res,nums,0,nums.length-1,getMaxIndex(nums,0, nums.length-1));\n        return res;\n    }\n    void dfs(TreeNode node,int[] arr,int from,int to,int index){\n        if(from<index){\n            node.left=new TreeNode(arr[getMaxIndex(arr,from,index-1)]);\n        }\n        if(index<to){\n            node.right=new TreeNode(arr[getMaxIndex(arr,index+1,to)]);\n        }\n        if(node.left!=null){\n            dfs(node.left,arr,from,index-1,getMaxIndex(arr,from,index-1));\n        }\n        if(node.right!=null){\n            dfs(node.right,arr,index+1,to,getMaxIndex(arr,index+1,to));\n        }\n    }\n    int getMaxIndex(int[]arr,int i,int j){\n        if(i==j){\n            return i;\n        }\n        int maxindex=i;\n        for (int k = i+1; k <= j; k++) {\n            if(arr[maxindex]<arr[k]){\n                maxindex=k;\n            }\n        }\n        return maxindex;\n    }\n}\n```\n\n\n\n## <span id=\"head28\"> 🟢617.合并二叉树</span>\n\n> 给你两棵二叉树： `root1` 和 `root2` 。\n>\n> 想象一下，当你将其中一棵覆盖到另一棵之上时，两棵树上的一些节点将会重叠（而另一些不会）。你需要将这两棵树合并成一棵新二叉树。合并的规则是：如果两个节点重叠，那么将这两个节点的值相加作为合并后节点的新值；否则，**不为** null 的节点将直接作为新二叉树的节点。\n>\n> 返回合并后的二叉树。\n>\n> **注意:** 合并过程必须从两个树的根节点开始。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/05/merge.jpg)\n>\n> ```\n> 输入：root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n> 输出：[3,4,5,5,4,null,7]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root1 = [1], root2 = [1,2]\n> 输出：[2,2]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 两棵树中的节点数目在范围 `[0, 2000]` 内\n> - `-104 <= Node.val <= 104`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {\n        if(root1==null){\n            return root2;\n        }\n        if(root2==null){\n            return root1;\n        }\n        root1.val+= root2.val;\n        if(root1.left==null&&root2.left!=null){\n            root1.left=new TreeNode(0);\n        }\n        if(root1.right==null&&root2.right!=null){\n            root1.right=new TreeNode(0);\n        }\n        mergeTrees(root1.left,root2.left);\n        mergeTrees(root1.right,root2.right);\n        return  root1;\n    }\n}\n```\n\n\n\n# <span id=\"head29\">求搜索二叉树的属性     </span>\n\n## <span id=\"head30\"> 🟢700.二叉搜索树中的搜索</span>\n\n> 给定二叉搜索树（BST）的根节点 `root` 和一个整数值 `val`。\n>\n> 你需要在 BST 中找到节点值等于 `val` 的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 `null` 。\n>\n> \n>\n> **示例 1:**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg)\n>\n> ```\n> 输入：root = [4,2,7,1,3], val = 2\n> 输出：[2,1,3]\n> ```\n>\n> **示例 2:**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg)\n>\n> ```\n> 输入：root = [4,2,7,1,3], val = 5\n> 输出：[]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 数中节点数在 `[1, 5000]` 范围内\n> - `1 <= Node.val <= 107`\n> - `root` 是二叉搜索树\n> - `1 <= val <= 107`\n>\n> Related Topics\n>\n> 树\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode searchBST(TreeNode root, int val) {\n        if(root==null||root.val==val){\n            return root;\n        }\n        if(val<root.val){\n            return searchBST(root.left, val);\n        }else{\n            return searchBST(root.right, val);\n        }\n    }\n}\n```\n\n## <span id=\"head31\"> 🟡98.验证二叉搜索树</span>\n\n> 给你一个二叉树的根节点 `root` ，判断其是否是一个有效的二叉搜索树。\n>\n> **有效** 二叉搜索树定义如下：\n>\n> - 节点的左子树只包含 **小于** 当前节点的数。\n> - 节点的右子树只包含 **大于** 当前节点的数。\n> - 所有左子树和右子树自身必须也是二叉搜索树。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg)\n>\n> ```\n> 输入：root = [2,1,3]\n> 输出：true\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg)\n>\n> ```\n> 输入：root = [5,1,4,null,null,3,6]\n> 输出：false\n> 解释：根节点的值是 5 ，但是右子节点的值是 4 。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目范围在`[1, 104]` 内\n> - `-231 <= Node.val <= 231 - 1`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public boolean isValidBST(TreeNode root) {\n        List<Integer>list=new ArrayList<>();\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.peek();\n            if(node!=null){\n                s.pop();\n                if(node.right!=null){\n                    s.push(node.right);\n                }\n                s.push(node);\n                s.push(null);\n                if(node.left!=null){\n                    s.push(node.left);\n                }\n            }else{\n                s.pop();\n                node=s.pop();\n                list.add(node.val);\n            }\n        }\n        for (int i = 0; i < list.size()-1; i++) {\n            if(list.get(i)>=list.get(i+1)){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n\n\n## <span id=\"head32\"> 🟢530.二叉搜索树的最小绝对差</span>\n\n> 给你一个二叉搜索树的根节点 `root` ，返回 **树中任意两不同节点值之间的最小差值** 。\n>\n> 差值是一个正数，其数值等于两值之差的绝对值。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg)\n>\n> ```\n> 输入：root = [4,2,6,1,3]\n> 输出：1\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg)\n>\n> ```\n> 输入：root = [1,0,48,null,null,12,49]\n> 输出：1\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数目范围是 `[2, 104]`\n> - `0 <= Node.val <= 105`\n>\n> \n>\n> **注意：**本题与 783 https://leetcode-cn.com/problems/minimum-distance-between-bst-nodes/ 相同\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 广度优先搜索\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public int getMinimumDifference(TreeNode root) {\n        int res=Integer.MAX_VALUE;\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        int last=root.val;\n        TreeNode p=root;\n        while(p.left!=null){\n            p=p.left;\n        }\n        while(!s.isEmpty()){\n            TreeNode node=s.peek();\n            if(node!=null){\n                s.pop();\n                if(node.right!=null){\n                    s.push(node.right);\n                }\n                s.push(node);\n                s.push(null);\n                if(node.left!=null){\n                    s.push(node.left);\n                }\n            }else{\n                s.pop();\n                node=s.pop();\n                if(Math.abs(last- node.val)<res&&Math.abs(last- node.val)!=0){\n                    res=Math.abs(last- node.val);\n                }\n                last= node.val;\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head33\"> 🟢501.二叉搜索树中的众数</span>\n\n> 给你一个含重复值的二叉搜索树（BST）的根节点 `root` ，找出并返回 BST 中的所有 [众数](https://baike.baidu.com/item/众数/44796)（即，出现频率最高的元素）。\n>\n> 如果树中有不止一个众数，可以按 **任意顺序** 返回。\n>\n> 假定 BST 满足如下定义：\n>\n> - 结点左子树中所含节点的值 **小于等于** 当前节点的值\n> - 结点右子树中所含节点的值 **大于等于** 当前节点的值\n> - 左子树和右子树都是二叉搜索树\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/03/11/mode-tree.jpg)\n>\n> ```\n> 输入：root = [1,null,2,2]\n> 输出：[2]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [0]\n> 输出：[0]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点的数目在范围 `[1, 104]` 内\n> - `-105 <= Node.val <= 105`\n>\n> \n>\n> **进阶：**你可以不使用额外的空间吗？（假设由递归产生的隐式调用栈的开销不被计算在内）\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public int[] findMode(TreeNode root) {\n        List<Integer>al=new ArrayList<>();\n        Map<Integer,Integer>map=new HashMap<>();\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.pop();\n            map.put(node.val,map.getOrDefault(node.val,0)+1);\n            if(node.right!=null){\n                s.push(node.right);\n            }\n            if(node.left!=null){\n                s.push(node.left);\n            }\n        }\n        int max=Collections.max(map.values());\n        Iterator it=map.entrySet().iterator();\n        while(it.hasNext()){\n            Map.Entry entry=(Map.Entry) it.next();\n            if((int) entry.getValue()==max){\n                al.add((int) entry.getKey());\n            }\n        }\n        int len=al.size();\n        int[]res=new int[len];\n        for (int i = 0; i < len; i++) {\n            res[i]=al.get(i);\n        }\n        return res;\n    }\n}\n```\n\n\n\n## <span id=\"head34\"> 🟡538.把二叉搜索树转换为累加树</span>\n\n> 给出二叉 **搜索** 树的根节点，该树的节点值各不相同，请你将其转换为累加树（Greater Sum Tree），使每个节点 `node` 的新值等于原树中大于或等于 `node.val` 的值之和。\n>\n> 提醒一下，二叉搜索树满足下列约束条件：\n>\n> - 节点的左子树仅包含键 **小于** 节点键的节点。\n> - 节点的右子树仅包含键 **大于** 节点键的节点。\n> - 左右子树也必须是二叉搜索树。\n>\n> **注意：**本题和 1038: https://leetcode-cn.com/problems/binary-search-tree-to-greater-sum-tree/ 相同\n>\n> \n>\n> **示例 1：**\n>\n> **![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2019/05/03/tree.png)**\n>\n> ```\n> 输入：[4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n> 输出：[30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [0,null,1]\n> 输出：[1,null,1]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [1,0,2]\n> 输出：[3,3,2]\n> ```\n>\n> **示例 4：**\n>\n> ```\n> 输入：root = [3,2,4,1]\n> 输出：[7,9,4,10]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中的节点数介于 `0` 和 `104` 之间。\n> - 每个节点的值介于 `-104` 和 `104` 之间。\n> - 树中的所有值 **互不相同** 。\n> - 给定的树为二叉搜索树。\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode convertBST(TreeNode root) {\n        if(root==null){\n            return root;\n        }\n        List<Integer>list=new ArrayList<>();\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.pop();\n            list.add(node.val);\n            if(node.left!=null){\n                s.push(node.left);\n            }\n            if(node.right!=null){\n                s.push(node.right);\n            }\n        }\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.pop();\n            int temp= node.val;\n            for (int n:\n                 list) {\n                if(n> temp){\n                    node.val+=n;\n                }\n            }\n            if(node.left!=null){\n                s.push(node.left);\n            }\n            if(node.right!=null){\n                s.push(node.right);\n            }\n        }\n        return root;\n    }\n}\n```\n\n\n\n# <span id=\"head35\">二叉树公共祖先问题   </span>\n\n## <span id=\"head36\"> 🟡236.二叉树的最近公共祖先</span>\n\n> 给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。\n>\n> [百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2018/12/14/binarytree.png)\n>\n> ```\n> 输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n> 输出：3\n> 解释：节点 5 和节点 1 的最近公共祖先是节点 3 。\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2018/12/14/binarytree.png)\n>\n> ```\n> 输入：root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n> 输出：5\n> 解释：节点 5 和节点 4 的最近公共祖先是节点 5 。因为根据定义最近公共祖先节点可以为节点本身。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [1,2], p = 1, q = 2\n> 输出：1\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数目在范围 `[2, 105]` 内。\n> - `-109 <= Node.val <= 109`\n> - 所有 `Node.val` `互不相同` 。\n> - `p != q`\n> - `p` 和 `q` 均存在于给定的二叉树中。\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉树\n\n```java\nclass Solution {\n    static LinkedList<TreeNode> l=new LinkedList<>();\n    static LinkedList<TreeNode> l1,l2;\n    static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        l.add(root);\n        backTracking(root,p,0);\n        backTracking(root,q,1);\n        int index=0;\n        while(index< l1.size()&&index<l2.size()&&l1.get(index)==l2.get(index)){\n            index++;\n        }\n        return l1.get(index-1);\n    }\n    static void backTracking(TreeNode root, TreeNode node,int num){\n        if(root==node){\n            if(num==0){\n                l1= (LinkedList) l.clone();\n            }else{\n                l2= (LinkedList) l.clone();\n            }\n            return;\n        }\n        if(root.left!=null){\n            l.add(root.left);\n            backTracking(root.left,node,num);\n            l.removeLast();\n        }\n        if(root.right!=null){\n            l.add(root.right);\n            backTracking(root.right,node,num);\n            l.removeLast();\n        }\n    }\n}\n```\n\n\n\n## <span id=\"head37\">🟡235.二叉搜索树的最近公共祖先  </span>\n\n> 给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。\n>\n> [百度百科](https://baike.baidu.com/item/最近公共祖先/8918834?fr=aladdin)中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（**一个节点也可以是它自己的祖先**）。”\n>\n> 例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5]\n>\n> ![img](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/12/14/binarysearchtree_improved.png)\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n> 输出: 6 \n> 解释: 节点 2 和节点 8 的最近公共祖先是 6。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n> 输出: 2\n> 解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。\n> ```\n>\n> \n>\n> **说明:**\n>\n> - 所有节点的值都是唯一的。\n> - p、q 为不同节点且均存在于给定的二叉搜索树中。\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    static LinkedList<TreeNode> l=new LinkedList<>();\n    static LinkedList<TreeNode> l1,l2;\n    static TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\n        l.add(root);\n        backTracking(root,p,0);\n        backTracking(root,q,1);\n        int index=0;\n        while(index< l1.size()&&index<l2.size()&&l1.get(index)==l2.get(index)){\n            index++;\n        }\n        return l1.get(index-1);\n    }\n    static void backTracking(TreeNode root, TreeNode node,int num){\n        if(root==node){\n            if(num==0){\n                l1= (LinkedList) l.clone();\n            }else{\n                l2= (LinkedList) l.clone();\n            }\n            return;\n        }\n        if(root.left!=null){\n            l.add(root.left);\n            backTracking(root.left,node,num);\n            l.removeLast();\n        }\n        if(root.right!=null){\n            l.add(root.right);\n            backTracking(root.right,node,num);\n            l.removeLast();\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head38\">二叉搜索树的修改与构造 </span>\n\n## <span id=\"head39\"> 🟡701.二叉搜索树中的插入操作</span>\n\n> 给定二叉搜索树（BST）的根节点 `root` 和要插入树中的值 `value` ，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 输入数据 **保证** ，新值和原始二叉搜索树中的任意节点值都不同。\n>\n> **注意**，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回 **任意有效的结果** 。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg)\n>\n> ```\n> 输入：root = [4,2,7,1,3], val = 5\n> 输出：[4,2,7,1,3,5]\n> 解释：另一个满足题目要求可以通过的树是：\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：root = [40,20,60,10,30,50,70], val = 25\n> 输出：[40,20,60,10,30,50,70,null,null,25]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n> 输出：[4,2,7,1,3,5]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中的节点数将在 `[0, 104]`的范围内。\n> - `-108 <= Node.val <= 108`\n> - 所有值 `Node.val` 是 **独一无二** 的。\n> - `-108 <= val <= 108`\n> - **保证** `val` 在原始BST中不存在。\n>\n> Related Topics\n>\n> 树\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode insertIntoBST(TreeNode root, int val) {\n        if(root==null){\n            return new TreeNode(val);\n        }\n        dfs(root,val);\n        return root;\n\n    }\n    void dfs(TreeNode node,int v){\n        if(v<node.val){\n            if(node.left!=null){\n                dfs(node.left,v);\n            }else{\n                node.left=new TreeNode(v);\n            }\n        }else{\n            if(node.right!=null){\n                dfs(node.right,v);\n            }else{\n                node.right=new TreeNode(v);\n            }\n        }\n    }\n}\n```\n\n\n\n## <span id=\"head40\"> 🟡450.删除二叉搜索树中的节点</span>\n\n> 给定一个二叉搜索树的根节点 **root** 和一个值 **key**，删除二叉搜索树中的 **key** 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。\n>\n> 一般来说，删除节点可分为两个步骤：\n>\n> 1. 首先找到需要删除的节点；\n> 2. 如果找到了，删除它。\n>\n> \n>\n> **示例 1:**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg)\n>\n> ```\n> 输入：root = [5,3,6,2,4,null,7], key = 3\n> 输出：[5,4,6,2,null,null,7]\n> 解释：给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。\n> 一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。\n> 另一个正确答案是 [5,2,6,null,4,null,7]。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: root = [5,3,6,2,4,null,7], key = 0\n> 输出: [5,3,6,2,4,null,7]\n> 解释: 二叉树不包含值为 0 的节点\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: root = [], key = 0\n> 输出: []\n> ```\n>\n> \n>\n> **提示:**\n>\n> - 节点数的范围 `[0, 104]`.\n> - `-105 <= Node.val <= 105`\n> - 节点值唯一\n> - `root` 是合法的二叉搜索树\n> - `-105 <= key <= 105`\n>\n> \n>\n> **进阶：** 要求算法时间复杂度为 O(h)，h 为树的高度。\n>\n> Related Topics\n>\n> 树\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode deleteNode(TreeNode root, int key) {\n        if(root==null){\n            return root;\n        }\n        if(root.val==key){\n            if(root.left==null&&root.right==null){\n                return null;\n            }else if(root.left==null){\n                return root.right;\n            } else if (root.right==null) {\n                return  root.left;\n            }else{\n                TreeNode p=root.right;\n                while(p.left!=null){\n                    p=p.left;\n                }\n                p.left=root.left;\n                return root.right;\n            }\n        }\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.pop();\n            if(node.left!=null&&node.left.val==key){\n                if(node.left.left==null&&node.left.right==null){\n                    node.left=null;\n                }else if(node.left.left==null){\n                    node.left=node.left.right;\n                } else if (node.left.right==null) {\n                    node.left=node.left.left;\n                }else{\n                    TreeNode p=node.left.right;\n                    while(p.left!=null){\n                        p=p.left;\n                    }\n                    p.left=node.left.left;\n                    node.left=node.left.right;\n                }\n            }\n            if(node.right!=null&&node.right.val==key){\n                if(node.right.left==null&&node.right.right==null){\n                    node.right=null;\n                }else if(node.right.left==null){\n                    node.right=node.right.right;\n                } else if (node.right.right==null) {\n                    node.right=node.right.left;\n                }else{\n                    TreeNode p=node.right.right;\n                    while(p.left!=null){\n                        p=p.left;\n                    }\n                    p.left=node.right.left;\n                    node.right=node.right.right;\n                }\n            }\n            if(node.right!=null){\n                s.push(node.right);\n            }\n            if(node.left!=null){\n                s.push(node.left);\n            }\n        }\n        return root;\n    }\n}\n```\n\n\n\n## <span id=\"head41\"> 🟡669.修剪二叉搜索树</span>\n\n> 给你二叉搜索树的根节点 `root` ，同时给定最小边界`low` 和最大边界 `high`。通过修剪二叉搜索树，使得所有节点的值在`[low, high]`中。修剪树 **不应该** 改变保留在树中的元素的相对结构 (即，如果没有被移除，原有的父代子代关系都应当保留)。 可以证明，存在 **唯一的答案** 。\n>\n> 所以结果应当返回修剪好的二叉搜索树的新的根节点。注意，根节点可能会根据给定的边界发生改变。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg)\n>\n> ```\n> 输入：root = [1,0,2], low = 1, high = 2\n> 输出：[1,null,2]\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg)\n>\n> ```\n> 输入：root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n> 输出：[3,2,null,1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - 树中节点数在范围 `[1, 104]` 内\n> - `0 <= Node.val <= 104`\n> - 树中每个节点的值都是 **唯一** 的\n> - 题目数据保证输入是一棵有效的二叉搜索树\n> - `0 <= low <= high <= 104`\n>\n> Related Topics\n>\n> 树\n>\n> 深度优先搜索\n>\n> 二叉搜索树\n>\n> 二叉树\n\n```java\nclass Solution {\n    public TreeNode trimBST(TreeNode root, int low, int high) {        \n        while(root!=null&&(root.val>high||root.val<low)){\n            root=modify(root);\n        }\n        if(root==null){\n            return null;\n        }\n        while(!check(root,low,high)){\n            doing(root,low,high);\n        }\n        return root;\n    }\n    static void doing(TreeNode root,int low,int high){\n        Stack<TreeNode>s=new Stack<>();\n        s.push(root);\n        while(!s.isEmpty()){\n            TreeNode node=s.pop();\n            if(node.left!=null&&(node.left.val>high||node.left.val<low)){\n                node.left=modify(node.left);\n            }\n            if(node.right!=null&&(node.right.val>high||node.right.val<low)){\n                node.right=modify(node.right);\n            }\n            if(node.right!=null){\n                s.push(node.right);\n            }\n            if(node.left!=null){\n                s.push(node.left);\n            }\n        }\n    }\n    static TreeNode modify(TreeNode node){\n        if(node.left==null&&node.right==null){\n            return null;\n        } else if (node.left==null) {\n            return node.right;\n        } else if (node.right==null) {\n            return node.left;\n        }else{\n            TreeNode p=node.right;\n            while(p.left!=null){\n                p=p.left;\n            }\n            p.left=node.left;\n            return node.right;\n        }\n    }\n    static boolean check(TreeNode root,int low,int high){\n        Queue<TreeNode> q=new LinkedList<>();\n        q.offer(root);\n        while(!q.isEmpty()){\n            int len=q.size();\n            while(len-->0){\n                TreeNode node=q.poll();\n                if(node.val>high||node.val<low){\n                    return false;\n                }\n                if(node.left!=null){\n                    q.offer(node.left);\n                }\n                if(node.right!=null){\n                    q.offer(node.right);\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\nman,竟然裂出了四个函数,官方寥寥几行的代码让我发现我没有利用搜索树的特性!!!!!\n\n```java\nclass Solution {\n    public TreeNode trimBST(TreeNode root, int low, int high) {\n        if (root == null) {\n            return null;\n        }\n        if (root.val < low) {\n            return trimBST(root.right, low, high);\n        } else if (root.val > high) {\n            return trimBST(root.left, low, high);\n        } else {\n            root.left = trimBST(root.left, low, high);\n            root.right = trimBST(root.right, low, high);\n            return root;\n        }\n    }\n}\n```\n\n\n\n## <span id=\"head42\"> 🟢108.将有序数组转换为二叉搜索树</span>\n\n> 给你一个整数数组 `nums` ，其中元素已经按 **升序** 排列，请你将其转换为一棵 **高度平衡** 二叉搜索树。\n>\n> **高度平衡** 二叉树是一棵满足「每个节点的左右两个子树的高度差的绝对值不超过 1 」的二叉树。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg)\n>\n> ```\n> 输入：nums = [-10,-3,0,5,9]\n> 输出：[0,-3,9,-10,null,5]\n> 解释：[0,-10,5,null,-3,null,9] 也将被视为正确答案：\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2021/02/18/btree.jpg)\n>\n> ```\n> 输入：nums = [1,3]\n> 输出：[3,1]\n> 解释：[1,null,3] 和 [3,1] 都是高度平衡二叉搜索树。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 104`\n> - `-104 <= nums[i] <= 104`\n> - `nums` 按 **严格递增** 顺序排列\n>\n> Related Topics\n>\n> 树\n>\n> 二叉搜索树\n>\n> 数组\n>\n> 分治\n>\n> 二叉树\n\n```   java\nclass Solution {\n    Set<Integer> set=new TreeSet<>();\n    public TreeNode sortedArrayToBST(int[] nums) {\n        TreeNode res=new TreeNode(nums[(nums.length-1)/2]);\n        set.add((nums.length-1)/2);\n        dfs(res,nums,0,nums.length-1);\n        return res;\n    }\n    void dfs(TreeNode node,int[]a,int i,int j){\n        if(node==null){\n            return;\n        }\n        int mid=(i+j)/2;\n        if(!set.contains((i+mid-1)/2)){\n            node.left=new TreeNode(a[(i+mid-1)/2]);\n            set.add((i+mid-1)/2);\n        }\n        if(!set.contains((mid+1+j)/2)){\n            node.right=new TreeNode(a[(mid+1+j)/2]);\n            set.add((mid+1+j)/2);\n        }\n        dfs(node.left,a,i,mid-1);\n        dfs(node.right,a,mid+1,j);\n    }\n}\n```\n","categories":["algorithm"]},{"title":"6.Stack & Queue","url":"/2023/09/21/23-11-19-algorithm-stackandqueue/","content":"\n|      | 是否完成 | 题号                                          | 标签         |\n| ---- | :------: | --------------------------------------------- | :----------- |\n| 1    |    ✅     | [ 🟢232.用栈实现队列](#head1)                  | 栈 队列      |\n| 2    |    ✅     | [🟢225. 用队列实现栈 ](#head2)                 | 栈 队列      |\n| 3    |    ✅     | [🟢20. 有效的括号](#head3)                     | 栈           |\n| 4    |    ✅     | [🟢1047. 删除字符串中的所有相邻重复项](#head4) | 栈           |\n| 5    |    ✅     | [🟡150. 逆波兰表达式求值](#head5)              | 栈           |\n| 6    |          | [🟠239. 滑动窗口最大值](#head6)                |              |\n| 7    |    ✅     | [🟡347.前 K 个高频元素](#head7)                | 哈希表  排序 |\n\n# <span id=\"head1\"> 🟢232.用栈实现队列</span>\n\n> 请你仅使用两个栈实现先入先出队列。队列应当支持一般队列支持的所有操作（`push`、`pop`、`peek`、`empty`）：\n>\n> 实现 `MyQueue` 类：\n>\n> - `void push(int x)` 将元素 x 推到队列的末尾\n> - `int pop()` 从队列的开头移除并返回元素\n> - `int peek()` 返回队列开头的元素\n> - `boolean empty()` 如果队列为空，返回 `true` ；否则，返回 `false`\n>\n> **说明：**\n>\n> - 你 **只能** 使用标准的栈操作 —— 也就是只有 `push to top`, `peek/pop from top`, `size`, 和 `is empty` 操作是合法的。\n> - 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：\n> [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n> [[], [1], [2], [], [], []]\n> 输出：\n> [null, null, null, 1, 1, false]\n> \n> 解释：\n> MyQueue myQueue = new MyQueue();\n> myQueue.push(1); // queue is: [1]\n> myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\n> myQueue.peek(); // return 1\n> myQueue.pop(); // return 1, queue is [2]\n> myQueue.empty(); // return false\n> ```\n>\n> \n>\n> \n>\n> **提示：**\n>\n> - `1 <= x <= 9`\n> - 最多调用 `100` 次 `push`、`pop`、`peek` 和 `empty`\n> - 假设所有操作都是有效的 （例如，一个空的队列不会调用 `pop` 或者 `peek` 操作）\n>\n> \n>\n> **进阶：**\n>\n> - 你能否实现每个操作均摊时间复杂度为 `O(1)` 的队列？换句话说，执行 `n` 个操作的总时间复杂度为 `O(n)` ，即使其中一个操作可能花费较长时间。\n>\n> Related Topics\n>\n> 栈\n>\n> 设计\n>\n> 队列\n\n```java\nclass MyQueue {\n    Stack<Integer> in;\n    Stack<Integer> out;\n\n    public MyQueue() {\n        in=new Stack<>();\n        out=new Stack<>();\n    }\n    \n    public void push(int x) {\n        in.push(x);\n    }\n    \n    public int pop() {\n        pour1();\n        int res=out.pop();\n        pour2();\n        return res;\n    }\n    \n    public int peek() {\n        pour1();\n        int res=out.peek();\n        pour2();\n        return res;\n    }\n    \n    public boolean empty() {\n        return out.empty()&&in.empty();\n    }\n\n    void pour1(){\n        while(!in.empty()){\n            out.push(in.pop());\n        }\n    }\n    void pour2(){\n        while(!out.empty()){\n            in.push(out.pop());\n        }\n    }\n\n}\n```\n\n# <span id=\"head2\">🟢225. 用队列实现栈 </span>\n\n> 请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通栈的全部四种操作（`push`、`top`、`pop` 和 `empty`）。\n>\n> 实现 `MyStack` 类：\n>\n> - `void push(int x)` 将元素 x 压入栈顶。\n> - `int pop()` 移除并返回栈顶元素。\n> - `int top()` 返回栈顶元素。\n> - `boolean empty()` 如果栈是空的，返回 `true` ；否则，返回 `false` 。\n>\n> \n>\n> **注意：**\n>\n> - 你只能使用队列的基本操作 —— 也就是 `push to back`、`peek/pop from front`、`size` 和 `is empty` 这些操作。\n> - 你所使用的语言也许不支持队列。 你可以使用 list （列表）或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。\n>\n> \n>\n> **示例：**\n>\n> ```\n> 输入：\n> [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n> [[], [1], [2], [], [], []]\n> 输出：\n> [null, null, null, 2, 2, false]\n> \n> 解释：\n> MyStack myStack = new MyStack();\n> myStack.push(1);\n> myStack.push(2);\n> myStack.top(); // 返回 2\n> myStack.pop(); // 返回 2\n> myStack.empty(); // 返回 False\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= x <= 9`\n> - 最多调用`100` 次 `push`、`pop`、`top` 和 `empty`\n> - 每次调用 `pop` 和 `top` 都保证栈不为空\n>\n> \n>\n> **进阶：**你能否仅用一个队列来实现栈。\n>\n> Related Topics\n>\n> 栈\n>\n> 设计\n>\n> 队列\n\n```java\nclass MyStack {\n    Queue<Integer>in;\n    Queue<Integer>out;\n\n    public MyStack() {\n        in = new LinkedList<>();\n        out = new LinkedList<>();\n    }\n    \n    public void push(int x) {\n        in.offer(x);\n    }\n    \n    public int pop() {\n        inToOut();\n        int res=in.poll();\n        outToIn();\n        return res;\n    }\n    \n    public int top() {\n        inToOut();\n        int res=in.peek();\n        out.offer(in.poll());\n        outToIn();\n        return res;\n    }\n    \n    public boolean empty() {\n        return in.isEmpty();\n    }\n    void inToOut(){\n        int size=in.size();\n        for (int i = 0; i < size-1; i++) {\n            out.offer(in.poll());\n        }\n    }\n    void outToIn(){\n        while(!out.isEmpty()){\n            in.offer(out.poll());\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head3\">🟢20. 有效的括号</span>\n\n> 给定一个只包括 `'('`，`')'`，`'{'`，`'}'`，`'['`，`']'` 的字符串 `s` ，判断字符串是否有效。\n>\n> 有效字符串需满足：\n>\n> 1. 左括号必须用相同类型的右括号闭合。\n> 2. 左括号必须以正确的顺序闭合。\n> 3. 每个右括号都有一个对应的相同类型的左括号。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = \"()\"\n> 输出：true\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = \"()[]{}\"\n> 输出：true\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：s = \"(]\"\n> 输出：false\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= s.length <= 104`\n> - `s` 仅由括号 `'()[]{}'` 组成\n>\n> Related Topics\n>\n> 栈\n>\n> 字符串\n\n```java\nclass Solution {\n    public boolean isValid(String s) {\n        Stack<Character> stack=new Stack<>();\n        for (char ch:\n             s.toCharArray()) {\n            if(ch=='('||ch=='{'||ch=='['){\n                stack.push(ch);\n            } else if (!stack.empty()&&(ch==')'&&stack.peek()=='('\n            ||ch=='}'&&stack.peek()=='{'\n            ||ch==']'&&stack.peek()=='[')) {\n                stack.pop();\n            } else {\n                return false;\n            }\n        }\n        if(stack.empty()){\n            return true;\n        }else{\n            return false;\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head4\">🟢1047. 删除字符串中的所有相邻重复项</span>\n\n> 给出由小写字母组成的字符串 `S`，**重复项删除操作**会选择两个相邻且相同的字母，并删除它们。\n>\n> 在 S 上反复执行重复项删除操作，直到无法继续删除。\n>\n> 在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。\n>\n> \n>\n> \n>\n> **示例：**\n>\n> ```\n> 输入：\"abbaca\"\n> 输出：\"ca\"\n> 解释：\n> 例如，在 \"abbaca\" 中，我们可以删除 \"bb\" 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 \"aaca\"，其中又只有 \"aa\" 可以执行重复项删除操作，所以最后的字符串为 \"ca\"。\n> ```\n>\n> \n>\n> **提示：**\n>\n> 1. `1 <= S.length <= 20000`\n> 2. `S` 仅由小写英文字母组成。\n>\n> Related Topics\n>\n> 栈\n>\n> 字符串\n\n```java\nclass Solution {\n    public String removeDuplicates(String s) {\n        Stack<Character> stack=new Stack<>();\n        char last;\n        for (char ch:\n                s.toCharArray()) {\n            if(stack.empty()){\n                stack.push(ch);\n                last=ch;\n            }else if(ch==stack.peek()){\n                stack.pop();\n\n            }else{\n                stack.push(ch);\n            }\n        }\n        Stack<Character> stack_=new Stack<>();\n        while(!stack.empty()){\n            stack_.push(stack.pop());\n        }\n        StringBuilder sb=new StringBuilder();\n        while(!stack_.empty()){\n            sb.append(stack_.pop());\n\n        }\n        return sb.toString();\n    }\n}\n```\n\n\n\n# <span id=\"head5\">🟡150. 逆波兰表达式求值</span>\n\n> 给你一个字符串数组 `tokens` ，表示一个根据 [逆波兰表示法](https://baike.baidu.com/item/逆波兰式/128437) 表示的算术表达式。\n>\n> 请你计算该表达式。返回一个表示表达式值的整数。\n>\n> **注意：**\n>\n> - 有效的算符为 `'+'`、`'-'`、`'*'` 和 `'/'` 。\n> - 每个操作数（运算对象）都可以是一个整数或者另一个表达式。\n> - 两个整数之间的除法总是 **向零截断** 。\n> - 表达式中不含除零运算。\n> - 输入是一个根据逆波兰表示法表示的算术表达式。\n> - 答案及所有中间计算结果可以用 **32 位** 整数表示。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n> 输出：9\n> 解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n> 输出：6\n> 解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n> 输出：22\n> 解释：该算式转化为常见的中缀算术表达式为：\n>   ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n> = ((10 * (6 / (12 * -11))) + 17) + 5\n> = ((10 * (6 / -132)) + 17) + 5\n> = ((10 * 0) + 17) + 5\n> = (0 + 17) + 5\n> = 17 + 5\n> = 22\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= tokens.length <= 104`\n> - `tokens[i]` 是一个算符（`\"+\"`、`\"-\"`、`\"*\"` 或 `\"/\"`），或是在范围 `[-200, 200]` 内的一个整数\n>\n> \n>\n> **逆波兰表达式：**\n>\n> 逆波兰表达式是一种后缀表达式，所谓后缀就是指算符写在后面。\n>\n> - 平常使用的算式则是一种中缀表达式，如 `( 1 + 2 ) * ( 3 + 4 )` 。\n> - 该算式的逆波兰表达式写法为 `( ( 1 2 + ) ( 3 4 + ) * )` 。\n>\n> 逆波兰表达式主要有以下两个优点：\n>\n> - 去掉括号后表达式无歧义，上式即便写成 `1 2 + 3 4 + * `也可以依据次序计算出正确结果。\n> - 适合用栈操作运算：遇到数字则入栈；遇到算符则取出栈顶两个数字进行计算，并将结果压入栈中\n>\n> Related Topics\n>\n> 栈\n>\n> 数组\n>\n> 数学\n\n```java\nclass Solution {\n    public int evalRPN(String[] tokens) {\n        Stack<Integer> s=new Stack<>();\n        for (String str:\n                tokens) {\n            if(str.length()==1&&str.charAt(0)=='+'){\n                int temp=s.pop()+s.pop();\n                s.push(temp);\n            } else if(str.length()==1&&str.charAt(0)=='-'){\n                int t=s.pop();\n                int temp=s.pop()-t;\n                s.push(temp);\n            }else if(str.length()==1&&str.charAt(0)=='*'){\n                int temp=s.pop()*s.pop();\n                s.push(temp);\n            }else if(str.length()==1&&str.charAt(0)=='/'){\n                int t=s.pop();\n                int temp=s.pop()/t;\n                s.push(temp);\n            }else{\n                s.push(convert(str));\n            }\n        }\n        return s.pop();\n    }\n    int convert(String str){\n        int res=0;\n        if(str.charAt(0)=='-'){\n            for (int i = str.length()-1,j=1; i >0 ; i--,j*=10) {\n                res+=(str.charAt(i)-'0')*j;\n            }\n            res*=(-1);\n        }else{\n            for (int i = str.length()-1,j=1; i >=0 ; i--,j*=10) {\n                res+=(str.charAt(i)-'0')*j;\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head6\">🟠239. 滑动窗口最大值</span>\n\n> 给你一个整数数组 `nums`，有一个大小为 `k` 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 `k` 个数字。滑动窗口每次只向右移动一位。\n>\n> 返回 *滑动窗口中的最大值* 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n> 输出：[3,3,5,5,6,7]\n> 解释：\n> 滑动窗口的位置                最大值\n> ---------------               -----\n> [1  3  -1] -3  5  3  6  7       3\n> 1 [3  -1  -3] 5  3  6  7       3\n> 1  3 [-1  -3  5] 3  6  7       5\n> 1  3  -1 [-3  5  3] 6  7       5\n> 1  3  -1  -3 [5  3  6] 7       6\n> 1  3  -1  -3  5 [3  6  7]      7\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [1], k = 1\n> 输出：[1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 105`\n> - `-104 <= nums[i] <= 104`\n> - `1 <= k <= nums.length`\n>\n> Related Topics\n>\n> 队列\n>\n> 数组\n>\n> 滑动窗口\n>\n> 单调队列\n>\n> 堆（优先队列）\n\n自己写的双指针竟然超时,why?\n\n```java\nclass Solution {\n    public int[] maxSlidingWindow(int[] nums, int k) {\n        int[]res=new int[nums.length-k+1];\n        int i=0,j=0;\n        int max=Integer.MIN_VALUE;\n        for (; i < k; i++) {//after finish this i=k\n            if(nums[i]>max){\n                max=nums[i];\n            }\n        }\n        res[0]=max;\n        int index=1;\n        while(i< nums.length&&j< nums.length){\n            if(nums[j++]<max){\n                max=Math.max(max,nums[i++]);\n            }else{\n                int temp_max=Integer.MIN_VALUE;\n                for (int l = index; l < index+k; l++) {\n                    if(nums[l]>temp_max){\n                        temp_max=nums[l];\n                    }\n                }\n                max=Math.max(temp_max,nums[i++]);                \n            }\n            res[index++]=max;\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head7\">🟡347.前 K 个高频元素</span>\n\n> 给你一个整数数组 `nums` 和一个整数 `k` ，请你返回其中出现频率前 `k` 高的元素。你可以按 **任意顺序** 返回答案。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: nums = [1,1,1,2,2,3], k = 2\n> 输出: [1,2]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: nums = [1], k = 1\n> 输出: [1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 105`\n> - `k` 的取值范围是 `[1, 数组中不相同的元素的个数]`\n> - 题目数据保证答案唯一，换句话说，数组中前 `k` 个高频元素的集合是唯一的\n>\n> \n>\n> **进阶：**你所设计算法的时间复杂度 **必须** 优于 `O(n log n)` ，其中 `n` 是数组大小。\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 分治\n>\n> 桶排序\n>\n> 计数\n>\n> 快速选择\n>\n> 排序\n>\n> 堆（优先队列）\n\n```java\nclass Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        Map<Integer,Integer> map=new TreeMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            map.put(nums[i], map.getOrDefault(nums[i],0)+1);\n        }\n        List<Map.Entry<Integer, Integer>> list = new ArrayList<Map.Entry<Integer, Integer>>(map.entrySet());\n        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {\n            @Override\n            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {\n                return o2.getValue().compareTo(o1.getValue());\n            }\n        });\n        int []res=new int[k];\n        for (int i = 0; i < k; i++) {\n            res[i]= list.get(i).getKey();\n        }\n        return res;\n\n    }\n}\n```\n\n","categories":["algorithm"]},{"title":"5. Two Pointers","url":"/2023/09/21/23-11-19-algorithm-doublepoint/","content":"\n|      | 是否完成 | 题号                                      | 标签 |\n| ---- | :------: | ----------------------------------------- | :--- |\n| 1    |          | [ 🟢27. 移除元素](#head1)                  |      |\n| 2    |          | [🟢26. 删除有序数组中的重复项  ](#head2)   |      |\n| 3    |          | [🟢283. 移动零](#head3)                    |      |\n| 4    |          | [🟢844. 比较含退格的字符串](#head4)        |      |\n| 5    |          | [🟢977. 有序数组的平方](#head5)            |      |\n| 6    |          | [🟢344. 反转字符串](#head6)                |      |\n| 7    |          | [🟢LCR 122. 路径加密](#head7)              |      |\n| 8    |          | [🟡151. 反转字符串中的单词](#head8)        |      |\n| 9    |          | [🟢206. 反转链表](#head9)                  |      |\n| 10   |          | [🟡19. 删除链表的倒数第 N 个结点](#head10) |      |\n| 11   |          | [🟢面试题 02.07. 链表相交](#head11)        |      |\n| 12   |          | [🟡142. 环形链表](#head12)                 |      |\n| 13   |          | [🟡15. 三数之和](#head13)                  |      |\n| 14   |          | [🟡18. 四数之和](#head14)                  |      |\n\n# <span id=\"head1\"> 🟢27. 移除元素</span>\n\n# <span id=\"head2\">🟢26. 删除有序数组中的重复项 </span>\n\n# <span id=\"head4\">🟢283. 移动零</span>\n\n# <span id=\"head5\">🟢844. 比较含退格的字符串</span>\n\n# <span id=\"head6\">🟢977. 有序数组的平方</span>\n\n# <span id=\"head7\">🟢344. 反转字符串</span>\n\n# <span id=\"head8\">🟢LCR 122. 路径加密</span>\n\n# <span id=\"head9\">🟡151. 反转字符串中的单词</span>\n\n# <span id=\"head10\">🟢206. 反转链表</span>\n\n# <span id=\"head11\">🟡19. 删除链表的倒数第 N 个结点</span>\n\n# <span id=\"head12\">🟢面试题 02.07. 链表相交</span>\n\n# <span id=\"head13\">🟡142. 环形链表 II</span>\n\n# <span id=\"head14\">🟡15. 三数之和</span>\n\n# <span id=\"head15\">🟡18. 四数之和</span>\n","categories":["algorithm"]},{"title":"4. Strings","url":"/2023/09/20/23-11-19-algorithm-string/","content":"\n|      | 是否完成 | 难度 | 题号                                         | 标签                                |\n| ---- | :------: | :--: | :------------------------------------------- | ----------------------------------- |\n| 1    |    ✅     |  🟢   | [ 344.反转字符串](#head1)                    | 字符串 字符数组                     |\n| 2    |    ✅     |  🟢   | [ 541.反转字符串II](#head2)                  | 字符串 字符数组                     |\n| 3    |    ✅     |  🟢   | [LCR 122. 路径加密](#head3)                  | 字符串 字符数组                     |\n| 4    |    ✅     |  🟡   | [ 151.翻转字符串里的单词](#head4)            | 去空格 字符串 字符数组 StringBuffer |\n| 5    |    ✅     |  🟢   | [LCR 182. 动态口令](#head5)                  | StringBuffer SubString              |\n| 6    |    ✅     |  🟢   | [ 28.找出字符串中第一个匹配项的下标](#head6) | 匹配                                |\n| 7    |    ✅     |  🟢   | [ 459.重复的子字符串](#head7)                | 匹配                                |\n\n# <span id=\"head1\"> 🟢344.反转字符串</span>\n\n> 编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 `s` 的形式给出。\n>\n> 不要给另外的数组分配额外的空间，你必须**[原地](https://baike.baidu.com/item/原地算法)修改输入数组**、使用 O(1) 的额外空间解决这一问题。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n> 输出：[\"o\",\"l\",\"l\",\"e\",\"h\"]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n> 输出：[\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= s.length <= 105`\n> - `s[i]` 都是 [ASCII](https://baike.baidu.com/item/ASCII) 码表中的可打印字符\n>\n> Related Topics\n>\n> 双指针\n>\n> 字符串\n\n```java\nclass Solution {\n    public void reverseString(char[] s) {\n        int i=0,j=s.length-1;\n        while(i<j){\n            char temp=s[i];\n            s[i]=s[j];\n            s[j]=temp;\n            i++;\n            j--;\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head2\"> 🟢541.反转字符串II</span>\n\n> 给定一个字符串 `s` 和一个整数 `k`，从字符串开头算起，每计数至 `2k` 个字符，就反转这 `2k` 字符中的前 `k` 个字符。\n>\n> - 如果剩余字符少于 `k` 个，则将剩余字符全部反转。\n> - 如果剩余字符小于 `2k` 但大于或等于 `k` 个，则反转前 `k` 个字符，其余字符保持原样。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = \"abcdefg\", k = 2\n> 输出：\"bacdfeg\"\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = \"abcd\", k = 2\n> 输出：\"bacd\"\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= s.length <= 104`\n> - `s` 仅由小写英文组成\n> - `1 <= k <= 104`\n>\n> Related Topics\n>\n> 双指针\n>\n> 字符串\n\n```java\nclass Solution {\n    public String reverseStr(String s, int k) {\n        char [] ca=s.toCharArray();\n        int len=s.length();\n        for(int i=0;i<len;i+=2*k){\n            reverse(ca,i,Math.min(len-1,i+k-1));\n        }\n        return String.valueOf(ca);\n\n    }\n    void reverse(char[] ch_arr,int from,int to){\n        while(from<to&&from>=0&&to< ch_arr.length){\n            char temp=ch_arr[from];\n            ch_arr[from]=ch_arr[to];\n            ch_arr[to]=temp;\n            from++;\n            to--;\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head3\">🟢LCR 122. 路径加密</span>\n\n> 假定一段路径记作字符串 `path`，其中以 \"`.`\" 作为分隔符。现需将路径加密，加密方法为将 `path` 中的分隔符替换为空格 \"` `\"，请返回加密后的字符串。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：path = \"a.aef.qerf.bb\"\n> \n> 输出：\"a aef qerf bb\"\n> ```\n>\n> \n>\n> **限制：**\n>\n> ```\n> 0 <= path.length <= 10000\n> ```\n>\n> Related Topics\n>\n> 字符串\n\n```java\nclass Solution {\n    public String pathEncryption(String path) {\n        char [] ca=path.toCharArray();\n        for (int i = 0; i < path.length(); i++) {\n            if(ca[i]=='.'){\n                ca[i]=' ';\n            }\n        }\n        return String.valueOf(ca);\n    }\n}\n```\n\n\n\n# <span id=\"head4\"> 🟡151.翻转字符串里的单词</span>\n\n> 给你一个字符串 `s` ，请你反转字符串中 **单词** 的顺序。\n>\n> **单词** 是由非空格字符组成的字符串。`s` 中使用至少一个空格将字符串中的 **单词** 分隔开。\n>\n> 返回 **单词** 顺序颠倒且 **单词** 之间用单个空格连接的结果字符串。\n>\n> **注意：**输入字符串 `s`中可能会存在前导空格、尾随空格或者单词间的多个空格。返回的结果字符串中，单词间应当仅用单个空格分隔，且不包含任何额外的空格。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = \"the sky is blue\"\n> 输出：\"blue is sky the\"\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = \"  hello world  \"\n> 输出：\"world hello\"\n> 解释：反转后的字符串中不能存在前导空格和尾随空格。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：s = \"a good   example\"\n> 输出：\"example good a\"\n> 解释：如果两个单词间有多余的空格，反转后的字符串需要将单词间的空格减少到仅有一个。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= s.length <= 104`\n> - `s` 包含英文大小写字母、数字和空格 `' '`\n> - `s` 中 **至少存在一个** 单词\n>\n> \n>\n> \n>\n> **进阶：**如果字符串在你使用的编程语言中是一种可变数据类型，请尝试使用 `O(1)` 额外空间复杂度的 **原地** 解法。\n>\n> Related Topics\n>\n> 双指针\n>\n> 字符串\n\n```java\nclass Solution {\n    public String reverseWords(String s) {\n//        1.去除多余的空格\n        int index=0;\n        StringBuilder sb=new StringBuilder();\n        while(index<s.length()&&s.charAt(index)==' '){//index指向第一个非空格字符\n            index++;\n        }\n        for (int i = index; i < s.length(); i++) {\n            if(i>0&&s.charAt(i)==' '&&s.charAt(i-1)==' '){\n                continue;\n            }else{\n                sb.append(s.charAt(i));\n            }\n        }\n        if(sb.charAt(sb.length()-1)==' '){\n            sb.deleteCharAt(sb.length()-1);\n        }\n\n//        2.反转整个字符串\n        char[] ca= sb.toString().toCharArray();\n        reverse(ca,0,ca.length-1);\n\n//        3.挨个单词反转字符串\n        int i = 0, j=0;\n        for (; i < ca.length; i++) {\n            if(ca[i]==' '){\n                reverse(ca,j,i-1);\n                j=i+1;\n            }\n        }\n        reverse(ca,j,ca.length-1);\n        return String.valueOf(ca);\n    }\n    void reverse(char[]char_arr,int from,int to) {\n        while (from < to && from < char_arr.length && to >= 0) {\n            char temp = char_arr[from];\n            char_arr[from] = char_arr[to];\n            char_arr[to] = temp;\n            from++;\n            to--;\n        }\n    }\n}\n```\n\n贴上卡哥的代码:\n\n```java\nclass Solution {\n   /**\n     * 不使用Java内置方法实现\n     * 1.去除首尾以及中间多余空格\n     * 2.反转整个字符串\n     * 3.反转各个单词\n     */\n    public String reverseWords(String s) {\n        // 1.去除首尾以及中间多余空格\n        StringBuilder sb = removeSpace(s);\n        // 2.反转整个字符串\n        reverseString(sb, 0, sb.length() - 1);\n        // 3.反转各个单词\n        reverseEachWord(sb);\n        return sb.toString();\n    }\n\n    private StringBuilder removeSpace(String s) {\n        int start = 0;\n        int end = s.length() - 1;\n        while (s.charAt(start) == ' ') start++;\n        while (s.charAt(end) == ' ') end--;\n        StringBuilder sb = new StringBuilder();\n        while (start <= end) {\n            char c = s.charAt(start);\n            if (c != ' ' || sb.charAt(sb.length() - 1) != ' ') {\n                sb.append(c);\n            }\n            start++;\n        }\n        return sb;\n    }\n\n    /**\n     * 反转字符串指定区间[start, end]的字符\n     */\n    public void reverseString(StringBuilder sb, int start, int end) {\n        while (start < end) {\n            char temp = sb.charAt(start);\n            sb.setCharAt(start, sb.charAt(end));\n            sb.setCharAt(end, temp);\n            start++;\n            end--;\n        }\n    }\n\n    private void reverseEachWord(StringBuilder sb) {\n        int start = 0;\n        int end = 1;\n        int n = sb.length();\n        while (start < n) {\n            while (end < n && sb.charAt(end) != ' ') {\n                end++;\n            }\n            reverseString(sb, start, end - 1);\n            start = end + 1;\n            end = start + 1;\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head5\">🟢LCR 182. 动态口令</span>\n\n> 某公司门禁密码使用动态口令技术。初始密码为字符串 `password`，密码更新均遵循以下步骤：\n>\n> - 设定一个正整数目标值 `target`\n> - 将 `password` 前 `target` 个字符按原顺序移动至字符串末尾\n>\n> 请返回更新后的密码字符串。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入: password = \"s3cur1tyC0d3\", target = 4\n> 输出: \"r1tyC0d3s3cu\"\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入: password = \"lrloseumgh\", target = 6\n> 输出: \"umghlrlose\"\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= target < password.length <= 10000`\n>\n> \n>\n> Related Topics\n>\n> 数学\n>\n> 双指针\n>\n> 字符串\n\n```java\nclass Solution {\n    public String dynamicPassword(String password, int target) {\n        StringBuilder res=new StringBuilder();\n        res.append(password.substring(target,password.length()));\n        res.append(password.substring(0,target));\n        return res.toString();\n    }\n}\n```\n\n\n\n# <span id=\"head6\"> 🟢28.找出字符串中第一个匹配项的下标</span>\n\n> 给你两个字符串 `haystack` 和 `needle` ，请你在 `haystack` 字符串中找出 `needle` 字符串的第一个匹配项的下标（下标从 0 开始）。如果 `needle` 不是 `haystack` 的一部分，则返回 `-1` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：haystack = \"sadbutsad\", needle = \"sad\"\n> 输出：0\n> 解释：\"sad\" 在下标 0 和 6 处匹配。\n> 第一个匹配项的下标是 0 ，所以返回 0 。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：haystack = \"leetcode\", needle = \"leeto\"\n> 输出：-1\n> 解释：\"leeto\" 没有在 \"leetcode\" 中出现，所以返回 -1 。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= haystack.length, needle.length <= 104`\n> - `haystack` 和 `needle` 仅由小写英文字符组成\n>\n> Related Topics\n>\n> 双指针\n>\n> 字符串\n>\n> 字符串匹配\n\n```java\nclass Solution {\n    public int strStr(String haystack, String needle) {\n        int index=0;\n        while(index<=haystack.length()-needle.length()){\n            while(index<haystack.length()-needle.length()&&haystack.charAt(index)!=needle.charAt(0)){\n                index++;//index指向某一个匹配短字符串首字符的位置\n            }\n            int flag=1;\n            for (int i = 0; i < needle.length(); i++) {\n                if(haystack.charAt(index+i)!=needle.charAt(i)){\n                    flag=0;\n                    break;\n                }\n            }\n            if(flag==1){\n                return index;\n            }else{\n                index++;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n\n\n# <span id=\"head7\"> 🟢459.重复的子字符串</span>\n\n> 给定一个非空的字符串 `s` ，检查是否可以通过由它的一个子串重复多次构成。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: s = \"abab\"\n> 输出: true\n> 解释: 可由子串 \"ab\" 重复两次构成。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: s = \"aba\"\n> 输出: false\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: s = \"abcabcabcabc\"\n> 输出: true\n> 解释: 可由子串 \"abc\" 重复四次构成。 (或子串 \"abcabc\" 重复两次构成。)\n> ```\n>\n> \n>\n> **提示：**\n>\n> \n>\n> - `1 <= s.length <= 104`\n> - `s` 由小写英文字母组成\n>\n> Related Topics\n>\n> 字符串\n>\n> 字符串匹配\n\n```java\nclass Solution {\n    public boolean repeatedSubstringPattern(String s) {\n        for (int i = 1; i < s.length()/2+1; i++) {\n            if(repead(s,s.substring(0,i))){\n                return true;\n            }\n        }\n        return false;\n    }\n    boolean repead(String a,String b){\n        if(a.length()%b.length()!=0){\n            return false;\n        }\n        for (int i = 0; i < a.length(); i+=b.length()) {\n            for (int j = 0; j < b.length(); j++) {\n                if(a.charAt(i+j)!=b.charAt(j)){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n}\n```\n\n","categories":["algorithm"]},{"title":"3. Hashing","url":"/2023/09/19/23-11-19-algorithm-hashtable/","content":"\n|      | 是否完成 | 难度 | 题号                                      | 标签                  |\n| ---- | :------: | :--: | :---------------------------------------- | --------------------- |\n| 1    |    ✅     |  🟢   | [ 242.有效的字母异位词](#head2)           | 哈希表                |\n| 2    |    ✅     |  🟢   | [ 383.赎金信](#head3)                     | 哈希表                |\n| 3    |    ✅     |  🟡   | [ 49.字母异位词分组](#head4)              | 哈希表                |\n| 4    |    ✅     |  🟡   | [ 438.找到字符串中所有字母异位词](#head5) | 哈希表                |\n| 5    |    ✅     |  🟢   | [349. 两个数组的交集](#head6)             | 哈希表                |\n| 6    |    ✅     |  🟢   | [350.两个数组的交集 II](#head7)           | 哈希表                |\n| 7    |    ✅     |  🟢   | [202. 快乐数](#head8)                     | 哈希表                |\n| 8    |    ✅     |  🟢   | [ 1. 两数之和](#head9)                    | 暴力 哈希表           |\n| 9    |    ✅     |  🟡   | [ 454.四数相加II](#head12)                | 哈希表                |\n| 10   |    *✅    |  🟡   | [ 15. 三数之和](#head13)                  | 哈希表(双指针 后面做) |\n| 11   |    *     |  🟡   | [18. 四数之和](#head14)                   | (双指针 后面做)       |\n\n\n\n# <span id=\"head2\"> 🟢242.有效的字母异位词</span>\n\n> 给定两个字符串 `*s*` 和 `*t*` ，编写一个函数来判断 `*t*` 是否是 `*s*` 的字母异位词。\n>\n> **注意：**若 `*s*` 和 `*t*` 中每个字符出现的次数都相同，则称 `*s*` 和 `*t*` 互为字母异位词。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: s = \"anagram\", t = \"nagaram\"\n> 输出: true\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: s = \"rat\", t = \"car\"\n> 输出: false\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= s.length, t.length <= 5 * 104`\n> - `s` 和 `t` 仅包含小写字母\n>\n> \n>\n> **进阶:** 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 排序\n\n```java\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        if(s.length()!=t.length()){\n            return false;\n        }\n        int[]hashtable=new int[26];\n        Arrays.fill(hashtable,0);        \n        for (int i = 0; i < s.length(); i++) {\n            hashtable[s.charAt(i)-'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            hashtable[t.charAt(i)-'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if(hashtable[i]!=0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n\n\n# <span id=\"head3\"> 🟢383.赎金信</span>\n\n> 给你两个字符串：`ransomNote` 和 `magazine` ，判断 `ransomNote` 能不能由 `magazine` 里面的字符构成。\n>\n> 如果可以，返回 `true` ；否则返回 `false` 。\n>\n> `magazine` 中的每个字符只能在 `ransomNote` 中使用一次。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：ransomNote = \"a\", magazine = \"b\"\n> 输出：false\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：ransomNote = \"aa\", magazine = \"ab\"\n> 输出：false\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：ransomNote = \"aa\", magazine = \"aab\"\n> 输出：true\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= ransomNote.length, magazine.length <= 105`\n> - `ransomNote` 和 `magazine` 由小写英文字母组成\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 计数\n\n```java\nclass Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        if(ransomNote.length()>magazine.length()){\n            return false;\n        }\n        int[] hashtable =new int[26];\n        Arrays.fill(hashtable,0);\n        for (int i = 0; i < ransomNote.length(); i++) {\n            hashtable[ransomNote.charAt(i)-'a']++;\n        }\n        for (int i = 0; i < magazine.length(); i++) {\n            hashtable[magazine.charAt(i)-'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if(hashtable[i]>0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n\n\n# <span id=\"head4\"> 🟡49.字母异位词分组</span>\n\n> 给你一个字符串数组，请你将 **字母异位词** 组合在一起。可以按任意顺序返回结果列表。\n>\n> **字母异位词** 是由重新排列源单词的所有字母得到的一个新单词。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n> 输出: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: strs = [\"\"]\n> 输出: [[\"\"]]\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: strs = [\"a\"]\n> 输出: [[\"a\"]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= strs.length <= 104`\n> - `0 <= strs[i].length <= 100`\n> - `strs[i]` 仅包含小写字母\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 字符串\n>\n> 排序\n\n自己一开始一口气了又臭又长的,妥妥超时:\n\n```java\nclass Solution {\n\n    public boolean equal(int[]arr1,int []arr2) {\n        for (int i = 0; i < arr1.length; i++) {\n            if(arr1[i]!=arr2[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public List<List<String>> groupAnagrams(String[] strs) {\n        List<List<String>> res=new ArrayList<>();\n\n        if(strs.length==1){\n            List<String> temp=new ArrayList<>();\n            temp.add(strs[0]);\n            res.add(temp);\n            return res;\n        }\n\n        ArrayList<int[]>hashtable=new ArrayList<>();\n        for (int i = 0; i < strs.length; i++) {\n            int [] arr=new int[26];\n            Arrays.fill(arr,0);\n            for (int j = 0; j < strs[i].length(); j++) {\n                arr[strs[i].charAt(j)-'a']++;\n            }\n            int flag=0;\n            for (int j = 0; j < hashtable.size(); j++) {\n                if(equal(hashtable.get(j),arr)){\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag==0){\n                hashtable.add(arr);\n            }\n        }\n\n        for (int i = 0; i < hashtable.size(); i++) {\n            List<String>temparr=new ArrayList<>();\n            for (int j = 0; j < strs.length; j++) {\n                int []arr=new int [26];\n                Arrays.fill(arr,0);\n                for (int k = 0; k < strs[j].length(); k++) {\n                    arr[strs[j].charAt(k)-'a']++;\n                }\n                if(equal(arr,hashtable.get(i))){\n                    temparr.add(strs[j]);\n                }\n            }\n            res.add(temparr);\n        }\n        return res;\n    }\n}\n```\n\n\n\n看了一位朋友写的题解,发现自己思维定势:\n\n1.一种用int数组做哈希表,没想过用toCharArray(),Arrays.sort()和String.valueOf()快速获得哈希表\n\n2.hashmap适合当容器,之前没想到过5555555\n\n```java\nclass Solution {\n\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String,List> res=new HashMap<>();\n        for (String s: strs) {\n            char[]ca= s.toCharArray();\n            Arrays.sort(ca);\n            String key=String.valueOf(ca);\n            if(!res.containsKey(key)){\n                res.put(key,new ArrayList<>());\n            }\n            res.get(key).add(s);\n        }\n        return new ArrayList(res.values());\n    }\n}\n```\n\n\n\n# <span id=\"head5\"> 🟡438.找到字符串中所有字母异位词</span>\n\n> 给定两个字符串 `s` 和 `p`，找到 `s` 中所有 `p` 的 **异位词** 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。\n>\n> **异位词** 指由相同字母重排列形成的字符串（包括相同的字符串）。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: s = \"cbaebabacd\", p = \"abc\"\n> 输出: [0,6]\n> 解释:\n> 起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的异位词。\n> 起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的异位词。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: s = \"abab\", p = \"ab\"\n> 输出: [0,1,2]\n> 解释:\n> 起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n> 起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的异位词。\n> 起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= s.length, p.length <= 3 * 104`\n> - `s` 和 `p` 仅包含小写字母\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 滑动窗口\n\n```java\nclass Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res=new ArrayList<Integer>();\n        if(s.length()<p.length()){\n            return res;\n        }\n        int []hashtable=new int[26];\n        Arrays.fill(hashtable,0);\n        for (int i = 0; i < p.length(); i++) {\n            hashtable[p.charAt(i)-'a']++;\n        }\n        int index=0;\n        while(index-p.length()<=s.length()){\n            int []temp=hashtable.clone();\n            for (int i = index; i < index+p.length()&&i<s.length(); i++) {\n                temp[s.charAt(i)-'a']--;\n            }\n            int flag=1;\n            for (int i = 0; i < 26; i++) {\n                if(temp[i]!=0){\n                    flag=0;\n                }\n            }\n            if(flag==1){\n                res.add(index);\n            }\n            index++;\n        }\n        return res;\n   \n```\n\n\n\n# <span id=\"head6\">🟢349. 两个数组的交集</span>\n\n> 给定两个数组 `nums1` 和 `nums2` ，返回 *它们的交集* 。输出结果中的每个元素一定是 **唯一** 的。我们可以 **不考虑输出结果的顺序** 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums1 = [1,2,2,1], nums2 = [2,2]\n> 输出：[2]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n> 输出：[9,4]\n> 解释：[4,9] 也是可通过的\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums1.length, nums2.length <= 1000`\n> - `0 <= nums1[i], nums2[i] <= 1000`\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 双指针\n>\n> 二分查找\n>\n> 排序\n\n```java\nclass Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        int[]hashtable=new int[1001];\n        Arrays.fill(hashtable,0);\n        HashSet<Integer> set=new HashSet<>();\n        for (int i = 0; i < nums1.length; i++) {\n            hashtable[nums1[i]]++;\n        }\n        for (int i = 0; i < nums2.length; i++) {\n            if(hashtable[nums2[i]]>0){\n                set.add(nums2[i]);\n            }\n        }\n        int[]res=new int[set.size()];\n        Iterator<Integer> it=set.iterator();\n        for (int i = 0; i < set.size(); i++) {\n            res[i]=it.next();\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head7\">🟢350.两个数组的交集 II</span>\n\n> 给你两个整数数组 `nums1` 和 `nums2` ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums1 = [1,2,2,1], nums2 = [2,2]\n> 输出：[2,2]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n> 输出：[4,9]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums1.length, nums2.length <= 1000`\n> - `0 <= nums1[i], nums2[i] <= 1000`\n>\n> \n>\n> ***\\*进阶\\**：**\n>\n> - 如果给定的数组已经排好序呢？你将如何优化你的算法？\n> - 如果 `nums1` 的大小比 `nums2` 小，哪种方法更优？\n> - 如果 `nums2` 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 双指针\n>\n> 二分查找\n>\n> 排序\n\n```java\nclass Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        int[]hashtable1=new int[1001];\n        int[]hashtable2=new int[1001];\n        Arrays.fill(hashtable1,0);\n        Arrays.fill(hashtable2,0);\n        for (int i = 0; i < nums1.length; i++) {\n            hashtable1[nums1[i]]++;\n        }\n        for (int i = 0; i < nums2.length; i++) {\n            hashtable2[nums2[i]]++;\n        }\n        ArrayList<Integer> al=new ArrayList<>();\n        for (int i = 0; i < 1001; i++) {\n            if(hashtable1[i]>hashtable2[i]){\n                hashtable1[i]=hashtable2[i];\n            }\n            for (int j = 0; j < hashtable1[i]; j++) {\n                al.add(i);\n            }\n        }\n        int[]res=new int[al.size()];\n        for (int i = 0; i < al.size(); i++) {\n            res[i]=al.get(i);\n        }\n        return res;\n    }\n}\n```\n\n# <span id=\"head8\">🟢202. 快乐数</span>\n\n> 编写一个算法来判断一个数 `n` 是不是快乐数。\n>\n> **「快乐数」** 定义为：\n>\n> - 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。\n> - 然后重复这个过程直到这个数变为 1，也可能是 **无限循环** 但始终变不到 1。\n> - 如果这个过程 **结果为** 1，那么这个数就是快乐数。\n>\n> 如果 `n` 是 *快乐数* 就返回 `true` ；不是，则返回 `false` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：n = 19\n> 输出：true\n> 解释：\n> 12 + 92 = 82\n> 82 + 22 = 68\n> 62 + 82 = 100\n> 12 + 02 + 02 = 1\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：n = 2\n> 输出：false\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= n <= 231 - 1`\n>\n> Related Topics\n>\n> 哈希表\n>\n> 数学\n>\n> 双指针\n\n```java\nclass Solution {\n    public boolean isHappy(int n) {\n        if(n==1){\n            return true;\n        }\n        Set<Integer> set=new HashSet<>();\n        while(true){\n            int sum=0;\n            while(n>0){\n                sum+=(n%10)*(n%10);\n                n/=10;\n            }\n            if(sum==1){\n                return true;\n            }else if(set.contains(sum)){\n                return false;\n            }else{\n                set.add(sum);\n                n=sum;\n                sum=0;\n            }\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head9\"> 🟢1. 两数之和</span>\n\n> 给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出 **和为目标值** *`target`* 的那 **两个** 整数，并返回它们的数组下标。\n>\n> 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n>\n> 你可以按任意顺序返回答案。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [2,7,11,15], target = 9\n> 输出：[0,1]\n> 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [3,2,4], target = 6\n> 输出：[1,2]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：nums = [3,3], target = 6\n> 输出：[0,1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - xxxxxxxxxx14 1public class Solution {2    public ListNode detectCycle(ListNode head) {3        ListNode p=head;4        ArrayList<ListNode>al=new ArrayList<>();5        while(p!=null){6            if(al.contains(p)){7                return p;8            }9            al.add(p);10            p=p.next;11        }12        return null;13    }14}java\n> - `-109 <= nums[i] <= 109`\n> - `-109 <= target <= 109`\n> - **只会存在一个有效答案**\n>\n> \n>\n> **进阶：**你可以想出一个时间复杂度小于 `O(n2)` 的算法吗？\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n\n第一次做的时候没有思路,只能暴力了5555555\n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[]res=new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums.length&&j!=i; j++) {\n                if(nums[i]+nums[j]==target){\n                    res[0]=i;\n                    res[1]=j;\n                    return res;\n                }\n            }\n        }\n        return null;\n    }\n}\n```\n\n对照卡哥的重新写了一个.其中值得注意的是惯常思维是key是下标,value是值.然而hashmap自带的函数只可以按照key找value,所以这道题反过来安排\n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[]res=new int[2];\n        HashMap<Integer,Integer> map=new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            if(map.containsKey(target-nums[i])){\n                res[0]=i;\n                res[1]=map.get(target-nums[i]);\n                break;\n            }\n            map.put(nums[i],i);\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head12\"> 🟡454.四数相加II</span>\n\n> 给你四个整数数组 `nums1`、`nums2`、`nums3` 和 `nums4` ，数组长度都是 `n` ，请你计算有多少个元组 `(i, j, k, l)` 能满足：\n>\n> - `0 <= i, j, k, l < n`\n> - `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n> 输出：2\n> 解释：\n> 两个元组如下：\n> 1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n> 2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n> 输出：1\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `n == nums1.length`\n> - `n == nums2.length`\n> - `n == nums3.length`\n> - `n == nums4.length`\n> - `1 <= n <= 200`\n> - `-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228`\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n\n自己写的暴力O(n4)妥妥超时,按照卡哥的代码写了,学会了:\n\nhashmap.getOrDefault(key,value)这个函数\n\n```java\nclass Solution {\n    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {\n        int cnt=0;\n        Map<Integer,Integer> map=new HashMap<>();\n        for(int i:\n                nums1){\n            for(int j:\n                    nums2){\n                map.put(i+j,map.getOrDefault(i+j,0)+1);\n            }\n        }\n        for (int k:\n                nums3) {\n            for (int l:\n                    nums4) {\n                cnt+=map.getOrDefault(0-k-l,0);\n            }\n\n        }\n        return cnt;\n    }\n}\n```\n\n\n\n# <span id=\"head13\"> 🟡15. 三数之和</span>\n\n> 给你一个整数数组 `nums` ，判断是否存在三元组 `[nums[i], nums[j], nums[k]]` 满足 `i != j`、`i != k` 且 `j != k` ，同时还满足 `nums[i] + nums[j] + nums[k] == 0` 。请\n>\n> 你返回所有和为 `0` 且不重复的三元组。\n>\n> **注意：**答案中不可以包含重复的三元组。\n>\n> \n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [-1,0,1,2,-1,-4]\n> 输出：[[-1,-1,2],[-1,0,1]]\n> 解释：\n> nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\n> nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\n> nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n> 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n> 注意，输出的顺序和三元组的顺序并不重要。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [0,1,1]\n> 输出：[]\n> 解释：唯一可能的三元组和不为 0 。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：nums = [0,0,0]\n> 输出：[[0,0,0]]\n> 解释：唯一可能的三元组和为 0 。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `3 <= nums.length <= 3000`\n> - `-105 <= nums[i] <= 105`\n>\n> Related Topics\n>\n> 数组\n>\n> 双指针\n>\n> 排序\n\n```java\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        Set<String>set=new TreeSet<>();\n        List<List<Integer>>res=new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i+1; j < nums.length; j++) {\n                if(Arrays.binarySearch(nums,0-nums[i]-nums[j])>=0&&\n                        Arrays.binarySearch(nums,0-nums[i]-nums[j])!=i&&\n                        Arrays.binarySearch(nums,0-nums[i]-nums[j])!=j){\n                    int k=Arrays.binarySearch(nums,0-nums[i]-nums[j]);\n                    int[]arr_=new int[3];\n                    arr_[0]=nums[i];\n                    arr_[1]=nums[j];\n                    arr_[2]=nums[k];\n                    Arrays.sort(arr_);\n                    String key=arr_[0]+\"\"+arr_[1]+\"\"+arr_[2];\n                    if(!set.contains(key)){\n                        List<Integer> al=new ArrayList<>();\n                        set.add(key);\n                        al.add(arr_[0]);\n                        al.add(arr_[1]);\n                        al.add(arr_[2]);\n                        res.add(al);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head14\">🟡18. 四数之和</span>\n\n> 给你一个由 `n` 个整数组成的数组 `nums` ，和一个目标值 `target` 。请你找出并返回满足下述全部条件且**不重复**的四元组 `[nums[a], nums[b], nums[c], nums[d]]` （若两个四元组元素一一对应，则认为两个四元组重复）：\n>\n> - `0 <= a, b, c, d < n`\n> - `a`、`b`、`c` 和 `d` **互不相同**\n> - `nums[a] + nums[b] + nums[c] + nums[d] == target`\n>\n> 你可以按 **任意顺序** 返回答案 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,0,-1,0,-2,2], target = 0\n> 输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [2,2,2,2,2], target = 8\n> 输出：[[2,2,2,2]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 200`\n> - `-109 <= nums[i] <= 109`\n> - `-109 <= target <= 109`\n>\n> Related Topics\n>\n> 数组\n>\n> 双指针\n>\n> 排序\n\n```java\n\n```\n\n","categories":["algorithm"]},{"title":"2. List","url":"/2023/09/13/23-9-13-algorithm-list/","content":"\n|      | 是否完成 | 难度 | 题号                                      | 标签                  |\n| ---- | :------: | :--: | :---------------------------------------- | --------------------- |\n| 1    |    ✅     |  🟢   | [ 242.有效的字母异位词](#head2)           | 哈希表                |\n| 2    |    ✅     |  🟢   | [ 383.赎金信](#head3)                     | 哈希表                |\n| 3    |    ✅     |  🟡   | [ 49.字母异位词分组](#head4)              | 哈希表                |\n| 4    |    ✅     |  🟡   | [ 438.找到字符串中所有字母异位词](#head5) | 哈希表                |\n| 5    |    ✅     |  🟢   | [349. 两个数组的交集](#head6)             | 哈希表                |\n| 6    |    ✅     |  🟢   | [350.两个数组的交集 II](#head7)           | 哈希表                |\n| 7    |    ✅     |  🟢   | [202. 快乐数](#head8)                     | 哈希表                |\n| 8    |    ✅     |  🟢   | [ 1. 两数之和](#head9)                    | 暴力 哈希表           |\n| 9    |    ✅     |  🟡   | [ 454.四数相加II](#head12)                | 哈希表                |\n| 10   |    *✅    |  🟡   | [ 15. 三数之和](#head13)                  | 哈希表(双指针 后面做) |\n| 11   |    *     |  🟡   | [18. 四数之和](#head14)                   | (双指针 后面做)       |\n\n\n\n# <span id=\"head2\"> 🟢242.有效的字母异位词</span>\n\n> 给定两个字符串 `*s*` 和 `*t*` ，编写一个函数来判断 `*t*` 是否是 `*s*` 的字母异位词。\n>\n> **注意：**若 `*s*` 和 `*t*` 中每个字符出现的次数都相同，则称 `*s*` 和 `*t*` 互为字母异位词。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: s = \"anagram\", t = \"nagaram\"\n> 输出: true\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: s = \"rat\", t = \"car\"\n> 输出: false\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= s.length, t.length <= 5 * 104`\n> - `s` 和 `t` 仅包含小写字母\n>\n> \n>\n> **进阶:** 如果输入字符串包含 unicode 字符怎么办？你能否调整你的解法来应对这种情况？\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 排序\n\n```java\nclass Solution {\n    public boolean isAnagram(String s, String t) {\n        if(s.length()!=t.length()){\n            return false;\n        }\n        int[]hashtable=new int[26];\n        Arrays.fill(hashtable,0);        \n        for (int i = 0; i < s.length(); i++) {\n            hashtable[s.charAt(i)-'a']++;\n        }\n        for (int i = 0; i < s.length(); i++) {\n            hashtable[t.charAt(i)-'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if(hashtable[i]!=0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n\n\n# <span id=\"head3\"> 🟢383.赎金信</span>\n\n> 给你两个字符串：`ransomNote` 和 `magazine` ，判断 `ransomNote` 能不能由 `magazine` 里面的字符构成。\n>\n> 如果可以，返回 `true` ；否则返回 `false` 。\n>\n> `magazine` 中的每个字符只能在 `ransomNote` 中使用一次。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：ransomNote = \"a\", magazine = \"b\"\n> 输出：false\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：ransomNote = \"aa\", magazine = \"ab\"\n> 输出：false\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：ransomNote = \"aa\", magazine = \"aab\"\n> 输出：true\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= ransomNote.length, magazine.length <= 105`\n> - `ransomNote` 和 `magazine` 由小写英文字母组成\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 计数\n\n```java\nclass Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n        if(ransomNote.length()>magazine.length()){\n            return false;\n        }\n        int[] hashtable =new int[26];\n        Arrays.fill(hashtable,0);\n        for (int i = 0; i < ransomNote.length(); i++) {\n            hashtable[ransomNote.charAt(i)-'a']++;\n        }\n        for (int i = 0; i < magazine.length(); i++) {\n            hashtable[magazine.charAt(i)-'a']--;\n        }\n        for (int i = 0; i < 26; i++) {\n            if(hashtable[i]>0){\n                return false;\n            }\n        }\n        return true;\n    }\n}\n```\n\n\n\n# <span id=\"head4\"> 🟡49.字母异位词分组</span>\n\n> 给你一个字符串数组，请你将 **字母异位词** 组合在一起。可以按任意顺序返回结果列表。\n>\n> **字母异位词** 是由重新排列源单词的所有字母得到的一个新单词。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: strs = [\"eat\", \"tea\", \"tan\", \"ate\", \"nat\", \"bat\"]\n> 输出: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: strs = [\"\"]\n> 输出: [[\"\"]]\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: strs = [\"a\"]\n> 输出: [[\"a\"]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= strs.length <= 104`\n> - `0 <= strs[i].length <= 100`\n> - `strs[i]` 仅包含小写字母\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 字符串\n>\n> 排序\n\n自己一开始一口气了又臭又长的,妥妥超时:\n\n```java\nclass Solution {\n\n    public boolean equal(int[]arr1,int []arr2) {\n        for (int i = 0; i < arr1.length; i++) {\n            if(arr1[i]!=arr2[i]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public List<List<String>> groupAnagrams(String[] strs) {\n        List<List<String>> res=new ArrayList<>();\n\n        if(strs.length==1){\n            List<String> temp=new ArrayList<>();\n            temp.add(strs[0]);\n            res.add(temp);\n            return res;\n        }\n\n        ArrayList<int[]>hashtable=new ArrayList<>();\n        for (int i = 0; i < strs.length; i++) {\n            int [] arr=new int[26];\n            Arrays.fill(arr,0);\n            for (int j = 0; j < strs[i].length(); j++) {\n                arr[strs[i].charAt(j)-'a']++;\n            }\n            int flag=0;\n            for (int j = 0; j < hashtable.size(); j++) {\n                if(equal(hashtable.get(j),arr)){\n                    flag=1;\n                    break;\n                }\n            }\n            if(flag==0){\n                hashtable.add(arr);\n            }\n        }\n\n        for (int i = 0; i < hashtable.size(); i++) {\n            List<String>temparr=new ArrayList<>();\n            for (int j = 0; j < strs.length; j++) {\n                int []arr=new int [26];\n                Arrays.fill(arr,0);\n                for (int k = 0; k < strs[j].length(); k++) {\n                    arr[strs[j].charAt(k)-'a']++;\n                }\n                if(equal(arr,hashtable.get(i))){\n                    temparr.add(strs[j]);\n                }\n            }\n            res.add(temparr);\n        }\n        return res;\n    }\n}\n```\n\n\n\n看了一位朋友写的题解,发现自己思维定势:\n\n1.一种用int数组做哈希表,没想过用toCharArray(),Arrays.sort()和String.valueOf()快速获得哈希表\n\n2.hashmap适合当容器,之前没想到过5555555\n\n```java\nclass Solution {\n\n    public List<List<String>> groupAnagrams(String[] strs) {\n        Map<String,List> res=new HashMap<>();\n        for (String s: strs) {\n            char[]ca= s.toCharArray();\n            Arrays.sort(ca);\n            String key=String.valueOf(ca);\n            if(!res.containsKey(key)){\n                res.put(key,new ArrayList<>());\n            }\n            res.get(key).add(s);\n        }\n        return new ArrayList(res.values());\n    }\n}\n```\n\n\n\n# <span id=\"head5\"> 🟡438.找到字符串中所有字母异位词</span>\n\n> 给定两个字符串 `s` 和 `p`，找到 `s` 中所有 `p` 的 **异位词** 的子串，返回这些子串的起始索引。不考虑答案输出的顺序。\n>\n> **异位词** 指由相同字母重排列形成的字符串（包括相同的字符串）。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: s = \"cbaebabacd\", p = \"abc\"\n> 输出: [0,6]\n> 解释:\n> 起始索引等于 0 的子串是 \"cba\", 它是 \"abc\" 的异位词。\n> 起始索引等于 6 的子串是 \"bac\", 它是 \"abc\" 的异位词。\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: s = \"abab\", p = \"ab\"\n> 输出: [0,1,2]\n> 解释:\n> 起始索引等于 0 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n> 起始索引等于 1 的子串是 \"ba\", 它是 \"ab\" 的异位词。\n> 起始索引等于 2 的子串是 \"ab\", 它是 \"ab\" 的异位词。\n> ```\n>\n> \n>\n> **提示:**\n>\n> - `1 <= s.length, p.length <= 3 * 104`\n> - `s` 和 `p` 仅包含小写字母\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 滑动窗口\n\n```java\nclass Solution {\n    public List<Integer> findAnagrams(String s, String p) {\n        List<Integer> res=new ArrayList<Integer>();\n        if(s.length()<p.length()){\n            return res;\n        }\n        int []hashtable=new int[26];\n        Arrays.fill(hashtable,0);\n        for (int i = 0; i < p.length(); i++) {\n            hashtable[p.charAt(i)-'a']++;\n        }\n        int index=0;\n        while(index-p.length()<=s.length()){\n            int []temp=hashtable.clone();\n            for (int i = index; i < index+p.length()&&i<s.length(); i++) {\n                temp[s.charAt(i)-'a']--;\n            }\n            int flag=1;\n            for (int i = 0; i < 26; i++) {\n                if(temp[i]!=0){\n                    flag=0;\n                }\n            }\n            if(flag==1){\n                res.add(index);\n            }\n            index++;\n        }\n        return res;\n   \n```\n\n\n\n# <span id=\"head6\">🟢349. 两个数组的交集</span>\n\n> 给定两个数组 `nums1` 和 `nums2` ，返回 *它们的交集* 。输出结果中的每个元素一定是 **唯一** 的。我们可以 **不考虑输出结果的顺序** 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums1 = [1,2,2,1], nums2 = [2,2]\n> 输出：[2]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n> 输出：[9,4]\n> 解释：[4,9] 也是可通过的\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums1.length, nums2.length <= 1000`\n> - `0 <= nums1[i], nums2[i] <= 1000`\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 双指针\n>\n> 二分查找\n>\n> 排序\n\n```java\nclass Solution {\n    public int[] intersection(int[] nums1, int[] nums2) {\n        int[]hashtable=new int[1001];\n        Arrays.fill(hashtable,0);\n        HashSet<Integer> set=new HashSet<>();\n        for (int i = 0; i < nums1.length; i++) {\n            hashtable[nums1[i]]++;\n        }\n        for (int i = 0; i < nums2.length; i++) {\n            if(hashtable[nums2[i]]>0){\n                set.add(nums2[i]);\n            }\n        }\n        int[]res=new int[set.size()];\n        Iterator<Integer> it=set.iterator();\n        for (int i = 0; i < set.size(); i++) {\n            res[i]=it.next();\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head7\">🟢350.两个数组的交集 II</span>\n\n> 给你两个整数数组 `nums1` 和 `nums2` ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums1 = [1,2,2,1], nums2 = [2,2]\n> 输出：[2,2]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n> 输出：[4,9]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums1.length, nums2.length <= 1000`\n> - `0 <= nums1[i], nums2[i] <= 1000`\n>\n> \n>\n> ***\\*进阶\\**：**\n>\n> - 如果给定的数组已经排好序呢？你将如何优化你的算法？\n> - 如果 `nums1` 的大小比 `nums2` 小，哪种方法更优？\n> - 如果 `nums2` 的元素存储在磁盘上，内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 双指针\n>\n> 二分查找\n>\n> 排序\n\n```java\nclass Solution {\n    public int[] intersect(int[] nums1, int[] nums2) {\n        int[]hashtable1=new int[1001];\n        int[]hashtable2=new int[1001];\n        Arrays.fill(hashtable1,0);\n        Arrays.fill(hashtable2,0);\n        for (int i = 0; i < nums1.length; i++) {\n            hashtable1[nums1[i]]++;\n        }\n        for (int i = 0; i < nums2.length; i++) {\n            hashtable2[nums2[i]]++;\n        }\n        ArrayList<Integer> al=new ArrayList<>();\n        for (int i = 0; i < 1001; i++) {\n            if(hashtable1[i]>hashtable2[i]){\n                hashtable1[i]=hashtable2[i];\n            }\n            for (int j = 0; j < hashtable1[i]; j++) {\n                al.add(i);\n            }\n        }\n        int[]res=new int[al.size()];\n        for (int i = 0; i < al.size(); i++) {\n            res[i]=al.get(i);\n        }\n        return res;\n    }\n}\n```\n\n# <span id=\"head8\">🟢202. 快乐数</span>\n\n> 编写一个算法来判断一个数 `n` 是不是快乐数。\n>\n> **「快乐数」** 定义为：\n>\n> - 对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和。\n> - 然后重复这个过程直到这个数变为 1，也可能是 **无限循环** 但始终变不到 1。\n> - 如果这个过程 **结果为** 1，那么这个数就是快乐数。\n>\n> 如果 `n` 是 *快乐数* 就返回 `true` ；不是，则返回 `false` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：n = 19\n> 输出：true\n> 解释：\n> 12 + 92 = 82\n> 82 + 22 = 68\n> 62 + 82 = 100\n> 12 + 02 + 02 = 1\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：n = 2\n> 输出：false\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= n <= 231 - 1`\n>\n> Related Topics\n>\n> 哈希表\n>\n> 数学\n>\n> 双指针\n\n```java\nclass Solution {\n    public boolean isHappy(int n) {\n        if(n==1){\n            return true;\n        }\n        Set<Integer> set=new HashSet<>();\n        while(true){\n            int sum=0;\n            while(n>0){\n                sum+=(n%10)*(n%10);\n                n/=10;\n            }\n            if(sum==1){\n                return true;\n            }else if(set.contains(sum)){\n                return false;\n            }else{\n                set.add(sum);\n                n=sum;\n                sum=0;\n            }\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head9\"> 🟢1. 两数之和</span>\n\n> 给定一个整数数组 `nums` 和一个整数目标值 `target`，请你在该数组中找出 **和为目标值** *`target`* 的那 **两个** 整数，并返回它们的数组下标。\n>\n> 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。\n>\n> 你可以按任意顺序返回答案。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [2,7,11,15], target = 9\n> 输出：[0,1]\n> 解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [3,2,4], target = 6\n> 输出：[1,2]\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：nums = [3,3], target = 6\n> 输出：[0,1]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - xxxxxxxxxx14 1public class Solution {2    public ListNode detectCycle(ListNode head) {3        ListNode p=head;4        ArrayList<ListNode>al=new ArrayList<>();5        while(p!=null){6            if(al.contains(p)){7                return p;8            }9            al.add(p);10            p=p.next;11        }12        return null;13    }14}java\n> - `-109 <= nums[i] <= 109`\n> - `-109 <= target <= 109`\n> - **只会存在一个有效答案**\n>\n> \n>\n> **进阶：**你可以想出一个时间复杂度小于 `O(n2)` 的算法吗？\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n\n第一次做的时候没有思路,只能暴力了5555555\n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[]res=new int[2];\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j < nums.length&&j!=i; j++) {\n                if(nums[i]+nums[j]==target){\n                    res[0]=i;\n                    res[1]=j;\n                    return res;\n                }\n            }\n        }\n        return null;\n    }\n}\n```\n\n对照卡哥的重新写了一个.其中值得注意的是惯常思维是key是下标,value是值.然而hashmap自带的函数只可以按照key找value,所以这道题反过来安排\n\n```java\nclass Solution {\n    public int[] twoSum(int[] nums, int target) {\n        int[]res=new int[2];\n        HashMap<Integer,Integer> map=new HashMap<>();\n        for (int i = 0; i < nums.length; i++) {\n            if(map.containsKey(target-nums[i])){\n                res[0]=i;\n                res[1]=map.get(target-nums[i]);\n                break;\n            }\n            map.put(nums[i],i);\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head12\"> 🟡454.四数相加II</span>\n\n> 给你四个整数数组 `nums1`、`nums2`、`nums3` 和 `nums4` ，数组长度都是 `n` ，请你计算有多少个元组 `(i, j, k, l)` 能满足：\n>\n> - `0 <= i, j, k, l < n`\n> - `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n> 输出：2\n> 解释：\n> 两个元组如下：\n> 1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n> 2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n> 输出：1\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `n == nums1.length`\n> - `n == nums2.length`\n> - `n == nums3.length`\n> - `n == nums4.length`\n> - `1 <= n <= 200`\n> - `-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228`\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n\n自己写的暴力O(n4)妥妥超时,按照卡哥的代码写了,学会了:\n\nhashmap.getOrDefault(key,value)这个函数\n\n```java\nclass Solution {\n    public int fourSumCount(int[] nums1, int[] nums2, int[] nums3, int[] nums4) {\n        int cnt=0;\n        Map<Integer,Integer> map=new HashMap<>();\n        for(int i:\n                nums1){\n            for(int j:\n                    nums2){\n                map.put(i+j,map.getOrDefault(i+j,0)+1);\n            }\n        }\n        for (int k:\n                nums3) {\n            for (int l:\n                    nums4) {\n                cnt+=map.getOrDefault(0-k-l,0);\n            }\n\n        }\n        return cnt;\n    }\n}\n```\n\n\n\n# <span id=\"head13\"> 🟡15. 三数之和</span>\n\n> 给你一个整数数组 `nums` ，判断是否存在三元组 `[nums[i], nums[j], nums[k]]` 满足 `i != j`、`i != k` 且 `j != k` ，同时还满足 `nums[i] + nums[j] + nums[k] == 0` 。请\n>\n> 你返回所有和为 `0` 且不重复的三元组。\n>\n> **注意：**答案中不可以包含重复的三元组。\n>\n> \n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [-1,0,1,2,-1,-4]\n> 输出：[[-1,-1,2],[-1,0,1]]\n> 解释：\n> nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。\n> nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。\n> nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。\n> 不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。\n> 注意，输出的顺序和三元组的顺序并不重要。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [0,1,1]\n> 输出：[]\n> 解释：唯一可能的三元组和不为 0 。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：nums = [0,0,0]\n> 输出：[[0,0,0]]\n> 解释：唯一可能的三元组和为 0 。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `3 <= nums.length <= 3000`\n> - `-105 <= nums[i] <= 105`\n>\n> Related Topics\n>\n> 数组\n>\n> 双指针\n>\n> 排序\n\n```java\nclass Solution {\n    public List<List<Integer>> threeSum(int[] nums) {\n        Set<String>set=new TreeSet<>();\n        List<List<Integer>>res=new ArrayList<>();\n        Arrays.sort(nums);\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = i+1; j < nums.length; j++) {\n                if(Arrays.binarySearch(nums,0-nums[i]-nums[j])>=0&&\n                        Arrays.binarySearch(nums,0-nums[i]-nums[j])!=i&&\n                        Arrays.binarySearch(nums,0-nums[i]-nums[j])!=j){\n                    int k=Arrays.binarySearch(nums,0-nums[i]-nums[j]);\n                    int[]arr_=new int[3];\n                    arr_[0]=nums[i];\n                    arr_[1]=nums[j];\n                    arr_[2]=nums[k];\n                    Arrays.sort(arr_);\n                    String key=arr_[0]+\"\"+arr_[1]+\"\"+arr_[2];\n                    if(!set.contains(key)){\n                        List<Integer> al=new ArrayList<>();\n                        set.add(key);\n                        al.add(arr_[0]);\n                        al.add(arr_[1]);\n                        al.add(arr_[2]);\n                        res.add(al);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n# <span id=\"head14\">🟡18. 四数之和</span>\n\n> 给你一个由 `n` 个整数组成的数组 `nums` ，和一个目标值 `target` 。请你找出并返回满足下述全部条件且**不重复**的四元组 `[nums[a], nums[b], nums[c], nums[d]]` （若两个四元组元素一一对应，则认为两个四元组重复）：\n>\n> - `0 <= a, b, c, d < n`\n> - `a`、`b`、`c` 和 `d` **互不相同**\n> - `nums[a] + nums[b] + nums[c] + nums[d] == target`\n>\n> 你可以按 **任意顺序** 返回答案 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,0,-1,0,-2,2], target = 0\n> 输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [2,2,2,2,2], target = 8\n> 输出：[[2,2,2,2]]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 200`\n> - `-109 <= nums[i] <= 109`\n> - `-109 <= target <= 109`\n>\n> Related Topics\n>\n> 数组\n>\n> 双指针\n>\n> 排序\n\n```java\n\n```\n\n","categories":["algorithm"]},{"title":"1. Array","url":"/2023/08/27/23-8-27-algorithm-array/","content":"\n\n\n|      | 是否完成 | 难度 | 题号                                                      | 标签                 |\n| ---- | :------: | :--: | --------------------------------------------------------- | :------------------- |\n| 1    |    ✅     |  🟢   | [[704]二分查找](#head1)                                   | 二分法               |\n| 2    |    ✅     |  🟢   | [[35]搜索插入位置 ](#head2)                               | 二分法 左边缘        |\n| 3    |    ✅     |  🟡   | [[34]在排序数组中查找元素的第一个和最后一个位置 ](#head3) | 二分法 左边缘 右边缘 |\n| 4    |    ✅     |  🟢   | [[69]x 的平方根](#head4)                                  | 二分法 右边界 数学   |\n| 5    |    ✅     |  🟢   | [[367]有效的完全平方数](#head5)                           | 二分法 右边界 数学   |\n| 6    |    ✅     |  🟢   | [[27]移除元素 ](#head6)                                   | 双指针               |\n| 7    |    ✅     |  🟢   | [[26]删除排序数组中的重复项](#head7)                      | 双指针               |\n| 8    |    ✅     |  🟢   | [[283]移动零](#head8)                                     | 双指针               |\n| 9    |    ✅     |  🟢   | [[844]比较含退格的字符串](#head9)                         | 栈 (双指针)          |\n| 10   |    ✅     |  🟢   | [[977]有序数组的平方 ](#head10)                           | 双指针               |\n| 11   |    ✅     |  🟡   | [[209]长度最小的子数组 ](#head11)                         | 滑动窗口 (队列)      |\n| 12   |    ✅     |  🟡   | [[904]水果成篮](#head12)                                  | 滑动窗口             |\n| 13   |          |  🟠   | [[76]最小覆盖子串](#head13)                               |                      |\n| 14   |    ✅     |  🟡   | [[59]螺旋矩阵II ](#head14)                                | 模拟                 |\n| 15   |    ✅     |  🟡   | [[54]螺旋矩阵](#head15)                                   | 模拟                 |\n\n\n\n# <span id=\"head1\"> 🟢[704]二分查找</span>a\n\n>给定一个 `n` 个元素有序的（升序）整型数组 `nums` 和一个目标值 `target` ，写一个函数搜索 `nums` 中的 `target`，如果目标值存在返回下标，否则返回 `-1`。\n>\n>**示例 1:**\n>\n>```\n>输入: nums = [-1,0,3,5,9,12], target = 9\n>输出: 4\n>解释: 9 出现在 nums 中并且下标为 4\n>```\n>\n>**示例 2:**\n>\n>```\n>输入: nums = [-1,0,3,5,9,12], target = 2\n>输出: -1\n>解释: 2 不存在 nums 中因此返回 -1\n>```\n>\n>\n>\n>**提示：**\n>\n>1. 你可以假设 `nums` 中的所有元素是不重复的。\n>2. `n` 将在 `[1, 10000]`之间。\n>3. `nums` 的每个元素都将在 `[-9999, 9999]`之间。\n>\n>Related Topics\n>\n>数组\n>\n>二分查找\n\n```java\nclass Solution {\n    public int search(int[] nums, int target) {\n\n        int len=nums.length;\n        int l=0,r=len-1;\n\n        while(l<=r){\n            //int mid=(l+r)>>1; 改进成下面↓,可以防止溢出.\n            int mid=l+((r-l)>>1);\n\n            if(target<nums[mid]){\n                r=mid-1;\n            }else if(target>nums[mid]){\n                l=mid+1;\n            }else{\n                return mid;\n            }\n        }\n        return -1;\n    }\n}\n```\n\n\n\n# <span id=\"head2\">🟢[35]搜索插入位置 </span>\n\n>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。\n>\n>请必须使用时间复杂度为 `O(log n)` 的算法。\n>\n>\n>\n>**示例 1:**\n>\n>```\n>输入: nums = [1,3,5,6], target = 5\n>输出: 2\n>```\n>\n>**示例 2:**\n>\n>```\n>输入: nums = [1,3,5,6], target = 2\n>输出: 1\n>```\n>\n>**示例 3:**\n>\n>```\n>输入: nums = [1,3,5,6], target = 7\n>输出: 4\n>```\n>\n>\n>\n>**提示:**\n>\n>- `1 <= nums.length <= 104`\n>- `-104 <= nums[i] <= 104`\n>- `nums` 为 **无重复元素** 的 **升序** 排列数组\n>- `-104 <= target <= 104`\n>\n>Related Topics\n>\n>数组\n>\n>二分查找\n\n```java\nclass Solution {\n    public int searchInsert(int[] nums, int target) {\n\n        int len=nums.length;\n        int l=0, r=len-1;\n\n        while(l<=r){\n            int mid=l+((r-l)>>1);\n            if(target<nums[mid]){\n                r=mid-1;\n            }else if(target>nums[mid]){\n                l=mid+1;\n            }else{\n                return mid;\n            }\n        }\n        return l;//此时l代表元素在数组中的左边缘.如果元素有重复,则是第一次出现的位置.\n    }\n}\n```\n\n\n\n# <span id=\"head3\">🟡[34]在排序数组中查找元素的第一个和最后一个位置 </span>\n\n>\n>\n>给你一个按照非递减顺序排列的整数数组 `nums`，和一个目标值 `target`。请你找出给定目标值在数组中的开始位置和结束位置。\n>\n>如果数组中不存在目标值 `target`，返回 `[-1, -1]`。\n>\n>你必须设计并实现时间复杂度为 `O(log n)` 的算法解决此问题。\n>\n>\n>\n>**示例 1：**\n>\n>```\n>输入：nums = [5,7,7,8,8,10], target = 8\n>输出：[3,4]\n>```\n>\n>**示例 2：**\n>\n>```\n>输入：nums = [5,7,7,8,8,10], target = 6\n>输出：[-1,-1]\n>```\n>\n>**示例 3：**\n>\n>```\n>输入：nums = [], target = 0\n>输出：[-1,-1]\n>```\n>\n>\n>\n>**提示：**\n>\n>- `0 <= nums.length <= 105`\n>- `-109 <= nums[i] <= 109`\n>- `nums` 是一个非递减数组\n>- `-109 <= target <= 109`\n>\n>Related Topics\n>\n>数组\n>\n>二分查找\n\n```java\nclass Solution {\n    public int[] searchRange(int[] nums, int target) {\n\n        int len= nums.length;\n        int l=0,r=len-1;\n        int mid=0;\n        int[]ans={-1,-1};\n\n        if(len==0){\n            return ans;\n        }\n\t\t//以下是寻找元素在数组中第一次出现的位置\n        while(l<r){\n            mid=l+((r-l)>>1);\n            if(target<=nums[mid]){\n                r=mid;\n            }else{\n                l=mid+1;\n            }\n\n        }\n        if(target==nums[l]){\n            ans[0]=l;\n        }else{//元素不存在\n            return ans;\n        }\n        \n\t\t//以下是寻找元素在数组中最后一次出现的位置\t\n        l=0;\n        r=len-1;\n        while(l<r){\n            mid=l+((r-l+1)>>1);//找右边缘需要加一\n            if(target>=nums[mid]){\n                l=mid;\n            }else{\n                r=mid-1;\n            }\n        }\n        ans[1]=r;\n\n        return ans;\n\n    }\n}\n```\n\n\n\n# <span id=\"head4\">🟢[69]x 的平方根</span>\n\n> 给你一个非负整数 `x` ，计算并返回 `x` 的 **算术平方根** 。\n>\n> 由于返回类型是整数，结果只保留 **整数部分** ，小数部分将被 **舍去 。**\n>\n> **注意：**不允许使用任何内置指数函数和算符，例如 `pow(x, 0.5)` 或者 `x ** 0.5` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：x = 4\n> 输出：2\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：x = 8\n> 输出：2\n> 解释：8 的算术平方根是 2.82842..., 由于返回类型是整数，小数部分将被舍去。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `0 <= x <= 231 - 1`\n>\n> Related Topics\n>\n> 数学\n>\n> 二分查找\n\n第一次想到了,用二分查找,但是感觉比较一维线性(?),果不其然遇到2147395599超时了.\n\n```java\nclass Solution {\n    public int mySqrt(int x) {\n        int l=0,r=x;\n        while(l<r){\n            int mid=l+((r-l)>>1);\n            if(x<=mid*mid){\n                r=mid;\n            }else{\n                l=mid+1;\n            }\n        }\n        if(l*l==x){\n            return l;\n        }\n        return l-1;\n    }\n}\n```\n\n接着看了别人题解,发现下面错误:\n\n1. 根据数学理论,应当寻找右边界,而不是之前认为的左边界\n2. **if(x<=mid*mid)**可能导致乘法运算溢出,故改成**if(x/mid<=mid)**\n3. 需要考虑x=0和x=1的特殊情况\n\n```Java\nclass Solution {\n    public int mySqrt(int x) {\n        if(x==0||x==1){\n            return x;\n        }\n        int l=1,r=x-1,mid=0;\n        while(l<r){\n            mid=l+((r-l+1)>>1);\n            if(x/mid>=mid){//❗防止乘法运算溢出\n                l=mid;\n            }else{\n                r=mid-1;\n            }\n        }\n        return r;\n    }\n}\n```\n\n\n\n# <span id=\"head5\"> 🟢[367]有效的完全平方数</span>\n\n> 给你一个正整数 `num` 。如果 `num` 是一个完全平方数，则返回 `true` ，否则返回 `false` 。\n>\n> **完全平方数** 是一个可以写成某个整数的平方的整数。换句话说，它可以写成某个整数和自身的乘积。\n>\n> 不能使用任何内置的库函数，如 `sqrt` 。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：num = 16\n> 输出：true\n> 解释：返回 true ，因为 4 * 4 = 16 且 4 是一个整数。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：num = 14\n> 输出：false\n> 解释：返回 false ，因为 3.742 * 3.742 = 14 但 3.742 不是一个整数。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= num <= 231 - 1`\n>\n> Related Topics\n>\n> 数学\n>\n> 二分查找\n\n```Java\n    public boolean isPerfectSquare(int num) {\n        if(num==1)return true;\n        int l=1,r=num;\n        while(l<r){\n            int mid=l+((r-l+1)>>1);\n            if(num/mid>=mid){\n                l=mid;\n            }else{\n                r=mid-1;\n            }\n        }\n        return r*r==num;\n    }\n}\n```\n\n\n\n# <span id=\"head6\">🟢[27]移除元素 </span>\n\n>给你一个数组 `nums` 和一个值 `val`，你需要 **[原地](https://baike.baidu.com/item/原地算法)** 移除所有数值等于 `val` 的元素，并返回移除后数组的新长度。\n>\n>不要使用额外的数组空间，你必须仅使用 `O(1)` 额外空间并 **[原地 ](https://baike.baidu.com/item/原地算法)修改输入数组**。\n>\n>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。\n>\n>\n>\n>**说明:**\n>\n>为什么返回数值是整数，但输出的答案是数组呢?\n>\n>请注意，输入数组是以**「引用」**方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。\n>\n>你可以想象内部操作如下:\n>\n>```\n>// nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝\n>int len = removeElement(nums, val);\n>\n>// 在函数里修改输入数组对于调用者是可见的。\n>// 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。\n>for (int i = 0; i < len; i++) {\n>print(nums[i]);\n>}\n>```\n>\n>\n>\n>**示例 1：**\n>\n>```\n>输入：nums = [3,2,2,3], val = 3\n>输出：2, nums = [2,2]\n>解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。\n>```\n>\n>**示例 2：**\n>\n>```\n>输入：nums = [0,1,2,2,3,0,4,2], val = 2\n>输出：5, nums = [0,1,4,0,3]\n>解释：函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。\n>```\n>\n>\n>\n>**提示：**\n>\n>- `0 <= nums.length <= 100`\n>- `0 <= nums[i] <= 50`\n>- `0 <= val <= 100`\n>\n>Related Topics\n>\n>数组\n>\n>双指针\n\n```Java\nclass Solution {\n    public int removeElement(int[] nums, int val) {\n        int len=nums.length;\n        int pre=0,last=len-1;\n        while(last>=0&&nums[last]==val){//寻找从后往前数的第一个可以替换的位置\n            last--;\n        }\n        while(pre<last){\n            if(nums[pre]==val){\n                int temp=nums[pre];\n                nums[pre]=nums[last];\n                nums[last]=temp;\n                while(last>=pre&&nums[last]==val){//再次寻找从后往前数的第一个可以替换的位置\n                    last--;\n                }\n            }\n            pre++;\n        }\n        return last+1;\n    }\n}\n```\n\n# <span id=\"head7\">🟢[26]删除排序数组中的重复项</span>\n\n> 给你一个 **升序排列** 的数组 `nums` ，请你**[ 原地](http://baike.baidu.com/item/原地算法)** 删除重复出现的元素，使每个元素 **只出现一次** ，返回删除后数组的新长度。元素的 **相对顺序** 应该保持 **一致** 。然后返回 `nums` 中唯一元素的个数。\n>\n> 考虑 `nums` 的唯一元素的数量为 `k` ，你需要做以下事情确保你的题解可以被通过：\n>\n> - 更改数组 `nums` ，使 `nums` 的前 `k` 个元素包含唯一元素，并按照它们最初在 `nums` 中出现的顺序排列。`nums` 的其余元素与 `nums` 的大小不重要。\n> - 返回 `k` 。\n>\n> **判题标准:**\n>\n> 系统会用下面的代码来测试你的题解:\n>\n> ```\n> int[] nums = [...]; // 输入数组\n> int[] expectedNums = [...]; // 长度正确的期望答案\n> \n> int k = removeDuplicates(nums); // 调用\n> \n> assert k == expectedNums.length;\n> for (int i = 0; i < k; i++) {\n>     assert nums[i] == expectedNums[i];\n> }\n> ```\n>\n> 如果所有断言都通过，那么您的题解将被 **通过**。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：nums = [1,1,2]\n> 输出：2, nums = [1,2,_]\n> 解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：nums = [0,0,1,1,1,2,2,3,3,4]\n> 输出：5, nums = [0,1,2,3,4]\n> 解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= nums.length <= 3 * 104`\n> - `-104 <= nums[i] <= 104`\n> - `nums` 已按 **升序** 排列\n>\n> Related Topics\n>\n> 数组\n>\n> 双指针\n\n```Java\nclass Solution {\n    public int removeDuplicates(int[] nums) {\n        int len=nums.length;\n        if(len==1)return 1;\n        int a=0,b=a+1;\n\n        while(b<len&&nums[b]==nums[a]){//b指向第一个和a指向的元素不同的元素\n            b++;\n        }\n\n        while(a+1<len&&b<len){\n            nums[a+1]=nums[b];\n            a++;\n            while(b<len&&nums[b]==nums[a]){//b指向下一个和a指向的元素不同的元素\n                b++;\n            }\n        }\n        return a+1;\n    }\n}\n```\n\n\n\n# <span id=\"head8\"> 🟢[283]移动零</span>\n\n> 给定一个数组 `nums`，编写一个函数将所有 `0` 移动到数组的末尾，同时保持非零元素的相对顺序。\n>\n> **请注意** ，必须在不复制数组的情况下原地对数组进行操作。\n>\n> \n>\n> **示例 1:**\n>\n> ```\n> 输入: nums = [0,1,0,3,12]\n> 输出: [1,3,12,0,0]\n> ```\n>\n> **示例 2:**\n>\n> ```\n> 输入: nums = [0]\n> 输出: [0]\n> ```\n>\n> \n>\n> **提示**:\n>\n> - `1 <= nums.length <= 104`\n> - `-231 <= nums[i] <= 231 - 1`\n>\n> \n>\n> **进阶：**你能尽量减少完成的操作次数吗？\n>\n> Related Topics\n>\n> 数组\n>\n> 双指针\n\n```java\nclass Solution {\n    public void moveZeroes(int[] nums) {\n        int len= nums.length;\n        int a=0;\n        while(a<len&&nums[a]!=0){//a指向第一个零元素\n            a++;\n        }\n        int b=a+1;\n        while(b<len&&nums[b]==0){//b指向第一个非零元素\n            b++;\n        }\n        while(a<len&b<len){\n            int temp=nums[a];\n            nums[a]=nums[b];\n            nums[b]=temp;\n            while(a<len&&nums[a]!=0){//a指向下一个零元素\n                a++;\n            }\n            b=a+1;\n            while(b<len&&nums[b]==0){//b指向下一个非零元素\n                b++;\n            }\n        }\n    }\n}\n```\n\n\n\n# <span id=\"head9\"> 🟢[844]比较含退格的字符串</span>\n\n> 给定 `s` 和 `t` 两个字符串，当它们分别被输入到空白的文本编辑器后，如果两者相等，返回 `true` 。`#` 代表退格字符。\n>\n> **注意：**如果对空文本输入退格字符，文本继续为空。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = \"ab#c\", t = \"ad#c\"\n> 输出：true\n> 解释：s 和 t 都会变成 \"ac\"。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = \"ab##\", t = \"c#d#\"\n> 输出：true\n> 解释：s 和 t 都会变成 \"\"。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：s = \"a#c\", t = \"b\"\n> 输出：false\n> 解释：s 会变成 \"c\"，但 t 仍然是 \"b\"。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= s.length, t.length <= 200`\n> - `s` 和 `t` 只含有小写字母以及字符 `'#'`\n>\n> \n>\n> **进阶：**\n>\n> - 你可以用 `O(n)` 的时间复杂度和 `O(1)` 的空间复杂度解决该问题吗？\n>\n> Related Topics\n>\n> 栈\n>\n> 双指针\n>\n> 字符串\n>\n> 模拟\n\n这道题首先想到了用栈,但是既然在训练双指针,还是用双指针做一遍吧.\n\n```java\nclass Solution {\n    public boolean backspaceCompare(String s, String t) {\n        int len_s=s.length(),len_t=t.length();\n        Stack<Character> S=new Stack<Character>();//这里注意尖括号里面是Character,不是char\n        Stack<Character> T=new Stack<Character>();\n\n        int index_s=0;\n        while(index_s<len_s){\n            if(s.charAt(index_s)!='#'){\n                S.push(s.charAt(index_s));\n            }else if(!S.empty()){\n                S.pop();\n            }\n            index_s++;\n        }\n\n        int index_t=0;\n        while(index_t<len_t){\n            if(t.charAt(index_t)!='#'){\n                T.push(t.charAt(index_t));\n            }else if(!T.empty()){\n                T.pop();\n            }\n            index_t++;\n        }\n        return S.equals(T);\n    }\n}\n```\n\n\n\n# <span id=\"head10\">🟢[977]有序数组的平方 </span>\n\n>给你一个按 **非递减顺序** 排序的整数数组 `nums`，返回 **每个数字的平方** 组成的新数组，要求也按 **非递减顺序** 排序。\n>\n>**示例 1：**\n>\n>```\n>输入：nums = [-4,-1,0,3,10]\n>输出：[0,1,9,16,100]\n>解释：平方后，数组变为 [16,1,0,9,100]\n>排序后，数组变为 [0,1,9,16,100]\n>```\n>\n>**示例 2：**\n>\n>```\n>输入：nums = [-7,-3,2,3,11]\n>输出：[4,9,9,49,121]\n>```\n>\n>**提示：**\n>\n>- `1 <= nums.length <= 104`\n>- `-104 <= nums[i] <= 104`\n>- `nums` 已按 **非递减顺序** 排序\n>\n>**进阶：**\n>\n>- 请你设计时间复杂度为 `O(n)` 的算法解决本问题\n>\n>Related Topics\n>\n>数组\n>\n>双指针\n>\n>排序\n\n```java\nclass Solution {\n    public int[] sortedSquares(int[] nums) {\n\n        int len=nums.length;\n        int[]ans=new int[len];//创建定长的新数组\n        int index=len-1;\n        int l=0,r=len-1;\n        while(index>=0){\n            if(nums[l]*nums[l]>=nums[r]*nums[r]){\n                ans[index]=nums[l]*nums[l];\n                l++;\n            }else{\n                ans[index]=nums[r]*nums[r];\n                r--;\n            }\n            index--;\n        }\n        return ans;\n    }\n}\n```\n\n\n\n# <span id=\"head11\">🟡[209]长度最小的子数组 </span>\n\n>给定一个含有 `n` 个正整数的数组和一个正整数 `target` **。**\n>\n>找出该数组中满足其总和大于等于 `target` 的长度最小的 **连续子数组** `[numsl, numsl+1, ..., numsr-1, numsr]` ，并返回其长度**。**如果不存在符合条件的子数组，返回 `0` 。\n>\n>**示例 1：**\n>\n>```\n>输入：target = 7, nums = [2,3,1,2,4,3]\n>输出：2\n>解释：子数组 [4,3] 是该条件下的长度最小的子数组。\n>```\n>\n>**示例 2：**\n>\n>```\n>输入：target = 4, nums = [1,4,4]\n>输出：1\n>```\n>\n>**示例 3：**\n>\n>```\n>输入：target = 11, nums = [1,1,1,1,1,1,1,1]\n>输出：0\n>```\n>\n>\n>\n>**提示：**\n>\n>- `1 <= target <= 109`\n>- `1 <= nums.length <= 105`\n>- `1 <= nums[i] <= 105`\n>\n>\n>\n>**进阶：**\n>\n>- 如果你已经实现 `O(n)` 时间复杂度的解法, 请尝试设计一个 `O(n log(n))` 时间复杂度的解法。\n>\n>Related Topics\n>\n>数组\n>\n>二分查找\n>\n>前缀和\n>\n>滑动窗口\n\n暴力解法,也许可以骗一点分.🙃\n\n```java\nclass Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int len=nums.length;\n        int ans=100001,sum=0;\n        for(int i=0;i<len;i++){\n            int sum_=0;\n            for(int j=i;j<len&&sum_<target;j++){\n                sum_+=nums[j];\n                if(sum_>=target&&(j-i+1)<=ans){\n                    ans=j-i+1;\n                    sum=sum_;\n                }\n            }\n        }\n        if(ans!=100001){\n            return ans;\n        }else{\n            return 0;\n        }\n    }\n}\n```\n\n第一次使用滑动窗口\n\n```java\nclass Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int len=nums.length;\n        int i=0;\n        int sum=0;\n        int ans= Integer.MAX_VALUE;\n        for(int j=0;j<len;j++){\n            sum+=nums[j];\n            while(sum>=target){\n                ans=Math.min(ans,j-i+1);\n                sum-=nums[i];\n                i++;\n            }\n        }\n        return ans==Integer.MAX_VALUE?0:ans;\n    }\n}\n```\n\n\n\n# <span id=\"head12\"> 🟡[904]水果成篮</span>\n\n> 你正在探访一家农场，农场从左到右种植了一排果树。这些树用一个整数数组 `fruits` 表示，其中 `fruits[i]` 是第 `i` 棵树上的水果 **种类** 。\n>\n> 你想要尽可能多地收集水果。然而，农场的主人设定了一些严格的规矩，你必须按照要求采摘水果：\n>\n> - 你只有 **两个** 篮子，并且每个篮子只能装 **单一类型** 的水果。每个篮子能够装的水果总量没有限制。\n> - 你可以选择任意一棵树开始采摘，你必须从 **每棵** 树（包括开始采摘的树）上 **恰好摘一个水果** 。采摘的水果应当符合篮子中的水果类型。每采摘一次，你将会向右移动到下一棵树，并继续采摘。\n> - 一旦你走到某棵树前，但水果不符合篮子的水果类型，那么就必须停止采摘。\n>\n> 给你一个整数数组 `fruits` ，返回你可以收集的水果的 **最大** 数目。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：fruits = [1,2,1]\n> 输出：3\n> 解释：可以采摘全部 3 棵树。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：fruits = [0,1,2,2]\n> 输出：3\n> 解释：可以采摘 [1,2,2] 这三棵树。\n> 如果从第一棵树开始采摘，则只能采摘 [0,1] 这两棵树。\n> ```\n>\n> **示例 3：**\n>\n> ```\n> 输入：fruits = [1,2,3,2,2]\n> 输出：4\n> 解释：可以采摘 [2,3,2,2] 这四棵树。\n> 如果从第一棵树开始采摘，则只能采摘 [1,2] 这两棵树。\n> ```\n>\n> **示例 4：**\n>\n> ```\n> 输入：fruits = [3,3,3,1,2,1,1,2,3,3,4]\n> 输出：5\n> 解释：可以采摘 [1,2,1,1,2] 这五棵树。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `1 <= fruits.length <= 105`\n> - `0 <= fruits[i] < fruits.length`\n>\n> Related Topics\n>\n> 数组\n>\n> 哈希表\n>\n> 滑动窗口\n\n```java\nclass Solution {\n    public int totalFruit(int[] fruits) {\n        int len=fruits.length;\n        if(len<=2){\n            return len;\n        }\n        int index=0,cnt=0,max=0;\n        int i=0,j=i+1;\n        while(j<len&&fruits[j]==fruits[i]){\n            j++;\n        }\n        while(index<len){\n            if(fruits[index]==fruits[i]||fruits[index]==fruits[j]){\n                cnt++;\n            }else{\n                i=j;\n                j=i+1;\n                while(j<len&&fruits[j]==fruits[i]){\n                    j++;\n                }\n                cnt=1;\n                index=i;\n            }\n            max=Math.max(max,cnt);\n            index++;\n        }\n        return max;\n    }\n}\n```\n\n\n\n# <span id=\"head13\"> 🟠[76]最小覆盖子串</span>\n\n> 给你一个字符串 `s` 、一个字符串 `t` 。返回 `s` 中涵盖 `t` 所有字符的最小子串。如果 `s` 中不存在涵盖 `t` 所有字符的子串，则返回空字符串 `\"\"` 。\n>\n> \n>\n> **注意：**\n>\n> - 对于 `t` 中重复字符，我们寻找的子字符串中该字符数量必须不少于 `t` 中该字符数量。\n> - 如果 `s` 中存在这样的子串，我们保证它是唯一的答案。\n>\n> \n>\n> **示例 1：**\n>\n> ```\n> 输入：s = \"ADOBECODEBANC\", t = \"ABC\"\n> 输出：\"BANC\"\n> 解释：最小覆盖子串 \"BANC\" 包含来自字符串 t 的 'A'、'B' 和 'C'。\n> ```\n>\n> **示例 2：**\n>\n> ```\n> 输入：s = \"a\", t = \"a\"\n> 输出：\"a\"\n> 解释：整个字符串 s 是最小覆盖子串。\n> ```\n>\n> **示例 3:**\n>\n> ```\n> 输入: s = \"a\", t = \"aa\"\n> 输出: \"\"\n> 解释: t 中两个字符 'a' 均应包含在 s 的子串中，\n> 因此没有符合条件的子字符串，返回空字符串。\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `m == s.length`\n> - `n == t.length`\n> - `1 <= m, n <= 105`\n> - `s` 和 `t` 由英文字母组成\n>\n> \n>\n> **进阶：**你能设计一个在 `o(m+n)` 时间内解决此问题的算法吗？\n>\n> Related Topics\n>\n> 哈希表\n>\n> 字符串\n>\n> 滑动窗口\n\n# <span id=\"head14\">🟡[59]螺旋矩阵II </span>\n\n>给你一个正整数 `n` ，生成一个包含 `1` 到 `n2` 所有元素，且元素按顺时针顺序螺旋排列的 `n x n` 正方形矩阵 `matrix` 。\n>\n>\n>\n>**示例 1：**\n>\n>![img](https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg)\n>\n>```\n>输入：n = 3\n>输出：[[1,2,3],[8,9,4],[7,6,5]]\n>```\n>\n>**示例 2：**\n>\n>```\n>输入：n = 1\n>输出：[[1]]\n>```\n>\n>\n>\n>**提示：**\n>\n>- `1 <= n <= 20`\n>\n>Related Topics\n>\n>数组\n>\n>矩阵\n>\n>模拟\n\n```java\nclass Solution {\n    public int[][] generateMatrix(int n) {\n        int [][]matrix=new int[n][n];\n        int cnt=1;\n        int i=0,j=-1;\n        while(cnt<=n){\n            matrix[i][++j]=cnt++;//👉\n        }\n        int len=n-1;\n        while(cnt<=n*n){\n            for (int k = 1; k <= len; k++) {\n                matrix[++i][j]=cnt++;//👇\n            }\n            for (int k = 1; k <= len; k++) {\n                matrix[i][--j]=cnt++;//👈\n            }\n            len--;\n            if(len>0){\n                for (int k = 1; k <= len; k++) {\n                    matrix[--i][j]=cnt++;//👆\n                }\n                for (int k = 1; k <= len; k++) {\n                    matrix[i][++j]=cnt++;//👉\n                }\n                len--;\n            }\n        }\n        return matrix;\n    }\n}\n```\n\n\n\n# <span id=\"head15\"> 🟡[54]螺旋矩阵</span>\n\n> 给你一个 `m` 行 `n` 列的矩阵 `matrix` ，请按照 **顺时针螺旋顺序** ，返回矩阵中的所有元素。\n>\n> \n>\n> **示例 1：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg)\n>\n> ```\n> 输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]\n> 输出：[1,2,3,6,9,8,7,4,5]\n> ```\n>\n> **示例 2：**\n>\n> ![img](https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg)\n>\n> ```\n> 输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n> 输出：[1,2,3,4,8,12,11,10,9,5,6,7]\n> ```\n>\n> \n>\n> **提示：**\n>\n> - `m == matrix.length`\n> - `n == matrix[i].length`\n> - `1 <= m, n <= 10`\n> - `-100 <= matrix[i][j] <= 100`\n>\n> Related Topics\n>\n> 数组\n>\n> 矩阵\n>\n> 模拟\n\n```java\nclass Solution {\n    public List<Integer> spiralOrder(int[][] matrix) {\n        int n=matrix.length;\n        int m=matrix[0].length;\n        List<Integer> res=new ArrayList<>();\n        int i=0,j=-1;\n        while(j<m-1){\n            res.add(matrix[i][++j]);   //👉\n        }\n        while(n*m>0){\n\n            n--;\n            for (int k = 0; k <n; k++) {\n                res.add(matrix[++i][j]);//👇\n            }\n\n            m--;\n            if(n*m>0){\n                for (int k = 0; k < m; k++) {\n                    res.add(matrix[i][--j]);//👈\n                }\n            }\n\n            n--;\n            if(n*m>0){\n                for (int k = 0; k < n; k++) {\n                    res.add(matrix[--i][j]);//👆\n                }\n            }\n\n            m--;\n            if(n*m>0){\n                for (int k = 0; k < m; k++) {\n                    res.add(matrix[i][++j]);//👉\n                }\n            }\n        }\n        return res;\n    }\n}\n```\n\n\n\n","categories":["algorithm"]}]